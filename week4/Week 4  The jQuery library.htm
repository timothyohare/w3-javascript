<!DOCTYPE html>
<html><head>
      <title>Week 4: The jQuery library</title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <meta name="description" content="Week 4: The jQuery library">
      <link rel="stylesheet" type="text/css" href="Week%204%20%20The%20jQuery%20library_files/print.css">
    </head>
    <body>
    <a onclick="window.print();return false;" class="book_no_print" href="#"><img class="book_print_icon" alt="Print book" title="Print book" src="Week%204%20%20The%20jQuery%20library_files/book.svg">Print book</a>    <a name="top"></a>
    <h1 class="book_title">Week 4: The jQuery library</h1>
    <p class="book_summary"></p><p>book4</p><p></p>
    <div class="book_info"><table>
    <tbody><tr>
    <td>Site:</td>
    <td><a href="http://classroom.w3devcampus.com/">Classrooms - Online training for Web developers</a></td>
    </tr><tr>
    <td>Course:</td>
    <td>JavaScript - March 2014</td>
    </tr><tr>
    <td>Book:</td>
    <td>Week 4: The jQuery library</td>
    </tr><tr>
    <td>Printed by:</td>
    <td>Timothy O'Hare</td>
    </tr><tr>
    <td>Date:</td>
    <td>Monday, 14 April 2014, 11:36 AM</td>
    </tr>
    </tbody></table></div>

    <div class="book_toc_numbered"><a name="toc"></a><h2 class="book_chapter_title">Table of contents</h2><ul><li><a title="1 Introduction" href="#ch1944">1 Introduction</a></li><li><a title="2 DOM traversal and manipulation" href="#ch1945">2 DOM traversal and manipulation</a></li><li><a title="3 Events" href="#ch1946">3 Events</a></li><li><a title="4 Animation" href="#ch1947">4 Animation</a></li><li><a title="5 AJAX" href="#ch1948">5 AJAX</a></li><li><a title="6 Plugins" href="#ch1949">6 Plugins</a></li></ul></div><div class="book_chapter"><a name="ch1944"></a><h2 class="book_chapter_title">1 Introduction</h2><p><img src="Week%204%20%20The%20jQuery%20library_files/jquery-logo.png" alt="jQuery" height="101" width="411"></p>
<p><strong></strong></p>
<p><strong>What is jQuery?</strong><br>"jQuery is a fast, small, and 
feature-rich JavaScript library. It makes things like HTML document 
traversal and manipulation, event handling, animation, and Ajax much 
simpler with an easy-to-use API that works across a multitude of 
browsers. With a combination of versatility and extensibility, jQuery 
has changed the way that millions of people write JavaScript."<br>source: jquery.com</p>
<p>&nbsp;</p>
<p>jQuery was born in 2006 from the hands of John Resig. It is now 
maintained by a great developer team. Nowadays, it is probably the most 
used JavaScript library, although there are many other equivalent 
libraries such as Mootools, Dojo, ExtJS, ...</p>
<p>We can describe jQuery like this: <strong>jQuery</strong></p>
<ul>
<li><strong>simplifies</strong> web apis</li>
<li>enhances the cross-browser <strong>compatibility</strong> of our development</li>
<li>has a lot of <strong>plugins</strong> developed by the community</li>
<li>lets us easily write more plugins</li>
</ul>
<p>In 2012, the jQuery board announced the creation of the jQuery 
Foundation. The foundation currently combines five projects: jQuery 
Core, jQuery UI, jQuery Mobile, QUnit and Sizzle. Those projects are 
maintained by the developer team of the jQuery Foundation.</p>
<div style="overflow: auto;"><img src="Week%204%20%20The%20jQuery%20library_files/jquery%2520foundation.jpg" alt="the jquery foundation" style="float: left; margin-right: 30px;" height="405" width="182">The five tools of the jQuery Foundation:
<ul>
<li><strong>jQuery Core</strong>: what we are going to learn</li>
<li><strong>jQuery UI</strong> is a set of user interaction tools, effects, widgets and themes built on top of jQuery.</li>
<li><strong>jQuery Mobile</strong> is a customizable HTML5-based user interface system for all popular mobile device platforms based on jQuery and jQuery UI</li>
<li><strong>QUnit</strong> is a unit testing framework for JavaScript</li>
<li><strong>Sizzle</strong> is a pure JavaScript selector engine</li>
</ul>
</div>
<p>Actually, there are two versions of jQuery: 1.x and 2.x. They are 
very different, especially in their philosophy. Version 1.x tries to 
provide functionality to a large set of browsers. The second promotes 
performance, reducing cross-browser compatibility. Both of them are 
maintained.<br>We will study Version 1.x which provides the same API as 
version 2.x. Since &nbsp;version 1.9, a few interfaces in the jQuery API
 have changed. Unfortunately, many plugins have been created with jQuery
 versions prior to 1.9 and are not compatible with the latest versions. 
So, you &nbsp;may have to switch between different versions of jQuery 
according to dependencies of your future projects. More information 
about changes since v1.9 here: <a href="http://jquery.com/upgrade-guide/1.9/" target="_blank">http://jquery.com/upgrade-guide/1.9/</a></p>
<p>&nbsp;</p>
<h3>Getting jQuery</h3>
<p><strong>Website:</strong>&nbsp;<a href="http://jquery.com/" target="_blank">http://jquery.com/</a></p>
<p><strong>Downloads (v1.x &amp; v2.x):</strong>&nbsp;<a href="http://jquery.com/download/" target="_blank">http://jquery.com/download/</a></p>
<p><strong>Documentation:</strong>&nbsp;<a href="http://api.jquery.com/" target="_blank">http://api.jquery.com/</a></p>
<p>&nbsp;</p>
<h3>Starting jQuery</h3>
<p>During this week, we will again use functionality provided by the DOM
 API and browsers studied in the previous book "JavaScript in the 
browser". But we will do it through jQuery, reducing the number of lines
 of code and improving readability.</p>
<p><strong>Exercise:</strong><br>Go back to our project JSBegin. We want
 to add the library, download the latest version 1.x of jQuery into the 
folder scripts/jquery/. Then add the minified script into the file 
index.html just before our scripts at the of the element body.<br>In 
order to verify that jQuery has been loaded with our web page, add the 
following line on the first line of the file scripts/main.js:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">console.<span style="color: #660066;">assert</span><span style="color: #009900;">(</span>window.<span style="color: #660066;">jQuery</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'jQuery not loaded'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>&nbsp;</p>
<h3>jQuery as a&nbsp;global object</h3>
<p>Once jQuery is loaded, we can access to an object jQuery or its alias
 "$" (reminder: $ is one the allowed characters for variable/function 
identifiers in Javascript). This object is a function object, meaning 
that it is callable. But it has also properties and methods, such as the
 property fn for plugins.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span>myArray<span style="color: #009900;">)</span>.<span style="color: #660066;">each</span><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>index<span style="color: #009900;">)</span> <span style="color: #009900;">{</span> console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span>index<span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #009900;">}</span><span style="color: #009900;">)</span>
<span style="color: #006600; font-style: italic;">// We created a jQuery wrapper for the array myArray, then we executed the "for each" function provided by the library</span>
$.<span style="color: #660066;">fn</span>.<span style="color: #660066;">myPlugin</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span> <span style="color: #006600; font-style: italic;">/* ... */</span> <span style="color: #009900;">}</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// We defined a plugin named myPlugin</span></pre>
</div>
</div>
</div>
<h3>&nbsp;</h3>
<h3>Starting with "$"</h3>
<p>First of all, we are going to see how we can use the function jQuery 
(i.e. $). This function accepts a few types of arguments and returns an 
"instance" of jQuery. Depending on the arguments given, the function 
will have different effects.</p>
<h4>Matching elements</h4>
<p><strong>$(selector [, context])</strong><br><strong>selector</strong> is a selector string (such as CSS3 selectors).<br><strong>context</strong> is optional and may be a DOM element or jQuery.</p>
<p>Used with those arguments, the function jQuery ($) will return a set of matched elements wrapped in a jQuery object.</p>
<h4>Wrapping in jQuery</h4>
<p>$(domElement)<br>will return the DOM element wrapped in a jQuery object.</p>
<p>$(domElementArray)<br>will return an array of DOM elements wrapped in a jQuery object.</p>
<p>$(obj)<br>will return the object obj wrapped in a jQuery object.</p>
<p>$(jQueryObject)<br>will clone the jQuery object passed in.</p>
<h4>Creating DOM elements</h4>
<p>$(htmlString [, ownerDocument])<br>will create the DOM elements provided in the HTML string within the document "ownerDocument".</p>
<p>$(htmlString, attrObject)<br>is the same function as above but the DOM elements created will receive the attributes passed in the object "attributes"</p>
<h4>Initialization</h4>
<p>$(callback)<br>will execute the function callback when the DOM is 
ready. Before matching elements in the DOM, we must be sure that they 
have already been parsed!</p>
<h3>&nbsp;</h3>
<h3>jQuery objects</h3>
<p>Once you have called the function jQuery, you will have a jQuery object, which provides many tools.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 60%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #003366; font-weight: bold;">var</span> <span style="color: #000066;">$</span>a <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p>the variable $a equals to a jQuery object containing a set of DOM elements "a" matched in the document.</p>
<p>The jQuery object is "array-like". When creating or selecting 
elements, the returned jQuery object contains a collection of elements. 
These elements are accessed with the bracket notation (ex: $('a')[0]). 
It has also some methods of the array and a length property.</p>
<p>On a jQuery object, you can call methods such as "css", "each", 
"find", and so on. jQuery methods are chainable. This means that you can
 call methods one after another. The reason for this is that each jQuery
 function returns the jQuery object or at least a new jQuery object. Of 
course, some methods stop chainability - this is the case for methods 
which allow you to get the value of an attribute or a CSS value, for 
example.</p>
<p><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'color'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'red'</span><span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">// returns the jQuery object created with $('a')</span>
&nbsp; &nbsp; .<a href="http://docs.jquery.com/Traversing/find"><span style="color: #000066;">find</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'span'</span><span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">// returns a new jQuery object</span>
&nbsp; &nbsp; .<a href="http://docs.jquery.com/Effects/hide"><span style="color: #000066;">hide</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">// returns the jQuery object created with find('span')</span>
&nbsp; &nbsp; .<a href="http://docs.jquery.com/Traversing/end"><span style="color: #000066;">end</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">// returns the jQuery object created with $('a')</span>
&nbsp; &nbsp; .<span style="color: #660066;">on</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'click'</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'span'</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Effects/show"><span style="color: #000066;">show</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// returns the jQuery object created with $('a')</span></pre>
</div>
</div>
</div>
<p></p>
<p>One of the benefits of chaining is that we create a jQuery object 
once and we match the DOM elements once. Of course, you can do the 
following:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #003366; font-weight: bold;">var</span> <span style="color: #000066;">$</span>a <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a'</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
<span style="color: #000066;">$</span>aSpan <span style="color: #339933;">=</span> <span style="color: #000066;">$</span>a.<a href="http://docs.jquery.com/Traversing/find"><span style="color: #000066;">find</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'span'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span>a.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span>...<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span>aSpan.<a href="http://docs.jquery.com/Effects/hide"><span style="color: #000066;">hide</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span>a.<span style="color: #660066;">on</span><span style="color: #009900;">(</span>...<span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>But it is heavier and you have created and assigned two variables 
that can never be used in your program. Chaining is simply a way to do 
things that is often used in JavaScript. W<strong>e recommend that you use it, even when you create you own functions</strong>. JQuery plugins should follow this pattern.</p>
<p>So, before taking a look at tools provided by jQuery, we have seen that jQuery is used in a few ways:</p>
<ul>
<li>as a global object:<br>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span>.<span style="color: #339933;">***</span> <span style="color: #006600; font-style: italic;">// jQuery.***</span></pre>
</div>
</div>
</div>
</li>
<li>as a global function:&nbsp;<br>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #339933;">***</span><span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">// jQuery(***)</span></pre>
</div>
</div>
</div>
</li>
<li>as an object:&nbsp;<br>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span>...<span style="color: #009900;">)</span>.<span style="color: #339933;">***</span> <span style="color: #006600; font-style: italic;">// jQuery(...).***</span></pre>
</div>
</div>
</div>
</li>
</ul>
<p>About naming conventions, we recommend to prefix jQuery objects with a $.<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 60%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #003366; font-weight: bold;">var</span> videos <span style="color: #339933;">=</span> document.<span style="color: #660066;">querySelector</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'video'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #003366; font-weight: bold;">var</span> <span style="color: #000066;">$</span>videos <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'video'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p></div><div class="book_chapter"><a name="ch1945"></a><h2 class="book_chapter_title">2 DOM traversal and manipulation</h2><h2 dir="ltr">Selecting</h2>
<p dir="ltr">The first functionality that provides jQuery is element 
selection. Similarly to the new HTML5 selector API, we can retrieve an 
element from the DOM with a css(3) selector. The function $ (i.e. 
jQuery) accepts a selector as parameter and return 0, 1, or many 
elements wrapped in a jQuery object.</p>
<p dir="ltr"><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #003366; font-weight: bold;">var</span> links <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span>links <span style="color: #000066; font-weight: bold;">instanceof</span> <a href="http://docs.jquery.com/Core/jQuery"><span style="color: #000066;">jQuery</span></a><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// true</span>
<span style="color: #003366; font-weight: bold;">var</span> chosen <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'option:selected'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>Of course, you can use any CSS3 selector described in the previous book. But some selectors have been added, such as:<br><br></p>
<ul>
<li>Content filters</li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'article:contains(text)'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// Select article elements which contain the text "text"</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'article:has(video.paused)'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li>Basic filters</li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">':animated'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// Selects elements that are in progress of an animation at the time the selector is run</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'ul.scores li:even'</span><span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">// Selects the first, the third, etc.. li elements within the ul element with the class scores</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'p:not(div &gt; p)'</span><span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">// the negation selector of jQuery accepts any selector</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li>Form selectors</li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">':checkbox'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">':input'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// Selects inputs, textareas, selects, buttons</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">':file'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">':checked'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// Selects checked or selected elements</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li>Visibility filters</li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">':visible'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// Selects elements which have the style display on none, or height/width which equals to 0</span>
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p>More information about jQuery selectors: <a href="http://api.jquery.com/category/selectors/" target="_blank">http://api.jquery.com/category/selectors/</a></p>
<p><strong>Exercises:</strong></p>
<p><a href="http://jsbin.com/UqADIsE/2/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_005.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/UqADIsE/3/edit?js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_002.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p>Selectors and filters can also be used with their corresponding traversing method such as:<br>&nbsp;</p>
<ul>
<li><strong>filter</strong>(selector)</li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'div.submenu'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/filter"><span style="color: #000066;">filter</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">':visible'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>has</strong>(selector)</li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'li'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">has</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>not</strong>(selector)</li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'header'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/not"><span style="color: #000066;">not</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'section &gt; header'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>Selectors and filters provided by jQuery (which do not exist in css3 
selectors) do not benefit of the optimization of the DOM function 
querySelectorAll. So we may prefer using a normal selector then 
filtering the result with jQuery selectors.</p>
<p><br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'#header nav .submenu:visible'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// is slower than</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'#header nav .submenu'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/filter"><span style="color: #000066;">filter</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">':visible'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<h2>&nbsp;</h2>
<h2>Traversing</h2>
<p>jQuery offers useful methods to retrieve nodes from the DOM tree. We are going to see some of them now.</p>
<ul>
<li><span style="color: #000000;"><strong>children</strong>(selector)</span></li>
</ul>
<p>Selects the children (optionally filtered by a selector) of each element<br><span style="text-decoration: underline;">Examples</span>:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'div.content'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/children"><span style="color: #000066;">children</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'div.content'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/children"><span style="color: #000066;">children</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'p'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><span style="color: #000000;"><strong>parents</strong>(selector)</span></li>
</ul>
<p>Selects the parents (optionally filtered by a selector) of each element<br><span style="text-decoration: underline;">Examples</span>:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'li'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/parents"><span style="color: #000066;">parents</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a:visited'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/parents"><span style="color: #000066;">parents</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'li'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>each</strong>(callback);</li>
</ul>
<p>Executes the function callback for each element of the matched set. 
The function will be called with 2 arguments: index and element. The 
value of this is the current element (equals the parameter element).<br><span style="text-decoration: underline;">Example</span><strong>:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'li'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Core/each"><span style="color: #000066;">each</span></a><span style="color: #009900;">(</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span><a href="http://docs.jquery.com/Core/index"><span style="color: #000066;">index</span></a><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">// "this" is a DOM node: HTMLLIElement</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">style</span>.<span style="color: #660066;">borderLeft</span> <span style="color: #339933;">=</span> <span style="color: #3366cc;">'1px solid red'</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #003366; font-weight: bold;">var</span> <span style="color: #000066;">$</span>this <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">// "$this" is a jQuery object</span>
&nbsp; &nbsp; <span style="color: #000066;">$</span>this.<a href="http://docs.jquery.com/Attributes/text"><span style="color: #000066;">text</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'Item '</span> <span style="color: #339933;">+</span> <a href="http://docs.jquery.com/Core/index"><span style="color: #000066;">index</span></a><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>filter</strong>(selector)</li>
</ul>
<p>Filters the matched set of elements by selector. The argument can be a
 selector, a jQuery object, a DOM element or a function used as a test 
for each element.<br><span style="text-decoration: underline;">Examples</span><strong>:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('a').<a href="http://docs.jquery.com/Traversing/filter">filter</a>(':visited');
$('a').<a href="http://docs.jquery.com/Traversing/filter">filter</a>($links);
$('a').<a href="http://docs.jquery.com/Traversing/filter">filter</a>(links);
$('article').<a href="http://docs.jquery.com/Traversing/filter">filter</a>(function(<a href="http://docs.jquery.com/Core/index">index</a>) {
&nbsp; &nbsp; return $(this).<a href="http://docs.jquery.com/Attributes/hasClass">hasClass</a>('active');
});</pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>find</strong>(selector)</li>
</ul>
<p>Gets the descendant of the matched elements filtered by a selector. 
The argument can be a selector, a jQuery object or a DOM element.<br><span style="text-decoration: underline;">Examples</span><strong>:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'nav ul'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/find"><span style="color: #000066;">find</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'li.active'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #003366; font-weight: bold;">var</span> <span style="color: #000066;">$</span>activated <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'li.active'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'nav ul'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/find"><span style="color: #000066;">find</span></a><span style="color: #009900;">(</span><span style="color: #000066;">$</span>activated<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #003366; font-weight: bold;">var</span> activated <span style="color: #339933;">=</span> document.<span style="color: #660066;">querySelectorAll</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'li.active'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'nav ul'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/find"><span style="color: #000066;">find</span></a><span style="color: #009900;">(</span>activated<span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>end</strong>()</li>
</ul>
<p>Ends the last filtering operation and returns the previous matched 
set. This function may be often used while chaining operations.<br><span style="text-decoration: underline;">Examples<strong>:</strong></span></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/filter"><span style="color: #000066;">filter</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">':visited).css('</span>color<span style="color: #3366cc;">', '</span>red<span style="color: #3366cc;">').end().show();
// Only visited elements "a" will be colored red, but all elements "a" will be displayed.
$('</span>section<span style="color: #3366cc;">').find('</span>article.<span style="color: #000066;">open</span><span style="color: #3366cc;">').trigger('</span><span style="color: #000066;">close</span><span style="color: #3366cc;">').end().addClass('</span>reduced<span style="color: #3366cc;">');
$('</span>section<span style="color: #3366cc;">').find('</span>article.<span style="color: #000066;">open</span><span style="color: #3366cc;">').find('</span>.<span style="color: #660066;">content</span><span style="color: #3366cc;">').hide().end().addClass('</span>closed<span style="color: #3366cc;">').end().addClass('</span>reduced<span style="color: #3366cc;">');</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>is</strong>(selector)</li>
</ul>
<p>Returns true if at least one element of the matched set matches the 
argument "selector". Like the filter function, the argument can be a 
selector, a jQuery object, a DOM element or a function.<br><span style="text-decoration: underline;">Example</span><strong>:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'li'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Traversing/filter"><span style="color: #000066;">filter</span></a><span style="color: #009900;">(</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span><a href="http://docs.jquery.com/Core/index"><span style="color: #000066;">index</span></a><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #003366; font-weight: bold;">var</span> <span style="color: #000066;">$</span>this <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span><span style="color: #000066;">$</span>this.<span style="color: #000066; font-weight: bold;">is</span><span style="color: #009900;">(</span><span style="color: #3366cc;">':even'</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066;">$</span>this.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'background'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'#ccc'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>next</strong>([selector])</li>
</ul>
<p>Gets the immediately following sibling element for each element in 
the matched set. If an argument is given, the following element will be 
returned only if it matches the selector.<br><span style="text-decoration: underline;">Example<strong>:</strong></span></p>
<div class="rj_insertcode">
<div class="rj_insertcode_html5" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="html5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">&lt;<a href="http://december.com/html/4/element/section.html">section</a> id="main"&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/h2.html">h2</a>&gt;&lt;/<a href="http://december.com/html/4/element/h2.html">h2</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/p.html">p</a>&gt;&lt;/<a href="http://december.com/html/4/element/p.html">p</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/h3.html">h3</a>&gt;&lt;/<a href="http://december.com/html/4/element/h3.html">h3</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/p.html">p</a> class="open"&gt;&lt;/<a href="http://december.com/html/4/element/p.html">p</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/h3.html">h3</a>&gt;&lt;/<a href="http://december.com/html/4/element/h3.html">h3</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/p.html">p</a>&gt;&lt;/<a href="http://december.com/html/4/element/p.html">p</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/h2.html">h2</a>&gt;&lt;/<a href="http://december.com/html/4/element/h2.html">h2</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/p.html">p</a>&gt;&lt;/<a href="http://december.com/html/4/element/p.html">p</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/h3.html">h3</a>&gt;&lt;/<a href="http://december.com/html/4/element/h3.html">h3</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/p.html">p</a>&gt;&lt;/<a href="http://december.com/html/4/element/p.html">p</a>&gt;
&lt;/<a href="http://december.com/html/4/element/section.html">section</a>&gt;
&lt;<a href="http://december.com/html/4/element/script.html">script</a>&gt;
$('h3').next('.open').hide().removeClass('open');
&lt;/<a href="http://december.com/html/4/element/script.html">script</a>&gt;</pre>
</div>
</div>
</div>
<p></p>
<p>The DOM traversing tools that we described above give you a vision of
 what it is possible to do with jQuery. It exists more that you can 
study within the sections selectors and traversing of the jQuery API 
documentation.</p>
<p><strong>Exercises:</strong></p>
<p><a href="http://jsbin.com/EFuNAPe/3/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_005.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/EFuNAPe/2/edit?js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_002.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Modifying</h2>
<p>jQuery allows us to manipulate elements that we have matched with 
selectors. It also lets us create new elements and insert them into the 
document. First, we are going to see how we can manipulate the style of 
elements.</p>
<h3>Style</h3>
<p>You can work with classes by adding or removing them using to the following methods of the jQuery object:<br>element.<strong>addClass</strong>(className)
 lets us add one more space-separated classes to each elements of the 
matched set. The argument may be a string or a function which must 
return a className.<br>element.<strong>removeClass</strong>(className) removes one or more space-separated classes to each element. The argument can also be a function.<br>element.<strong>toggleClass</strong>(className) adds or removes classes.<br>element.<strong>hasClass</strong>(className) returns a boolean.</p>
<p><br><span style="text-decoration: underline;">Example</span>:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #339933;">&lt;</span>div <span style="color: #003366; font-weight: bold;">class</span><span style="color: #339933;">=</span><span style="color: #3366cc;">"span8"</span><span style="color: #339933;">&gt;&lt;/</span>div<span style="color: #339933;">&gt;</span>
<span style="color: #339933;">&lt;/</span>script<span style="color: #339933;">&gt;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'div.span8'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Attributes/removeClass"><span style="color: #000066;">removeClass</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'span8'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Attributes/addClass"><span style="color: #000066;">addClass</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'span4 mod'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// Produce: &lt;div class="span4 mod"&gt;</span>
<span style="color: #339933;">&lt;/</span>script<span style="color: #339933;">&gt;</span></pre>
</div>
</div>
</div>
<p></p>
<p>It is also possible to modify the inline style attribute of elements 
using to the method css. This method is used to get or set CSS values.</p>
<p><br><strong><span style="color: #000000;">Getting </span>css values</strong></p>
<ul>
<li>element.<strong>css</strong>(propertyName) returns the value of the css property named propertyName of the elements.</li>
<li>element.<strong>css</strong>(propertyNameArray) returns an object containing properties and their values.</li>
</ul>
<p>jQuery understands style properties in their ecmascript notation as 
well as in their css notation such as "background-color" and 
"backgroundColor". So you can use both without worrying about browser.</p>
<p><br><span style="text-decoration: underline;">Examples<strong>:</strong></span></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #003366; font-weight: bold;">var</span> linkColor <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'color'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #003366; font-weight: bold;">var</span> spacing <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'p'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span><span style="color: #009900;">[</span><span style="color: #3366cc;">'margin'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'padding'</span><span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #003366; font-weight: bold;">var</span> margin <span style="color: #339933;">=</span> spacing.<span style="color: #660066;">margin</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; padding <span style="color: #339933;">=</span> spacing.<span style="color: #660066;">padding</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>&nbsp;</p>
<p><strong>Setting CSS values</strong></p>
<ul>
<li>element.<strong>css</strong>(propertyName, value) accepts a string or integer value.</li>
<li>element.<strong>css</strong>(propertyName, callback) sets the value 
returned by the function callback to the CSS property propertyName. 
Callback receives two arguments: the index of the element in the matched
 set and the current value of the property.</li>
<li>element.<strong>css</strong>(properties), the argument properties is
 a JavaScript object containing key/value pairs where key are property 
names and value their future value.</li>
</ul>
<p><span style="text-decoration: underline;">Examples<strong>:</strong></span></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'background'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'#333'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'h1'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; &nbsp; fontSize<span style="color: #339933;">:</span> <span style="color: #3366cc;">'20px'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; <span style="color: #3366cc;">'line-height'</span><span style="color: #339933;">:</span> <span style="color: #3366cc;">'24px'</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'li'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'border-left'</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span><a href="http://docs.jquery.com/Core/index"><span style="color: #000066;">index</span></a><span style="color: #339933;">,</span> value<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #3366cc;">'5px solid #'</span> <span style="color: #339933;">+</span> <span style="color: #009900;">(</span><a href="http://docs.jquery.com/Core/index"><span style="color: #000066;">index</span></a> <span style="color: #339933;">%</span> <span style="color: #cc0000;">2</span> <span style="color: #339933;">===</span> <span style="color: #cc0000;">0</span> <span style="color: #339933;">?</span> <span style="color: #3366cc;">'fff'</span> <span style="color: #339933;">:</span> <span style="color: #3366cc;">'ddd'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p><br>jQuery recognizes relative values. They are string starting with "+=" or "-=".<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('article').<a href="http://docs.jquery.com/CSS/css">css</a>('top', '+=100');</pre>
</div>
</div>
</div>
<p></p>
<p><strong>Exercises:</strong></p>
<p><a href="http://jsbin.com/EnocEco/7/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_005.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/EnocEco/9/edit?js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_002.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p>&nbsp;<br>Some style properties have also their own methods such as width or height.<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #003366; font-weight: bold;">var</span> <span style="color: #000066;">$</span>ball <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'div.ball'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span>ball.<a href="http://docs.jquery.com/CSS/width"><span style="color: #000066;">width</span></a><span style="color: #009900;">(</span><span style="color: #cc0000;">100</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #003366; font-weight: bold;">var</span> ballInnerHeight <span style="color: #339933;">=</span> <span style="color: #000066;">$</span>ball.<a href="http://docs.jquery.com/CSS/innerHeight"><span style="color: #000066;">innerHeight</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// returns the height including padding</span>
<span style="color: #003366; font-weight: bold;">var</span> ballOuterHeight <span style="color: #339933;">=</span> <span style="color: #000066;">$</span>ball.<a href="http://docs.jquery.com/CSS/outerHeight"><span style="color: #000066;">outerHeight</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// returns the height including padding and border</span>
<span style="color: #003366; font-weight: bold;">var</span> ballTotalHeight <span style="color: #339933;">=</span> <span style="color: #000066;">$</span>ball.<a href="http://docs.jquery.com/CSS/outerHeight"><span style="color: #000066;">outerHeight</span></a><span style="color: #009900;">(</span><span style="color: #003366; font-weight: bold;">true</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// returns the height including padding, border and margin</span>
&nbsp;
<span style="color: #003366; font-weight: bold;">var</span> ballOffset <span style="color: #339933;">=</span> <span style="color: #000066;">$</span>ball.<a href="http://docs.jquery.com/CSS/offset"><span style="color: #000066;">offset</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// gets or sets the coordinate of the element relative to the document</span>
<span style="color: #003366; font-weight: bold;">var</span> left <span style="color: #339933;">=</span> ballOffset.<span style="color: #660066;">left</span><span style="color: #339933;">;</span>
<span style="color: #003366; font-weight: bold;">var</span> top <span style="color: #339933;">=</span> ballOffset.<span style="color: #660066;">top</span>
<span style="color: #000066;">$</span>ball.<a href="http://docs.jquery.com/CSS/offset"><span style="color: #000066;">offset</span></a><span style="color: #009900;">(</span><span style="color: #009900;">{</span> top<span style="color: #339933;">:</span> top<span style="color: #339933;">+</span><span style="color: #cc0000;">4</span><span style="color: #339933;">,</span> left<span style="color: #339933;">:</span> left<span style="color: #339933;">-</span><span style="color: #cc0000;">10</span> <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #003366; font-weight: bold;">var</span> ballPosition <span style="color: #339933;">=</span> <span style="color: #000066;">$</span>ball.<a href="http://docs.jquery.com/CSS/position"><span style="color: #000066;">position</span></a><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// gets the coordinates of the element relative to its parent.</span>
<span style="color: #003366; font-weight: bold;">var</span> x <span style="color: #339933;">=</span> ballPosition.<span style="color: #660066;">left</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>A good use of dimensions and positions is to improve accuracy; take a look at the diagram below to understand how they work:</p>
<p><img src="Week%204%20%20The%20jQuery%20library_files/jquery%2520dimensions%2520and%2520positions.jpg" alt="jQuery dimensions and positions" height="480" width="748"></p>
<h3>&nbsp;</h3>
<h3>DOM insertions</h3>
<p>Manipulating the DOM is a bit heavy with the standard DOM API. jQuery
 provides many methods to simplify DOM insertions and deletions.</p>
<p>First of all, creating elements is very fast - just give an HTML 
string to the jQuery function. The HTML string must start with a "&lt;" 
and end with a "&gt;".<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;div&gt;'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;div&gt;&lt;/div&gt;'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// equivalent</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;img /&gt;'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;img&gt;'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// equivalent</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;a href="#"&gt;link&lt;/a&gt;&lt;span&gt;desc&lt;/span&gt;'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>It is also possible to copy an element with the method clone.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('&lt;div&gt;').<a href="http://docs.jquery.com/Manipulation/clone">clone</a>();</pre>
</div>
</div>
</div>
<p></p>
<p>Once we have a jQuery object containing one or more DOM elements, 
they can be inserted into the document. If items have been created, they
 will be inserted. But if the elements were already in the document, 
they will be moved. To insert (or move an element), jQuery offers 
several convenient methods such as:</p>
<ul>
<li>parent.<strong>append</strong>(element) inserts the element at the end of each elements wrapped in the jQuery object "parent".</li>
<li>element.<strong>appendTo</strong>(parent) is equivalent but returns 
element. If you need to chain multiple methods, you can choose between 
this method or the previous one.</li>
<li>parent.<strong>prepend</strong>(element) inserts the element at the beginning of the elements parent.</li>
<li>element.<strong>prependTo</strong>(parent)</li>
<li>element.<strong>html</strong>([htmlString]) gets or sets the inner html of the elements within element.</li>
<li>element.<strong>text</strong>([string]) gets or sets the text value of each nodes within element.</li>
<li>element.<strong>after</strong>(content) inserts content just after each elements within element.</li>
<li>element.<strong>insertBefore</strong>(target) inserts the elements just before the elements target.</li>
<li>element.<strong>wrap</strong>(parent) wraps parent around each elements in the set of matched elements.</li>
<li>elements.<strong>wrapAll</strong>(parent) wraps parent around all elements.</li>
</ul>
<p><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'div.parent'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Manipulation/append"><span style="color: #000066;">append</span></a><span style="color: #009900;">(</span><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;p&gt;'</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// &lt;div class="parent"&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;h3&gt;'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/CSS/css"><span style="color: #000066;">css</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'color'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'blue'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Manipulation/prependTo"><span style="color: #000066;">prependTo</span></a><span style="color: #009900;">(</span><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'article'</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// &lt;article&gt;&lt;h3 style="color:blue"&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;/article&gt;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;h3&gt;'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Attributes/text"><span style="color: #000066;">text</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'Title of the paragraph'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// &lt;h3&gt;Title of the paragraph&lt;/h3&gt;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'ol li'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">unwrap</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Manipulation/wrapAll"><span style="color: #000066;">wrapAll</span></a><span style="color: #009900;">(</span><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;ul&gt;'</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// Replace &lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</span>
<span style="color: #006600; font-style: italic;">// With &lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</span></pre>
</div>
</div>
</div>
<p></p>
<p>To remove elements from the DOM:</p>
<ul>
<li>element.<strong>empty</strong>() removes all child elements of element</li>
<li>element.<strong>remove</strong>() removes element from the DOM</li>
<li>element.<strong>unwrap</strong>() removes the parent node of element</li>
<li>element.<strong>detach</strong>() removes element from the DOM keeping associated jQuery data</li>
</ul>
<p>Remember that each DOM manipulation is costly. Previously, we were 
talking about the DocumentFragment trick to append to the DOM&nbsp;many 
elements at once . With jQuery you can detach the parent element, append
 all child element, then re-attach the parent to the DOM with the method
 append.</p>
<p>Replacing elements:</p>
<ul>
<li>element.<strong>replaceAll</strong>(target) replaces each target with element</li>
<li>element.<strong>replaceWith</strong>(target) replaces element with target</li>
</ul>
<p><strong>Exercises:</strong></p>
<p><a href="http://jsbin.com/AWizana/2/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_005.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/AWizana/1/edit?js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_002.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Attributes, properties and data</h2>
<p>The method "attr()" of jQuery lets us get or set element attribute 
values. You can also remove an attribute with the method "removeAttr()"<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Attributes/attr"><span style="color: #000066;">attr</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'href'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'img'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Attributes/attr"><span style="color: #000066;">attr</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'src'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'no-avatar.jpg'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'a.disabled'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Attributes/removeAttr"><span style="color: #000066;">removeAttr</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'title'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>DOM nodes have attributes and also properties. Properties are not 
attributes, and accessing them through the method attr is a mistake. For
 example the property "checked" of a checkbox is different from its 
attribute of the same name. For those properties, jQuery provides the 
method "prop()".</p>
<p><br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'input[type=checkbox]'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">prop</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'checked'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// returns the current state of the checkbox as a boolean. If there are more than one checkbox, it returns the value of the first element</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'input[type=checkbox]'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Attributes/attr"><span style="color: #000066;">attr</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'checked'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// returns the initial state of the checkbox</span>
<span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'input[type=checkbox]'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">prop</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'checked'</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">true</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// sets the state of the matched checkboxes</span>
<span style="color: #000066;">$</span>button.<span style="color: #660066;">prop</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'disabled'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>You can also remove a property with the method "removeProp()", but definitively!!!</p>
<p>To set or get the value of form elements, jQuery offers the method 
"val()". This method permits to get the value of a multiple select 
element other than the property value of the DOM select element.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #339933;">&lt;</span>input type<span style="color: #339933;">=</span><span style="color: #3366cc;">"text"</span> <span style="color: #000066;">name</span><span style="color: #339933;">=</span><span style="color: #3366cc;">"firstName"</span> value<span style="color: #339933;">=</span><span style="color: #3366cc;">"John"</span> <span style="color: #339933;">/&gt;</span>
<span style="color: #339933;">&lt;</span>select<span style="color: #339933;">&gt;</span>
<span style="color: #339933;">&lt;</span>option value<span style="color: #339933;">=</span><span style="color: #3366cc;">"1"</span> selected<span style="color: #339933;">=</span><span style="color: #3366cc;">"selected"</span><span style="color: #339933;">&gt;</span>one<span style="color: #339933;">&lt;/</span>option<span style="color: #339933;">&gt;</span>
<span style="color: #339933;">&lt;</span>option value<span style="color: #339933;">=</span><span style="color: #3366cc;">"2"</span> selected<span style="color: #339933;">=</span><span style="color: #3366cc;">"selected"</span><span style="color: #339933;">&gt;</span>two<span style="color: #339933;">&lt;/</span>option<span style="color: #339933;">&gt;</span>
<span style="color: #339933;">&lt;</span>option value<span style="color: #339933;">=</span><span style="color: #3366cc;">"3"</span><span style="color: #339933;">&gt;</span>three<span style="color: #339933;">&lt;/</span>option<span style="color: #339933;">&gt;</span>
<span style="color: #339933;">&lt;/</span>select<span style="color: #339933;">&gt;</span>
<span style="color: #339933;">&lt;</span>script<span style="color: #339933;">&gt;</span>
<span style="color: #003366; font-weight: bold;">var</span> <span style="color: #000066;">$</span>firstName <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'input[name=firstName]'</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
<span style="color: #000066;">$</span>select <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'select'</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
<a href="http://docs.jquery.com/Events/select"><span style="color: #000066;">select</span></a> <span style="color: #339933;">=</span> <span style="color: #000066;">$</span>select<span style="color: #009900;">[</span><span style="color: #cc0000;">0</span><span style="color: #009900;">]</span>
<span style="color: #006600; font-style: italic;">// $firstName === 'John';</span>
<span style="color: #006600; font-style: italic;">// select.value === '1';</span>
<span style="color: #006600; font-style: italic;">// $select.val() === ['1', '2'];</span>
<span style="color: #339933;">&lt;/</span>script<span style="color: #339933;">&gt;</span></pre>
</div>
</div>
</div>
<p></p>
<p>Finally, it is possible to work with additional data attached to a 
node thanks to the method "data()". If you set data with the HTML5 
data-* attributes, jQuery permits to retrieve the value. If the value 
starts with "{" or "[" then jQuery parses the value as a JSON string 
before returning it.</p>
<p><br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #339933;">&lt;</span>video data<span style="color: #339933;">-</span>humans<span style="color: #339933;">=</span><span style="color: #3366cc;">"{ director: 'John', actors: ['Jenny', 'Rebecca'] }"</span><span style="color: #339933;">&gt;&lt;/</span>video<span style="color: #339933;">&gt;</span>
<span style="color: #339933;">&lt;</span>script<span style="color: #339933;">&gt;</span>
<span style="color: #003366; font-weight: bold;">var</span> humans <span style="color: #339933;">=</span> <span style="color: #000066;">$</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'video'</span><span style="color: #009900;">)</span>.<a href="http://docs.jquery.com/Core/data"><span style="color: #000066;">data</span></a><span style="color: #009900;">(</span><span style="color: #3366cc;">'humans'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// returns { producer: 'John', actors: ['Jenny', 'Rebecca'] }</span>
<span style="color: #003366; font-weight: bold;">var</span> heroe <span style="color: #339933;">=</span> humans.<span style="color: #660066;">actors</span><span style="color: #009900;">[</span><span style="color: #cc0000;">0</span><span style="color: #009900;">]</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// 'Jenny'</span>
<span style="color: #339933;">&lt;/</span>script<span style="color: #339933;">&gt;</span></pre>
</div>
</div>
</div>
<p></p>
<p>It is also possible to set data, but the corresponding attributes will not be created or updated.</p>
<p><br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var obj = { a: 1, b: 231 };
$('article').<a href="http://docs.jquery.com/Core/data">data</a>('count', obj);
$('article').<a href="http://docs.jquery.com/Attributes/attr">attr</a>('data-count'); // undefined</pre>
</div>
</div>
</div>
<p></p>
<p><strong>Exercises:</strong></p>
<p><a href="http://jsbin.com/OmijICE/4/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_005.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/OmijICE/3/edit?js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_002.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p></div><div class="book_chapter"><a name="ch1946"></a><h2 class="book_chapter_title">3 Events</h2><p>We
 have seen how jQuery simplifies DOM manipulation to maintain 
compatibility between browsers. It does better with events. For example,
 attaching or detaching an event handler is nothing more two methods: 
"on()" and "off()".</p>
<h2>Attaching and detaching event handlers</h2>
<h3>Attaching an event handler</h3>
<p>element.<strong>on</strong>( events [, selector ] [, data ], handler(eventObject) )</p>
<ul>
<li>events is a string containing events separated with a comma</li>
<li>selector is an optional argument that should contain a selector string (more information about this argument in the following)</li>
<li>data is an optional argument used to pass data to the event handler</li>
<li>handler is the function which will be called when the event occurs 
on the element. The event will be passed as an argument of the function</li>
</ul>
<p><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('button').on('click', function() {
&nbsp; &nbsp; window.alert($(this).<a href="http://docs.jquery.com/Attributes/text">text</a>() + ' clicked');
});
function logEvent(event) {
&nbsp; &nbsp; console.log(event);
}
$('table').on('mouseover', 'td', logEvent);</pre>
</div>
</div>
</div>
<p></p>
<p>You can also attach multiple event handlers to one element at once with the "on" method:<br>element.<strong>on</strong>( events [, selector ] [, data ] )</p>
<ul>
<li>events is an object containing key / value pairs where key is an event name and value its handler</li>
</ul>
<p><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('li').on({
&nbsp; &nbsp; <a href="http://docs.jquery.com/Events/mouseenter">mouseenter</a>: function() { $(this).<a href="http://docs.jquery.com/Traversing/find">find</a>('div').<a href="http://docs.jquery.com/Effects/show">show</a>(); },
&nbsp; &nbsp; <a href="http://docs.jquery.com/Events/mouseleave">mouseleave</a>: function() { $(this).<a href="http://docs.jquery.com/Traversing/find">find</a>('div').<a href="http://docs.jquery.com/Effects/hide">hide</a>(); }
});</pre>
</div>
</div>
</div>
<p></p>
<p>Within an event handler it is possible to stop propagation, stop immediate propagation, and prevent default action of the event.<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">event.stopPropagation(); // stops the bubbling phase of the event
event.preventDefault(); // cancels the default action
event.stopImmediatePropagation(); // cancels remaining attached handlers of the event on the current element</pre>
</div>
</div>
</div>
<p></p>
<p>jQuery provides a shorthand to stop the propagation of the event and 
prevent its default action. You only have to return false in the 
handler. It is also possible to replace the handler with the value 
false.<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('input[type=submit]').on('click', function() {
&nbsp; &nbsp; return false;
});
$('input[type=submit]').on('click', false); // equivalent
// Clicking on the submit button will not submit the form.</pre>
</div>
</div>
</div>
<p></p>
<p><strong>Exercises:</strong></p>
<p><a href="http://jsbin.com/OxOVubIs/2/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/OxOVubIs/3/edit?js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<h3>Removing an event handler</h3>
<p>element.<strong>off</strong>( events [, selector ] [, handler(eventObject) ] )</p>
<ul>
<li>the argument handler is optional. If you need to remove all attached handlers, just do not provide a handler in the call</li>
</ul>
<p><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('div').off('click'); // removes all click event handlers for each element div in the document
function pop() {
&nbsp; &nbsp; alert('button clicked');
}
$('button').on('click', pop);
$('button').off('click', pop); // removes only pop from the click event handlers of button elements</pre>
</div>
</div>
</div>
<p></p>
<p>As the "on" method, you can detach multiple handlers at once:<br>element.<strong>off</strong>( events [, selector] )<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('li').off({
&nbsp; &nbsp; 'mouseenter': false, // removes all mouseenter event handlers
&nbsp; &nbsp; 'mouseleave': <a href="http://docs.jquery.com/Effects/hide">hide</a> // removes the hide function from mouseleave event handlers
});</pre>
</div>
</div>
</div>
<p></p>
<h2>Firing events</h2>
<h3>Trigger</h3>
<p>To execute attached event handlers, you can manually fire the 
corresponding event on each matched element using to the following 
method:<br>element.<strong>trigger</strong>(event [, data] )</p>
<ul>
<li>event can be an event name or an jQuery Event object</li>
<li>data is an optional argument which lets us pass extra parameters to the handlers</li>
</ul>
<p><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('a').on('click', function(event, min, max) {
console.log(min, max);
return false; // prevents default handler and stops propagation of the event
});
$('a.open').<a href="http://docs.jquery.com/Events/trigger">trigger</a>('click', [10, 20]);
// log: 10, 20</pre>
</div>
</div>
</div>
<p></p>
<h3>Event object and customs</h3>
<p>jQuery provides its own Event object which normalizes the DOM event 
object according to the DOM standard. Some properties of the DOM event 
object are not consistent between browsers. jQuery normalizes those 
properties, such as: target, which, pageX.<br>Other properties depending on the type of the event are also copied from the original event object.</p>
<p><br>To create an Event object, just call its function as constructor:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var clickEvent = new <a href="http://docs.jquery.com/Core/jQuery">jQuery</a>.event('click');</pre>
</div>
</div>
</div>
<p></p>
<p>The new is optional, so the following is equivalent:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var clickEvent = <a href="http://docs.jquery.com/Core/jQuery">jQuery</a>.Event('click');</pre>
</div>
</div>
</div>
<p></p>
<p>You can set properties to the event while creating it:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var clickEvent = <a href="http://docs.jquery.com/Core/jQuery">jQuery</a>.Event('click', { pageX: 100, pageY: 124 });</pre>
</div>
</div>
</div>
<p></p>
<p>If you need extra data with your event object, just add it:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">clickEvent.min = 10;
clickEvent.max = 100;</pre>
</div>
</div>
</div>
<p></p>
<p>The event constructor accepts also a DOM Event object as first argument:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var clickEvent = <a href="http://docs.jquery.com/Core/jQuery">jQuery</a>.Event(new Event('click'));</pre>
</div>
</div>
</div>
<p></p>
<p>To create a custom event, you only have to give your special type to the constructor such as:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var myEvent = $.Event('myevent');</pre>
</div>
</div>
</div>
<p></p>
<p>Once you have an event you can call the method trigger which will execute the attached handlers.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('div').on('myevent', doSomething);
$('div').<a href="http://docs.jquery.com/Events/trigger">trigger</a>(myEvent);</pre>
</div>
</div>
</div>
<p></p>
<p>If you provide a string containing the name of you custom event to 
the trigger method, jQuery will create automatically the corresponding 
event.<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('div').<a href="http://docs.jquery.com/Events/trigger">trigger</a>('click');
$('div').<a href="http://docs.jquery.com/Events/trigger">trigger</a>('mycutomevent');
$('div').<a href="http://docs.jquery.com/Events/trigger">trigger</a>({
&nbsp; &nbsp; type: 'keyup',
&nbsp; &nbsp; mydata: 'mydata'
});</pre>
</div>
</div>
</div>
<p></p>
<p><strong>Exercises:</strong></p>
<p><a href="http://jsbin.com/eJArOxaV/3/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/eJArOxaV/5/edit?js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<h2>Shortcuts</h2>
<p>jQuery provides shortcuts for most used events such as click or 
submit. We are going to see some of them with examples and exercises.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('div').<a href="http://docs.jquery.com/Events/click">click</a>(doSomething) is a shortcut for $('div').on('click', doSomething)</pre>
</div>
</div>
</div>
<p></p>
<h3>Ready</h3>
<p>We have seen before that the DOM tree must be ready before we access 
its nodes. The ready event occurs when all the elements of the DOM tree 
are available. It does not wait for the loading of all resources such as
 images. Nevertheless, image data is not necessary to manipulate the DOM
 node.<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$(document).on('ready', init);
$(document).<a href="http://docs.jquery.com/Events/ready">ready</a>(init); // equivalent</pre>
</div>
</div>
</div>
<p></p>
<p>The shorter way to wait for the ready event is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$(init); // equivalent to $(document).ready(init);</pre>
</div>
</div>
</div>
<p></p>
<h3>Load</h3>
<p>This event occurs when an element and all its sub elements have been completely loaded.<br>The
 method "load()" is now deprecated because it is ambiguous with the ajax
 load. So, do not use the shortcut but the classic method.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('img').on('load', doSomething);</pre>
</div>
</div>
</div>
<p></p>
<p>Contrary to the ready event, the load event waits for all elements to
 be loaded. So, you can use it if you want to do something when all 
elements within the page have been loaded.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$(window).on('load', finishLoading);</pre>
</div>
</div>
</div>
<p></p>
<p>The following example illustrates the use cases of the ready and load events:</p>
<p><a href="http://jsbin.com/EPEdesA/3/edit?html,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_003.jpg" alt="try it" style="margin-left: 20px;" height="30" width="160"></a><br><br></p>
<h3>Mousedown</h3>
<p>The mousedown event occurs when the user clicks any mouse button. If 
you need different behavior for a right click and a left click, you can 
use the property <em>which</em> of the event object.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function leftClick() {
&nbsp; &nbsp; /* ... */
}
function middleClick() {
&nbsp; &nbsp; /* ... */
&nbsp; &nbsp; return false;
}
function rightClick(x, y) {
&nbsp; &nbsp; displayContextMenu(x, y);
&nbsp; &nbsp; return false;
}
$('a').<a href="http://docs.jquery.com/Events/mousedown">mousedown</a>(function(event) {
&nbsp; &nbsp; switch (event.which) {
&nbsp; &nbsp; &nbsp; &nbsp; case 2: return middleClick();
&nbsp; &nbsp; &nbsp; &nbsp; case 3: return rightClick(event.screenX, event.screenY);
&nbsp; &nbsp; &nbsp; &nbsp; case 4: return leftClick();
&nbsp; &nbsp; }
});</pre>
</div>
</div>
</div>
<p></p>
<h3>Change</h3>
<p>The <em>change</em> event occurs when the value of an element changes. Shortcuts can be executed to listen for an event or to fire an event.<br><strong>Examples:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('input[type=text]').<a href="http://docs.jquery.com/Events/change">change</a>(function() {
&nbsp; &nbsp; console.log('input changed');
});
$('input[type=text]').<a href="http://docs.jquery.com/Events/change">change</a>(); // logs 'input changed'</pre>
</div>
</div>
</div>
<p></p>
<h3>Keyup</h3>
<p>The <em>keyup</em> event occurs when the user releases a key on his or her keyboard.<br><strong>Example:</strong></p>
<p><a href="http://jsbin.com/iMAqUPO/1/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_003.jpg" alt="try it" style="margin-left: 20px;" height="30" width="160"></a></p>
<h3>Mouseover</h3>
<p>The event <em>mouseover</em> occurs when the cursor enters an element. Conversely, when it leaves the element, the event <em>mouseout</em> occurs. Those events are often used to create dropdown menus.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">&lt;ul&gt;
&nbsp; &nbsp; &lt;li&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &lt;a&gt;Products&lt;/a&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &lt;ul&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;li&gt;&lt;a&gt;Product 1&lt;/a&gt;&lt;/li&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;li&gt;&lt;a&gt;Product 2&lt;/a&gt;&lt;/li&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &lt;/ul&gt;
&nbsp; &nbsp; &lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
$(function() {
&nbsp; &nbsp; $('li').<a href="http://docs.jquery.com/Traversing/find">find</a>('ul')
&nbsp; &nbsp; &nbsp; &nbsp; .<a href="http://docs.jquery.com/Effects/hide">hide</a>()
&nbsp; &nbsp; &nbsp; &nbsp; .<a href="http://docs.jquery.com/Traversing/end">end</a>()
&nbsp; &nbsp; &nbsp; &nbsp; .<a href="http://docs.jquery.com/Events/mouseover">mouseover</a>(function() {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(this).<a href="http://docs.jquery.com/Traversing/find">find</a>('ul').<a href="http://docs.jquery.com/Effects/slideDown">slideDown</a>();
&nbsp; &nbsp; &nbsp; &nbsp; })
&nbsp; &nbsp; &nbsp; &nbsp; .<a href="http://docs.jquery.com/Events/mouseout">mouseout</a>(function() {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(this).<a href="http://docs.jquery.com/Traversing/find">find</a>('ul').<a href="http://docs.jquery.com/Effects/slideUp">slideUp</a>();
&nbsp; &nbsp; &nbsp; &nbsp; });
});
&lt;/script&gt;</pre>
</div>
</div>
</div>
<p></p>
<h3>Resize</h3>
<p>The <em>resize</em> event is sent to the window element (only) when 
the size of the browser window changes. This event can be used to modify
 the user interface when the browser width and height change. This event
 occurs for example when the device orientation changes.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$(function() {
&nbsp; &nbsp; var resizeGUI = function resizeGUI() {
&nbsp; &nbsp; &nbsp; &nbsp; // ...
&nbsp; &nbsp; };
&nbsp; &nbsp; $(window).<a href="http://docs.jquery.com/Events/resize">resize</a>(resizeGUI) // Attach handler
&nbsp; &nbsp; &nbsp; &nbsp; .<a href="http://docs.jquery.com/Events/resize">resize</a>(); // Trigger resize event
});</pre>
</div>
</div>
</div>
<p></p>
<h2>Namespacing</h2>
<p>One of the additions of jQuery events to the DOM regular events is 
namespacing. This addition simplifies the management of events when 
triggering an event or removing a handler.</p>
<p>To attach a handler to an event with a special namespace, you only 
have to add a namespace preceded by a point just after the event name.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$element.on('click.myPLugin', doSomething);</pre>
</div>
</div>
</div>
<p></p>
<p>Now if you remove the event handler like this:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$element.off('click.myPlugin');</pre>
</div>
</div>
</div>
<p></p>
<p>Only the handlers attached with the namespace "myPlugin" will be 
removed. So other handlers attached without or with another namespace 
will continue to work. This is useful if you need to remove a particular
 handler without keeping a reference to this function.</p>
<p><strong>Reminder:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$element.off('click', doSomething); // Will remove the function doSomething from the click event handlers list
$element.on('dragstart.removeable', function() { }); // The function is anonymous, you do not keep a reference to it.
// But you can use the namespace to remove this handler:
$element.off('dragstart.removeable');</pre>
</div>
</div>
</div>
<p></p>
<p>You can also trigger only an event in a particular namespace.<br><strong>Example:</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$elem.on('click', doSomething);
$elem.on('click.special', doSomethingSpecial);
$elem.<a href="http://docs.jquery.com/Events/trigger">trigger</a>('click.special'); // will execute doSomethingSpecial
$elem.<a href="http://docs.jquery.com/Events/trigger">trigger</a>('click'); // will execute both functions</pre>
</div>
</div>
</div>
<p></p>
<p>You can attach an event handler specifying multiple namespaces:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$element.on('sent.message.gift', doSomething);</pre>
</div>
</div>
</div>
<p></p>
<p>Now, you can remove this handler using the first <strong>or</strong> the second namespace:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$element.off('sent.message');
$element.off('sent.gift');</pre>
</div>
</div>
</div>
<p></p>
<p>Namespaces are not hierarchical, only one needs to match. So, just as
 with the off method, you can trigger the event with both namespaces:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_jquery" style="overflow: auto; width: 80%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="jquery" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$element.<a href="http://docs.jquery.com/Events/trigger">trigger</a>('sent.message');
$element.<a href="http://docs.jquery.com/Events/trigger">trigger</a>('sent.gift');</pre>
</div>
</div>
</div>
<p></p>
<p><strong>Exercises:</strong></p>
<p><a href="http://jsbin.com/aHiwifub/3/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/aHiwifub/4/edit?js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p></div><div class="book_chapter"><a name="ch1947"></a><h2 class="book_chapter_title">4 Animation</h2><h1><img src="Week%204%20%20The%20jQuery%20library_files/animationGif2.gif" alt="animation illustration gif" style="font-size: 14px; line-height: 20px;" height="226" width="500"></h1>
<h1></h1>
<h1>Introduction</h1>
<p><em>"The jQuery library provides several techniques for adding 
animation to a web page. These include simple, standard animations that 
are frequently used, and the ability to craft sophisticated custom 
effects."</em></p>
<p>API:&nbsp;<a href="http://api.jquery.com/category/effects/" target="_blank">http://api.jquery.com/category/effects/</a></p>
<p>Before starting this chapter: <strong>an important note</strong> about JavaScript animations performance.<br>In
 most cases: doing animations with CSS will almost always be 
faster&nbsp;and will consume lesser memory. The reason is that the CSS 
processor is written in C++ and native code executes very fast, whereas 
JavaScript is an interpreted language.</p>
<p>So most of the time, if it is possible: you should use css animation.
 Especially on mobile devices and when the animation is complicated or 
it is targeting a lot of DOM elements. But this is not always possible: 
CSS animations are limited. And the new CSS3 animation features (often 
the most interesting) &nbsp;work only on the latest browsers.&nbsp;</p>
<p>Finally, you have to keep in mind that animation with JavaScript are slower than CSS and can consume a lot of memory.&nbsp;<br><br><span style="text-decoration: underline;">See also:</span><a href="http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/" target="_blank"><br>http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/<br></a><a href="http://dev.opera.com/articles/view/css3-vs-jquery-animations/" target="_blank">http://dev.opera.com/articles/view/css3-vs-jquery-animations/</a></p>
<p>jQuery provides two ways to perform animations:&nbsp;<br>You can use 
the built-in effects: these are predefined (shorthand) animation 
methods. Or you can create custom animations with the powerful and 
complete $.animate() method.&nbsp;</p>
<p>&nbsp;</p>
<h1>Built-in effects</h1>
<p>These effects are the most commonly used effects, they are&nbsp;built
 into jQuery as methods. Methods that you can call on any HTML 
elements.&nbsp;</p>
<ul>
<li><strong>show</strong>():&nbsp;Show the selected elements.</li>
<li><strong>hide</strong>(): Hide the selected elements.</li>
<li><strong>toggle</strong>():&nbsp;Display or hide the selected elements.</li>
<li><strong>fadeIn</strong>(): Show&nbsp;the selected elements by animating&nbsp;their opacity to 100%;</li>
<li><strong>fadeOut</strong>():&nbsp;&nbsp;Hide the selected elements by animating their opacity to 0%;</li>
<li><strong>fadeToggle</strong>(): Display or hide the matched elements by animating their opacity.&nbsp;(available since jQuery version 1.4)&nbsp;</li>
<li><strong>slideDown</strong>():&nbsp;Display the selected elements with a&nbsp;downward sliding motion.</li>
<li><strong>slideUp</strong>():&nbsp;Hide the selected elements with a upward&nbsp;sliding motion.</li>
<li><strong>slideToggle</strong>(): Display or hide the selected elements with a sliding motion.
<article id="post-31" class="post-31 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-12"><header class="entry-header"></header></article>
</li>
</ul>
<p>Here a jsbin which presents all these effects:<br>(choose an element in the dropdown, then click on the wanted effect)<br><img src="Week%204%20%20The%20jQuery%20library_files/shortHand%2520effects.png" alt="buildin effect example" height="407" width="557"></p>
<p><br><a href="http://jsbin.com/otAtova/1/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a></p>
<p><br><strong>All these methods work the same way:&nbsp;</strong></p>
<p>You can call them:</p>
<ul>
<li>on any HTML element (div, p, img, button)</li>
<li>on one or multiple HTML elements.</li>
<li>without parameters</li>
</ul>
<p>They return the selected elements (chaining principle)</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">//effect applies on one HTML element with the id "myElem"</span>
<span style="color: #006600; font-style: italic;">//ex1</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#myElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeOut</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//ex2</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#myElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">show</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//effect applies on all the divs of the document</span>
<span style="color: #006600; font-style: italic;">//ex1</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">hide</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//ex2</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">slideUp</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;</pre>
</div>
</div>
</div>
<ul></ul>
<p>FadeToggle&nbsp;on multiple elements:</p>
<p><a href="http://jsbin.com/ENesOR/2/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a></p>
<p>&nbsp;</p>
<p>These methods can take zero, one or two parameters, and they have the same method signature:</p>
<p>.show(duration, callback)<br>.fadeIn(duration, callback)<br>.slideUp(duration, callback) &nbsp;...&nbsp;</p>
<p><strong>duration</strong> is a&nbsp;string or number determining how long the animation will run.<br><strong>callback</strong> is a function which is&nbsp;called once the animation is complete.</p>
<p>The cool thing about jQuery is that you can pass just the callback if you want:<br>.fadeIn( callback);<br>jQuery will check whether the parameter is a function: if yes, then it sets duration to the default value.&nbsp;</p>
<p>&nbsp;</p>
<ul>
<li>
<h2><strong>Duration</strong></h2>
</li>
</ul>
<p>You can specify the duration of built-in effects, in one of two ways:</p>
<p><strong>1) Specify the time (ms) with a number</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('#myDiv').fadeOut(1000); 
$('p').fadeToggle(60); 
$('.block section').show(2500);</pre>
</div>
</div>
</div>
<p><br><a href="http://jsbin.com/ENesOR/10/edit?html,css,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a><br><strong>&nbsp;</strong></p>
<p><strong>2) Specify the time to a predefined speed (string):</strong></p>
<p>jQuery provides predefined speeds&nbsp;as string: there are 'slow', and 'fast' and the default value.&nbsp;<br>The predefined speeds:<br>'slow' = 600 (ms)<br>'fast' = 200 (ms)<br>default = 400 (ms) (default is applied when no duration parameter is specified)&nbsp;</p>
<p><strong>Example:&nbsp;</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'slow'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//is equivalent to</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span><span style="color: #cc0000;">600</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'fast'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//is equivalent to</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span><span style="color: #cc0000;">200</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//is equivalent to</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span><span style="color: #cc0000;">400</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;</pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>These predefined speeds are&nbsp;specified in the following object: $.fx.speeds</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">fx</span>.<span style="color: #660066;">speeds</span><span style="color: #339933;">;</span> 
<span style="color: #006600; font-style: italic;">//Object {slow: 600, fast: 200, _default: 400}</span></pre>
</div>
</div>
</div>
<p><br>It can be interesting and useful to override or modify this 
object to add some&nbsp;predefined custom speeds or to modify the 
default values:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">//add a new custom speed</span>
$.<span style="color: #660066;">fx</span>.<span style="color: #660066;">speeds</span>.<span style="color: #660066;">superFast</span><span style="color: #339933;">=</span> <span style="color: #cc0000;">50</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//then </span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeOut</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'superFast'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp;
<span style="color: #006600; font-style: italic;">//change the slow value:</span>
$.<span style="color: #660066;">fx</span>.<span style="color: #660066;">speeds</span>.<span style="color: #660066;">slow</span><span style="color: #339933;">=</span> <span style="color: #cc0000;">1000</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p><strong>Special cases of show and hide:&nbsp;</strong></p>
<p>As you may have noticed, when you call show or hide without parameter
 there is no animation: the default speed is 0. Anyway, if you specify a
 duration &gt;0 there will be an animation: the selected elements will 
be displayed or hidden with a sliding motion from the bottom 
right&nbsp;corner to the top left corner.&nbsp;</p>
<p></p>
<ul>
<li>
<h2><strong><strong>Callback</strong></strong></h2>
</li>
</ul>
<p>It can be really useful to do something&nbsp;after an animation completes - this is the role of the callback.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#myDiv'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeOut</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'slow'</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; alert<span style="color: #009900;">(</span><span style="color: #3366cc;">'animation done!'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//duration is not necessarily required</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#myDiv'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeOut</span><span style="color: #009900;">(</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; alert<span style="color: #009900;">(</span><span style="color: #3366cc;">'animation done!'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//Of course you define the callback elsewhere</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#myDiv'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeOut</span><span style="color: #009900;">(</span> sayDone <span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">function</span> sayDone<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; alert<span style="color: #009900;">(</span><span style="color: #3366cc;">'animation done!'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p></p>
<p>Inside the callback function, "this"&nbsp;refers to the raw DOM 
element&nbsp;being animated. Just like with any jQuery callback, we can 
turn it into a jQuery object with the dollar sign : &nbsp;$(this);</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">//ex1: fadeOut then remove from DOM </span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#myDiv p'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeOut</span><span style="color: #009900;">(</span> <span style="color: #cc0000;">1000</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; $<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">remove</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//ex2: fadeIn then change color</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#anotherDiv p'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span> <span style="color: #cc0000;">1000</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; $<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'background'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'red'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p><strong>Exercice<br></strong>On click on the start button :&nbsp;<strong>fadeIn</strong> the &lt;p&gt; element, then <strong>turn it to red.&nbsp;<br></strong>On click on the reset button :<strong>&nbsp;&nbsp;</strong>reset the &lt;p&gt; element (hide and white) (use .css method)&nbsp;<br><br><a href="http://jsbin.com/AJuNuz/6/">Live example&nbsp;</a><br>You can start from this Jsbin:<br><a href="http://jsbin.com/AJuNuz/7/edit?html,js,console,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a><br><br><a href="http://jsbin.com/AJuNuz/6/edit?html,js,console,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_004.jpg" alt="solution" height="30" width="160"></a><br><br></p>
<p>&nbsp;</p>
<h2>Chaining the effects:&nbsp;</h2>
<p>As previously&nbsp;noted, on these shorthand methods jQuery returns the selected elements.&nbsp;</p>
<p><em>"A common mistake when implementing jQuery effects is assuming 
that the execution of the next method in your chain will wait until the 
animation runs to completion."&nbsp;&nbsp;</em></p>
<p>To simplify: jQuery initializes the animation then immediately returns the matched elements, example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#myDiv'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span><span style="color: #cc0000;">1000</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'background'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'red'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p><br><strong>The common mistake :</strong><a href="http://jsbin.com/AJuNuz/10/edit?html,js,output" target="_blank">&nbsp;http://jsbin.com/AJuNuz/10/edit?html,js,output<strong><br></strong></a><br>Here,
 jQuery initializes the fadeIn animation then return $('#myDiv') , it 
doesn't wait the end of the fadeIn and call the css method. Result, your
 div (or text) is red before the end of the fadeIn effect.<br>This is why, we can pass a callback as parameter, like we saw just before.</p>
<p>Nevertheless, it is possible to chain shortHand effect:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#myDiv'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeIn</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #660066;">fadeOut</span><span style="color: #009900;">(</span><span style="color: #cc0000;">500</span><span style="color: #009900;">)</span></pre>
</div>
</div>
</div>
<p><br><a href="http://jsbin.com/AJuNuz/10/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a><br>Here, the fadeOut will be applied once the fadeIn effect is complete. Be careful, this doesn't works with show or hide.</p>
<p>&nbsp;</p>
<h2>Managing animations</h2>
<p><strong>.delay(duration):&nbsp;</strong>Set a timer to delay execution of subsequent items in the queue.<a href="http://api.jquery.com/delay/" target="_blank">http://api.jquery.com/delay</a></p>
<p>delay&nbsp;is used to introduce a delay between successive animations. Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$('#myDiv').fadeOut().delay(500).slideDown(500)</pre>
</div>
</div>
</div>
<p><br><a href="http://jsbin.com/IfUMede/3/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a></p>
<p><strong><br>.stop(duration):&nbsp;</strong>Stop the currently-running animation on the matched elements.<br><a href="http://jsbin.com/IfUMede/4/edit?html,js,output" target="_blank"></a></p>
<p>An example with slideToggle, (click repeatedly&nbsp;time on the button)<br><a href="http://jsbin.com/IfUMede/4/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a></p>
<p></p>
<p>On one of the previous <a href="http://jsbin.com/AJuNuz/1" target="_blank">example/exercice</a>, .stop can be useful. In this example:<br><a href="http://jsbin.com/IfUMede/1/edit"><br></a>is
 you click on "try it" button then quickly click 'reset': the next time 
you click on 'try it' the text will be red instead of white. This is due
 to the fact we never stopped the animation!&nbsp;</p>
<p>So before changing anything when we click on "reset", we must stop the animation like this:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$lorem.<span style="color: #660066;">stop</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>color<span style="color: #339933;">:</span> <span style="color: #3366cc;">'#fff'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;opacity<span style="color: #339933;">:</span> <span style="color: #cc0000;">0</span> <span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;display<span style="color: #339933;">:</span> <span style="color: #3366cc;">'none'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> </pre>
</div>
</div>
</div>
<p><a href="http://jsbin.com/AJuNuz/4/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a></p>
<p></p>
<p></p>
<h1>Custom effects with $.animate()</h1>
<p></p>
<p>The built-in methods are&nbsp;convenient and easy to use, but we can 
do more complex and custom animations. Effectively,&nbsp;jQuery provides
 an animate() function which is a very powerful API to manipulate html 
elements and create custom animations of many CSS properties !&nbsp;</p>
<p>First lets check the API:&nbsp;<a href="http://api.jquery.com/animate/" target="_blank">http://api.jquery.com/animate/</a><br><br>Now, lets check the basic syntax:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">animate<span style="color: #009900;">(</span>properties<span style="color: #339933;">,</span> <span style="color: #009900;">[</span> duration <span style="color: #009900;">]</span><span style="color: #339933;">,</span> <span style="color: #009900;">[</span> callback <span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>Properties</strong>: An object of CSS properties and values that the animation will move toward.</li>
<li><strong>Duration:</strong>&nbsp;A string representing a predefined speed ('fast', 'slow') or a number<strong>&nbsp;</strong>corresponding to the duration of the animation, in milliseconds.(default: 400)</li>
<li><strong>Callback:</strong>&nbsp;A function which is&nbsp;called once the animation is complete.</li>
</ul>
<p></p>
<p>Simple example: change the width of a HTML elem:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'HTMLElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>width<span style="color: #339933;">:</span> <span style="color: #3366cc;">'100px'</span><span style="color: #009900;">}</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #cc0000;">1000</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'DONE!'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p><a href="http://jsbin.com/IfUMede/8/edit?html,js,console,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a></p>
<p></p>
<p><strong>Note about animating CSS properties:</strong></p>
<ul>
<li><em>"Most properties that are non-numeric cannot be animated using basic jQuery functionality"</em><br>For
 example: you cannot animate the color or the background CSS properties.
 If you want to achieve this, you have to use jQueryUI or jQuery color: 
we will talk about these libraries at the end of the chapter.</li>
</ul>
<p></p>
<ul>
<li>In addition to numeric values, jQuery provides a shortcut value for 
CSS properties: these values are 'show', 'hide', toggle', example:</li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'p'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>fontSize<span style="color: #339933;">:</span><span style="color: #3366cc;">'toggle'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'p'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>opacity<span style="color: #339933;">:</span><span style="color: #3366cc;">'hide'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>height<span style="color: #339933;">:</span><span style="color: #3366cc;">'show'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li>Animated properties can also be relative: you&nbsp;can animate to a 
specified final value, or it can increment an existing value:&nbsp;<br>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">//specified final value: 100px</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'HTMLElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>width<span style="color: #339933;">:</span> <span style="color: #3366cc;">'100px'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//increment an existing value.</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'HTMLElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>width<span style="color: #339933;">:</span> <span style="color: #3366cc;">'+=100px'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//specified a value with % </span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'HTMLElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>width<span style="color: #339933;">:</span> <span style="color: #3366cc;">'10%'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
</li>
<li>Just as with the .css() method of jQuery you, if you do not quote 
the property name, you have to use camel case&nbsp;version of it.<br>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'HTMLElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>fontSize<span style="color: #339933;">:</span> 24px<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//or</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'HTMLElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span><span style="color: #3366cc;">'font-size'</span><span style="color: #339933;">:</span> 24px<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
</li>
<li>Of course, you can animate multiple CSS properties at once:<br>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'HTMLElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>width<span style="color: #339933;">:</span> <span style="color: #3366cc;">'-=50%'</span><span style="color: #339933;">,</span> height<span style="color: #339933;">:</span> <span style="color: #3366cc;">'-=50px'</span><span style="color: #339933;">,</span>fontSize<span style="color: #339933;">:</span> <span style="color: #3366cc;">'-=1em'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
</li>
</ul>
<p></p>
<p><strong>Exercice</strong>: moving a div with button or click<br><br>From this jsbin:&nbsp;<br><a href="http://jsbin.com/OCAgOKu/5/edit?html,css,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a></p>
<p><br>Add the following possibility by completing the click handler : <br>1) when you click on the gray div, the blue block moves at this point and it grows .<br>2) And [advanced] once the block has moved, a text inside the block appears and disappears with&nbsp;fadeOut</p>
<p>The desired result:&nbsp;<a href="http://jsbin.com/OCAgOKu/6/" target="_blank">http://jsbin.com/OCAgOKu/6/</a></p>
<p>Solution:<br><a href="http://jsbin.com/OCAgOKu/6/edit?html,css,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_004.jpg" alt="solution" height="30" width="160"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><strong>Infinite animation:</strong></h2>
<p>To perform more complex and more impressive animations: you can combine animate() with the setInterval method.&nbsp;<br>With these two methods, you can obtain infinite animations.&nbsp;</p>
<p><strong>Reminder</strong>:<br>setInterval( function, daly);<br>window.setInterval method calls a function at specified intervals (delay in ms)<br><br>Infinite animation example:<br><a href="http://jsbin.com/unUhEsIK/1/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit.jpg" height="30" width="160"></a></p>
<p></p>
<p>&nbsp;</p>
<p>Some other cool and complete examples:&nbsp;</p>
<p><a href="http://adrianpelletier.com/sandbox/jquery_hover_nav/">http://adrianpelletier.com/sandbox/jquery_hover_nav/<br></a><a href="http://www.queness.com/resources/html/slicing/index.html">http://www.queness.com/resources/html/slicing/index.html</a><a href="http://adrianpelletier.com/sandbox/jquery_hover_nav/"><br></a><a href="http://demo.tutorialzine.com/2010/08/animated-404-not-found-page-css-jquery/404.html">http://demo.tutorialzine.com/2010/08/animated-404-not-found-page-css-jquery/404.html</a><a href="http://adrianpelletier.com/sandbox/jquery_hover_nav/"></a></p>
<p>&nbsp;</p>
<div class="translation-layout-wrap">
<div id="trVisibleScroll">
<div id="trEntireScroll">
<h2 class="translation-layout"><strong>Disable animations:</strong></h2>
</div>
</div>
</div>
<p>All jQuery effects, including .animate(),<strong> can be turned off globally</strong>
 by setting $.fx.off = true, which effectively sets the duration to 
0.&nbsp;This can be interesting to use this code on mobile device, 
because jQuery animations can be slow when they run on mobile.</p>
<p></p>
<div style="background: #dedede;">
<h2><strong>Note about the built-in effects:&nbsp;</strong></h2>
<p><a href="http://code.jquery.com/jquery-1.10.2.js" target="_blank">Check out the jQuery code: </a>(search slideDown for example) around line 9435:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">// Generate shortcuts for custom animations</span>
jQuery.<span style="color: #660066;">each</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; &nbsp; slideDown<span style="color: #339933;">:</span> genFx<span style="color: #009900;">(</span><span style="color: #3366cc;">"show"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; slideUp<span style="color: #339933;">:</span> genFx<span style="color: #009900;">(</span><span style="color: #3366cc;">"hide"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; slideToggle<span style="color: #339933;">:</span> genFx<span style="color: #009900;">(</span><span style="color: #3366cc;">"toggle"</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; fadeIn<span style="color: #339933;">:</span> <span style="color: #009900;">{</span> opacity<span style="color: #339933;">:</span> <span style="color: #3366cc;">"show"</span> <span style="color: #009900;">}</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; fadeOut<span style="color: #339933;">:</span> <span style="color: #009900;">{</span> opacity<span style="color: #339933;">:</span> <span style="color: #3366cc;">"hide"</span> <span style="color: #009900;">}</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; fadeToggle<span style="color: #339933;">:</span> <span style="color: #009900;">{</span> opacity<span style="color: #339933;">:</span> <span style="color: #3366cc;">"toggle"</span> <span style="color: #009900;">}</span>
<span style="color: #009900;">}</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span> name<span style="color: #339933;">,</span> props <span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; jQuery.<span style="color: #660066;">fn</span><span style="color: #009900;">[</span> name <span style="color: #009900;">]</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span> speed<span style="color: #339933;">,</span> easing<span style="color: #339933;">,</span> callback <span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">animate</span><span style="color: #009900;">(</span> props<span style="color: #339933;">,</span> speed<span style="color: #339933;">,</span> easing<span style="color: #339933;">,</span> callback <span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>For each built-in effect, jQuery returns this.animate! fadeIn, fadeOut, slideUp and so on are just shorthand methods!&nbsp;</p>
</div>
<p></p>
<p>&nbsp;</p>
<h1><strong>To go further with animations&nbsp;</strong></h1>
<p>With&nbsp;<a href="http://jqueryui.com/" target="_blank">jQueryUI</a>, you have&nbsp;a library which extends jQuery with some extra features and effects (note: it includes jQuery).</p>
<p><em>"jQuery UI is a curated set of user interface interactions, 
effects, widgets, and themes built on top of the jQuery JavaScript 
Library. "<br></em><a href="http://jqueryui.com/effect/" target="_blank">Demo page.</a></p>
<p>If you just want add some animation on CSS background color: there are <a href="http://blog.jquery.com/2012/08/24/jquery-color-2-1-0/" target="_blank">jQuery Color</a>. (include in jQueryUI)&nbsp;</p>
<p>Another jQuery light plugin to add shadow animation:&nbsp;<a href="http://www.bitstorm.org/jquery/shadow-animation/" target="_blank">http://www.bitstorm.org/jquery/shadow-animation/</a></p>
<p></p>
<p></p></div><div class="book_chapter"><a name="ch1948"></a><h2 class="book_chapter_title">5 AJAX</h2><h1>Introduction</h1>
<h3>Reminder:&nbsp;</h3>
<p><strong>AJAX</strong> =&nbsp;&nbsp;<strong>Asynchronous&nbsp;J</strong>avascript&nbsp;<strong>A</strong>nd&nbsp;<strong>X</strong>ML</p>
<p>The keywords are: Asynchronous&nbsp;Javascript and XML:</p>
<p><strong>XML</strong> because&nbsp;XML has been the most popular 
format for response for a long time. But now XML is&nbsp;completely 
outdated by JSON. Maybe AJAX should be renamed to AJAJ, but that sounds 
stupid. So now we continue to use the term "AJAX" but it is used without
 regard to the format of the data returned by the asynchronous 
request!&nbsp;<br><strong>Asynchronous</strong> is&nbsp;loading data from the server without a browser page refresh.</p>
<p>&nbsp;</p>
<h3 class="threadtitle">Advantages of using an AJAX Library&nbsp;</h3>
<p>Nowadays, most developers do not instantiate XmlHttpRequest objects 
(like we saw in the last chapter) and they use an AJAX library.&nbsp;</p>
<p>There are a lot of&nbsp;libraries/frameworks which provide a high level interface for AJAX: <br>Dojo,&nbsp;jQuery,&nbsp;MooTools, Prototype - just to name&nbsp;a few.&nbsp;</p>
<p>Here, we will see how to do AJAX with jQuery.&nbsp;</p>
<p><strong>Why use jQuery or one of these libraries instead of using the XmlHttpRequest object directly?&nbsp;</strong></p>
<p>As we saw before, using&nbsp;XmlHttpRequest is not quite simple 
(especially&nbsp;the configuration) or necessarily instinctive. And 
above all, you have to check the compatibility of the browsers and 
sometimes there are some differences.&nbsp;XmlHttpRequest is low level, 
these libraries provide interfaces and methods at a higher level.&nbsp;</p>
<p>&nbsp;The advantages of using AJAX libraries:&nbsp;</p>
<ul>
<li>These libraries provide many wrapper functions (like jQuery AJAX) 
which simplify the creation of the request, headers, content and request
 callback declaration.</li>
<li>You write less for the same (or better) result.</li>
<li>The API documentation is well documented, complete, and explanatory.&nbsp;</li>
<li>They provide a cross browser compatible version of an XHR method</li>
<li>They fix and wrap known inconsistencies between the different browsers.</li>
<li>They can provide extra features.</li>
<li>A large&nbsp;community uses these&nbsp;libraries&nbsp;and provides examples, tutorials and helps.</li>
</ul>
<p></p>
<p>Do AJAX with a library and you will save a lot of time and your code 
will probably be more readable. But understanding the background (the 
XMLHttpRequest object), how these libraries work and what they do is 
really important and fundamental to becoming a better developer.</p>
<p>&nbsp;</p>
<h1>jQuery</h1>
<p>&nbsp;</p>
<p>In the last part of the chapter "JavaScript in the browser", we built a function <em>getXMLHttpRequest </em>which
 checks if the version of the browser supports XMLHttpRequest; if not, 
we use ActiveXObject and finally return an instance of XMLHttpRequest 
(or ActiveXObject).&nbsp;</p>
<p>Good news, jQuery does all that for us!&nbsp;</p>
<p>Take a look at the jQuery<a href="http://code.jquery.com/jquery-1.10.2.js" target="_blank">&nbsp;code source</a>,
 it's not impossible to understand, it's well commented. If you go to 
the Ajax section (around the line 8607): search on the word 
"XMLHttpRequest" and you will see this :&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">// Functions to create xhrs</span>
<span style="color: #000066; font-weight: bold;">function</span> createStandardXHR<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">try</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">new</span> window.<span style="color: #660066;">XMLHttpRequest</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span> <span style="color: #000066; font-weight: bold;">catch</span><span style="color: #009900;">(</span> e <span style="color: #009900;">)</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span>
<span style="color: #009900;">}</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">function</span> createActiveXHR<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">try</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">new</span> window.<span style="color: #660066;">ActiveXObject</span><span style="color: #009900;">(</span><span style="color: #3366cc;">"Microsoft.XMLHTTP"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span> <span style="color: #000066; font-weight: bold;">catch</span><span style="color: #009900;">(</span> e <span style="color: #009900;">)</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span>
<span style="color: #009900;">}</span>
&nbsp;
Query.<span style="color: #660066;">ajaxSettings</span>.<span style="color: #660066;">xhr</span> <span style="color: #339933;">=</span> window.<span style="color: #660066;">ActiveXObject</span> <span style="color: #339933;">?</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">/* Microsoft failed to properly
&nbsp; &nbsp; &nbsp;* implement the XMLHttpRequest in IE7 (can't request local files),
&nbsp; &nbsp; &nbsp;* so we use the ActiveXObject when it is available
&nbsp; &nbsp; &nbsp;* Additionally XMLHttpRequest can be disabled in IE7/IE8 so
&nbsp; &nbsp; &nbsp;* we need a fallback.
&nbsp; &nbsp; &nbsp;*/</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #339933;">!</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">isLocal</span> <span style="color: #339933;">&amp;&amp;</span> createStandardXHR<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #339933;">||</span> createActiveXHR<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span> <span style="color: #339933;">:</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">// For all other browsers, use the standard XMLHttpRequest object</span>
&nbsp; &nbsp; createStandardXHR<span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//... </span></pre>
</div>
</div>
</div>
<p></p>
<p><strong>So, the points are:</strong> <br>jQuery does the "dirty" job for you, jQuery is not magic!&nbsp;<br>Behind the scene jQuery uses XMLHttpRequest to do AJAX.<br>jQuery provides Ajax support that abstracts away painful browser differences</p>
<p></p>
<h2>jQuery Ajax API&nbsp;</h2>
<p>The API:<br><a href="http://api.jquery.com/category/ajax/">http://api.jquery.com/category/ajax/<br></a></p>
<p><em>"The jQuery library has a full suite of AJAX capabilities":</em><a href="http://api.jquery.com/category/ajax/"><br></a></p>
<p>jQuery&nbsp;offers both a full-featured<strong> $.ajax()</strong>&nbsp;method, and simple convenience methods called "Shorthand methods" such as&nbsp;<strong>&nbsp;$.get()</strong>,<strong>$.getScript()</strong>, <strong>$.getJSON()</strong>, <strong>$.post()</strong>, and <strong>$().load()</strong>.</p>
<p>In the first part, we will start with the complete method<strong> jQuery.ajax(), </strong>then in the second part we will have a look at the "shorthand methods".&nbsp;<strong>&nbsp;</strong></p>
<p>&nbsp;</p>
<h2><strong>jQuery.ajax()</strong></h2>
<p><strong></strong>Api:<br><a href="http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.ajax/</a></p>
<p>The jquery.ajax() or $.ajax method can have several parameters (in a JSON object). <br>The syntax is as follows:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">// url and parameters here</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">/*or */</span>
&nbsp;
$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span>url<span style="color: #339933;">,</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">//parameters here</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>The url&nbsp;option is the only required parameter of the $.ajax(); 
all other parameters are optional.&nbsp;The main and the most useful 
parameters are:</p>
<ul>
<li><strong>url:</strong>&nbsp;<strong>&nbsp;</strong>[string]&nbsp;The URL: required&nbsp;</li>
<li><strong>type: &nbsp;</strong>[string] The HTTP method: GET, POST ...&nbsp;</li>
<li><strong>data</strong>: [string or plainObject] The data to send (can be&nbsp;omit&nbsp;if you don't have to send data)&nbsp;</li>
<li><strong>dataType:&nbsp;</strong>&nbsp;[string]<strong>&nbsp;</strong>the type of data we expect back ('json', 'xml', 'html', 'text' ... )&nbsp;</li>
<li><strong>success: </strong>&nbsp;[function] The code to run if the request succeeds (callback)&nbsp;</li>
<li><strong>error:&nbsp;&nbsp;</strong>[function]The code to run if the request fails (callback)&nbsp;</li>
</ul>
<p>We pass these parameters in a JSON, example:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; type<span style="color: #339933;">:</span> <span style="color: #3366cc;">'GET'</span><span style="color: #339933;">,</span> 
&nbsp; url<span style="color: #339933;">:</span> <span style="color: #3366cc;">'url'</span><span style="color: #339933;">,</span>
&nbsp; data<span style="color: #339933;">:</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; id<span style="color: #339933;">:</span> <span style="color: #cc0000;">11</span>
&nbsp; <span style="color: #009900;">}</span><span style="color: #339933;">,</span>
&nbsp; dataType<span style="color: #339933;">:</span> <span style="color: #3366cc;">'json'</span><span style="color: #339933;">,</span>
&nbsp; success<span style="color: #339933;">:</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>data<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">//request succeeds; </span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">//data contains the response </span>
&nbsp; &nbsp; console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span>data<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; <span style="color: #009900;">}</span><span style="color: #339933;">,</span>
&nbsp; error<span style="color: #339933;">:</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>xhr<span style="color: #339933;">,</span> status <span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">// request fails; the raw request and</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">// status codes are passed to the function</span>
&nbsp; &nbsp; alert<span style="color: #009900;">(</span><span style="color: #3366cc;">'error'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp; <span style="color: #009900;">}</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>You may have noticed that&nbsp;we do not need to worry about the readyState value!</p>
<p>And, in case of GET request, usually we pass data like this:&nbsp;<br><strong>url</strong>?<strong>params1</strong>=user10&amp;<strong>params2</strong>=red,&amp;<strong>params3</strong>=1980.<br>With jQuery, you still can do that, but it is more readable if you use this way:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">data<span style="color: #339933;">:</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;params1<span style="color: #339933;">:</span> <span style="color: #3366cc;">'user10'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp;params2<span style="color: #339933;">:</span> <span style="color: #3366cc;">'red'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp;params3<span style="color: #339933;">:</span> <span style="color: #cc0000;">1980</span>
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p><br>Of course behind the scene, jQuery will transform the data object&nbsp;into the conventional form:<br><strong>url</strong>?<strong>params1</strong>=user10&amp;<strong>params2</strong>=red,&amp;<strong>params3</strong>=1980.&nbsp;</p>
<p></p>
<p><strong>Other parameters/options:</strong></p>
<p>There are a lot of options for $.ajax - as we said before, ajax is a powerful and complete method. Here:&nbsp;<a href="http://api.jquery.com/jQuery.ajax/" target="_blank">http://api.jquery.com/jQuery.ajax</a>&nbsp;is a complete list of options.&nbsp;<strong><br></strong></p>
<p>Let's see some of them which are used frequently:</p>
<ul>
<li><strong>async</strong>: [boolean] Default is true - set to false and the request will be performed&nbsp;synchronously.</li>
<li><strong>cache</strong>:&nbsp;[boolean] Default is true.&nbsp;Whether to use a cached response if available.&nbsp;</li>
<li><strong>complete</strong>: [function] It's a callback which is called when the request is complete,regardless&nbsp;&nbsp;of success or failure</li>
<li>
<p><strong>context</strong>: The scope in which the callback function(s) should run (i.e. what this&nbsp;will mean inside the callback function(s)).</p>
</li>
</ul>
<p>If you need to manipulate the DOM with the response,<strong> context option</strong> can be useful,<br>example:&nbsp;<br><br></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">Context option</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; &nbsp; type<span style="color: #339933;">:</span> <span style="color: #3366cc;">'GET'</span><span style="color: #339933;">,</span> 
&nbsp; &nbsp; url<span style="color: #339933;">:</span> <span style="color: #3366cc;">'http://jsbin.com/IbisIHa/1'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; dataType <span style="color: #339933;">:</span> <span style="color: #3366cc;">'json'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; context<span style="color: #339933;">:</span> $<span style="color: #009900;">(</span><span style="color: #3366cc;">'#theResponse'</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
<span style="color: #006600; font-style: italic;">/*now on the callbacks this = the HTML element
&nbsp;with the id "theResponse"*/</span> 
&nbsp; &nbsp; 
&nbsp; &nbsp; success<span style="color: #339933;">:</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>data<span style="color: #009900;">)</span> <span style="color: #009900;">{</span> &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; <span style="color: #006600; font-style: italic;">//this = context = $('#theResponse')</span>
&nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'color'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'green'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">append</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'&lt;p&gt;'</span> <span style="color: #339933;">+</span> data.<span style="color: #660066;">name</span> <span style="color: #339933;">+</span> <span style="color: #3366cc;">'&lt;/p&gt;'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; error<span style="color: #339933;">:</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>xhr<span style="color: #339933;">,</span> status <span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'color'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'red'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> &nbsp;
&nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">append</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'ERROR'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span>
&nbsp; <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; 
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/iSOHEBe/3/edit?html,js,console,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_004.jpg" alt="try it" height="30" width="160"></a></p>
<p></p>
<ul>
<li>
<p><strong>timeout</strong>: [number]&nbsp;The number of milliseconds a request can take before being considered failure.</p>
</li>
</ul>
<p></p>
<p><strong>If you have to use $.ajax a lot:</strong> you can call the <a href="http://api.jquery.com/jQuery.ajaxSetup/" target="_blank">$.ajaxSetup</a>&nbsp;method
 at the beginning of your script and give it all your common/recurring 
settings. They will become the default settings for all your future AJAX
 requests.&nbsp;</p>
<p><strong>Example:&nbsp;</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">ajaxSetup</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; url<span style="color: #339933;">:</span> <span style="color: #3366cc;">'myPage.php'</span><span style="color: #339933;">,</span>
&nbsp; type<span style="color: #339933;">:</span> <span style="color: #3366cc;">'POST'</span><span style="color: #339933;">,</span>
&nbsp; dataType<span style="color: #339933;">:</span> <span style="color: #3366cc;">'json'</span><span style="color: #339933;">,</span>
&nbsp; timeout<span style="color: #339933;">:</span> <span style="color: #cc0000;">1000</span> &nbsp;
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">/*Now each time an Ajax request is made, 
the type will be 'POST', the timeout will be 1sec and
the 'myPage.php' URL will be used automatically,
you don't have to specify them*/</span> 
&nbsp;
$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; &nbsp;data<span style="color: #339933;">:</span> <span style="color: #009900;">{</span> <span style="color: #3366cc;">'id'</span><span style="color: #339933;">:</span> <span style="color: #cc0000;">45</span> <span style="color: #009900;">}</span><span style="color: #339933;">,</span>
&nbsp; &nbsp;success<span style="color: #339933;">:</span> myCallback<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; &nbsp;data<span style="color: #339933;">:</span> <span style="color: #009900;">{</span> <span style="color: #3366cc;">'color'</span><span style="color: #339933;">:</span> <span style="color: #3366cc;">'blue'</span> <span style="color: #009900;">}</span><span style="color: #339933;">,</span>
&nbsp; &nbsp;success<span style="color: #339933;">:</span> colorCallback<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">,</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p class="page-title">&nbsp;</p>
<h2 class="page-title">Shorthand Methods</h2>
<p><strong>$.ajax()</strong>&nbsp;is the most complete method, but most 
of the time you don't need&nbsp;the extensive configurability of 
$.ajax(), and you don't care about handling errors.&nbsp;</p>
<p>This is why jQuery provides&nbsp;shorthand&nbsp;methods, also called 
"convenience functions". These methods use $.ajax in background - they 
are just "wrappers" and they preset some of the options on the core 
$.ajax method.</p>
<p></p>
<ul>
<li>
<p><strong>$.get(url, data,success,dataType);</strong></p>
</li>
</ul>
<p><em>"Load data from the server using a HTTP GET request."</em></p>
<p><strong>url</strong> is required; other parameters are optional.&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #000066; font-weight: bold;">get</span><span style="color: #009900;">(</span>url<span style="color: #339933;">,</span>data<span style="color: #339933;">,</span>success<span style="color: #339933;">,</span>dataType<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//is equivalent to</span>
&nbsp;
$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; url<span style="color: #339933;">:</span> url<span style="color: #339933;">,</span>
&nbsp; type<span style="color: #339933;">:</span> <span style="color: #3366cc;">'GET'</span><span style="color: #339933;">,</span>
&nbsp; data<span style="color: #339933;">:</span> data<span style="color: #339933;">,</span>
&nbsp; success<span style="color: #339933;">:</span> success<span style="color: #339933;">,</span>
&nbsp; dataType<span style="color: #339933;">:</span> dataType
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p>You can see an interesting example at the end of this page:&nbsp;<a href="http://api.jquery.com/jQuery.get/" target="_blank">http://api.jquery.com/jQuery.get/</a></p>
<p>&nbsp;</p>
<ul>
<li>
<p><strong></strong><strong>$.post<strong>(</strong>url, data,success,dataType);</strong></p>
</li>
</ul>
<p><em>"Load data from the server using a HTTP POST request."</em></p>
<p><i>S</i>yntax and parameters are exactly like $.get.&nbsp;</p>
<p>Example at the end of this page:&nbsp;<a href="http://api.jquery.com/jQuery.post/" target="_blank">http://api.jquery.com/jQuery.post/</a></p>
<ul>
<li>
<p><strong></strong><strong>$.getJson</strong></p>
</li>
</ul>
<p><em>"Load JSON-encoded data from the server using a GET HTTP request."</em></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">getJSON</span><span style="color: #009900;">(</span>url<span style="color: #339933;">,</span>data<span style="color: #339933;">,</span>success<span style="color: #009900;">)</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//&lt;=&gt;</span>
&nbsp;
$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; url<span style="color: #339933;">:</span> url<span style="color: #339933;">,</span>
&nbsp; type<span style="color: #339933;">:</span> <span style="color: #3366cc;">'GET'</span><span style="color: #339933;">,</span>
&nbsp; dataType<span style="color: #339933;">:</span> <span style="color: #3366cc;">'json'</span><span style="color: #339933;">,</span>
&nbsp; data<span style="color: #339933;">:</span> data<span style="color: #339933;">,</span>
&nbsp; success<span style="color: #339933;">:</span> success
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<ul>
<li><strong>$.getScript</strong></li>
</ul>
<p><em>"Load a JavaScript file from the server using a GET HTTP request, then execute it."<br></em>$.<b>getScript&nbsp;</b>allows to load external Javascript or js file on the fly.<em><br></em></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">getScript</span><span style="color: #009900;">(</span>url<span style="color: #339933;">,</span>success<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//&lt;=&gt;</span>
&nbsp;
$.<span style="color: #660066;">ajax</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; url<span style="color: #339933;">:</span> url<span style="color: #339933;">,</span>
&nbsp; type<span style="color: #339933;">:</span> <span style="color: #3366cc;">'GET'</span><span style="color: #339933;">,</span>
&nbsp; dataType<span style="color: #339933;">:</span> <span style="color: #3366cc;">'script'</span><span style="color: #339933;">,</span>
&nbsp; success<span style="color: #339933;">:</span> success
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p><strong>Basic example:</strong></p>
<p>You have a JavaScript File at <em>/scripts/hello.js</em> :&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">function</span> sayHello<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;alert<span style="color: #009900;">(</span><span style="color: #3366cc;">'hello'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p><br>By using $.getScript: you can load this script and use the function sayHello:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">getScript</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'/scripts/hello.js'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #006600; font-style: italic;">//here the hello.js is loaded</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #006600; font-style: italic;">//we can use sayHello</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sayHello<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>Here is a more concrete example:&nbsp;</p>
<p>When the DOM is ready, we will load and use (with $.getScript) a method from a library:<a href="https://github.com/jquery/jquery-color/blob/2.1.0/README.md" target="_blank"> jQuery-color</a>. This is a plugin for color manipulation and animation support.&nbsp;<br><br><a href="http://jsbin.com/OhOYUju/5/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_004.jpg" alt="try it" height="30" width="160"></a></p>
<p></p>
<p>The advantage of $.getScript&nbsp;is that it loads the content during
 run time, so it can be useful to enhance performance: when you have to 
use a library (or a method) only rarely. But if you use the library 
often, it is more comfortable and logical to load it the classic way 
&lt;script src=url&gt;&lt;/script&gt;</p>
<p></p>
<p>&nbsp;</p>
<h2>Exercise: Build&nbsp;an autoSuggest&nbsp;search&nbsp;component with jQuery</h2>
<p>&nbsp;</p>
<p><strong>This is exercice is the same as week 3, but we will use jQuery!</strong></p>
<p><strong>Descriptions</strong>: <br>There is a Database with a tag table (popular tags on instagram and flickr) .<br>There is a PHP file with a webservice (the url is :&nbsp;http://www.53js.org/w3devcampus/autosuggest.php).</p>
<ul>
<li>It accepts a POST parameter with the name "qValue"</li>
It returns a json array with the tags which begin by the qValue word example:
<ul>
<li>If you send {value: 'a'} the server returns something like this:&nbsp;<br>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">[</span><span style="color: #009900;">{</span><span style="color: #3366cc;">"tag"</span><span style="color: #339933;">:</span><span style="color: #3366cc;">"art"</span><span style="color: #009900;">}</span><span style="color: #339933;">,</span><span style="color: #009900;">{</span><span style="color: #3366cc;">"tag"</span><span style="color: #339933;">:</span><span style="color: #3366cc;">"amazing"</span><span style="color: #009900;">}</span><span style="color: #339933;">,</span><span style="color: #009900;">{</span><span style="color: #3366cc;">"tag"</span><span style="color: #339933;">:</span><span style="color: #3366cc;">"awesome"</span><span style="color: #009900;">}</span><span style="color: #339933;">,</span> ... <span style="color: #009900;">]</span></pre>
</div>
</div>
</div>
<p></p>
</li>
<li>If you send {value: 'ar'} the response will be <br>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">[</span><span style="color: #009900;">{</span><span style="color: #3366cc;">"tag"</span><span style="color: #339933;">:</span><span style="color: #3366cc;">"art"</span><span style="color: #009900;">}</span><span style="color: #339933;">,</span><span style="color: #009900;">{</span><span style="color: #3366cc;">"tag"</span><span style="color: #339933;">:</span><span style="color: #3366cc;">"armor"</span><span style="color: #009900;">}</span><span style="color: #339933;">,</span><span style="color: #009900;">{</span><span style="color: #3366cc;">"tag"</span><span style="color: #339933;">:</span><span style="color: #3366cc;">"arsenal"</span><span style="color: #009900;">}</span> <span style="color: #009900;">]</span></pre>
</div>
</div>
</div>
<p></p>
</li>
<li>if there are no matching tags the response will be:<br>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">[</span><span style="color: #009900;">]</span></pre>
</div>
</div>
</div>
<p></p>
</li>
</ul>
</ul>
<p>You have to develop the client side: There is a search box (input 
text), and when the user starts typing, suggestions appear (exactly like
 when you search on Google).</p>
<p>You can do the exercise by your own, or you can follow the steps and check the solution if you are lost.</p>
<h4>&nbsp;</h4>
<h4>STEP 1: Build and test the request</h4>
<p>Use the <strong>$.ajax</strong> method to send Data (the name of the parameter is <em>qValue</em>)</p>
<ul>
<li>Use the success callback to console.log the response</li>
<li>Use the error callback to console.log the possible error&nbsp;</li>
</ul>
<p>You can start from this :<br><a href="http://jsbin.com/iFIxIbE/16/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_004.jpg" alt="try it" height="30" width="160"></a></p>
<p><br><a href="http://jsbin.com/iFIxIbE/17/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_003.jpg" alt="solution" height="30" width="160"></a><a href="http://jsbin.com/enuMedU/2/edit?html,js,console,output" target="_blank"><br></a></p>
<p>&nbsp;</p>
<h4>STEP2: Send the request on the keyup event on an input text&nbsp;</h4>
<p>1) Add an input text HTML element.<br>2) Catch the keyup event on the input text (with jQuery $(yourInputText).keyUp(...) )&nbsp;<br>3) console.log the value of the input on keyup event<br>4) Send request with the value input when you start typing (so within the callback of the keyUp)<br>5) Print the server response with console.log</p>
<p>you can start from here:<br><a href="http://jsbin.com/iFIxIbE/4/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_004.jpg" alt="try it" height="30" width="160"></a>&nbsp;</p>
<p><a href="http://jsbin.com/OWiZIja/3/edit?html,js,output" target="_blank"><br></a><a href="http://jsbin.com/iFIxIbE/3/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_003.jpg" alt="solution" height="30" width="160"></a></p>
<p><a href="http://jsbin.com/OWiZIja/3/edit?html,js,output" target="_blank">&nbsp;&nbsp;</a></p>
<h4>STEP3: Replace $.ajax by $.post</h4>
<p>In this exercise we use only post request, and we do not need a lot of options, so replace $.ajax by $.post.&nbsp;<br><a href="http://jsbin.com/iFIxIbE/5/edit?html,js,console,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_003.jpg" alt="solution" height="30" width="160"></a></p>
<p></p>
<p>&nbsp;</p>
<h4>STEP4: Add the response to the DOM&nbsp;</h4>
<p>The response is displayed into the DOM, we want to see the words in a list (&lt;li&gt;&lt;/li&gt;).&nbsp;<br>The DOM changes each time you enter a new value into the input text. &nbsp;<br>If the server has no tag corresponding to the qValue it returns [], and then you need to remove the previous responses. <br>HINT: <br>check the response length (resp length)<br>if the response length is 0 : remove all the &lt;li&gt;&lt;/li&gt; elements within the sugesstionDiv&nbsp;<br>you can use the <a href="http://api.jquery.com/html/" target="_blank">html </a>method or the <a href="http://api.jquery.com/empty/" target="_blank">empty </a>method of jQuery.</p>
<p>&nbsp;<br><br>First you can see <a href="http://jsbin.com/iFIxIbE/7/" target="_blank">the example in action</a> (without look the code).<br>Second, try to develop it (from the STEP3 solution or from your own code).<br> If you are stuck try to complete the code from this jsbin:&nbsp;<br><a href="http://jsbin.com/iFIxIbE/8/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_004.jpg" alt="try it" height="30" width="160"></a><br><br>Finally, check the solution</p>
<p><a href="http://jsbin.com/iFIxIbE/7/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_003.jpg" alt="solution" height="30" width="160"></a><a href="http://jsbin.com/OWiZIja/6/edit?html,js,output" target="_blank"><br></a></p>
<p>&nbsp;</p>
<h4>STEP5: Add some style, and ergonomics [advanced]</h4>
<p></p>
<p>1)&nbsp;Add some css: the suggestions must be stuck just below the div, like google:&nbsp;</p>
<p><img src="Week%204%20%20The%20jQuery%20library_files/google_suggest.png" alt="suggestion as dropdown" height="151" width="207"></p>
<p>2)&nbsp;When you click on one element of the suggest list, it fills 
the input and hide the "suggest list" . Be careful you can not attach 
the click event directly to the &lt;li&gt;. So you have to 
use&nbsp;delegated-events approach :&nbsp;(<a href="http://api.jquery.com/on/">http://api.jquery.com/on/</a>&nbsp;) &nbsp;use the function <strong>on&nbsp;</strong>on the UL (suggestUL).&nbsp;<br><br><a href="http://jsbin.com/iFIxIbE/9/" target="_blank">Live example&nbsp;</a></p>
<p><a href="http://jsbin.com/iFIxIbE/9/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_003.jpg" alt="solution" height="30" width="160"></a></p>
<p>3) <strong>[HARD]</strong>: &nbsp;A) add an effect on the words on suggested list like google: a<strong>mazon, </strong>a<strong>rgos.&nbsp;</strong>B) handle blur and focus event on input (hide/show the suggest list on blur/focus )!&nbsp;</p>
<p><a href="http://jsbin.com/iFIxIbE/10/" target="_blank">Live example&nbsp;</a></p>
<p><strong>Solution Bonus:&nbsp;</strong><a href="http://jsbin.com/OWiZIja/11/edit?html,js,output" target="_blank"><br></a></p>
<p><a href="http://jsbin.com/iFIxIbE/10/edit?html,js,console,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-solution_003.jpg" alt="solution" height="30" width="160"></a></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p></div><div class="book_chapter"><a name="ch1949"></a><h2 class="book_chapter_title">6 Plugins</h2><p><img src="Week%204%20%20The%20jQuery%20library_files/jQuery_plugin.png" alt="jquery plugin logo" height="156" width="589"></p>
<h1>jQuery plugins</h1>
<h1><br><em style="font-size: 14px; line-height: 20px;">"One of the most celebrated aspects of jQuery is its extensive plugin ecosystem."</em></h1>
<p>This is one of the strengths of jQuery: this ability to add your own 
plug-ins easily, allowing us to quickly and easily reuse our code, and 
also to share it with the rest of the community.<br>This ability is really exploited, and the proof is that there are a lot of jQuery plugins all over the web.&nbsp;</p>
<p dir="ltr">If you search on Google you will find a thousand jQuery 
plugins available. There is a large and various choice and a large 
community. <br>Some plugins are developed and maintained by the jQuery 
team, for example jQueryUI. But be careful - there are also low-quality 
and unmaintained plugins. This is why it can be important to understand 
how to create a plugin or at least to be able to understand the code of a
 plugin.&nbsp;</p>
<p dir="ltr">There is a list of pluginsdirectly available on jQuery:</p>
<p dir="ltr"><a href="http://plugins.jquery.com/" target="_blank">http://plugins.jquery.com/</a></p>
<p dir="ltr">&nbsp;</p>
<h1>Why use and develop jQuery plugins?&nbsp;</h1>
<p>You don't need to&nbsp;reinvent&nbsp;the&nbsp;wheel every time. You 
can take advantage of&nbsp;the&nbsp;experience of others. 
Calendars,&nbsp;autocompletion,&nbsp;table sorting, effects ... there's a
 plugin for almost everything. By using it you save a lot of time!</p>
<p>But sometimes you have specific needs and you&nbsp;may&nbsp;need to 
update, modify an existing plugin, or directly develop your own 
plugin!&nbsp;</p>
<p><br>We wrote functions to avoid rewriting the same code at different 
places in the code. Now we'll develop plugins with the same goal but "at
 a higher level": we write plugins to avoid rewriting the same code in <em>different</em> projects.</p>
<p><strong>The advantages of using and developing plugin are:&nbsp;</strong></p>
<ul>
<li data-mce-mark="1">the possibility of reusable components on any project</li>
<li data-mce-mark="1">the code is more separate, organized</li>
<li data-mce-mark="1">added readability</li>
<li data-mce-mark="1">added maintainability&nbsp;</li>
<li data-mce-mark="1">the possibility of sharing, and receiving assistance or improvement from the community&nbsp;</li>
</ul>
<p></p>
<p data-mce-mark="1">The most important point is that we create jQuery plugins for <strong>reuse</strong>!&nbsp;</p>
<p data-mce-mark="1">&nbsp;</p>
<h1>What is a jQuery &nbsp;plugin?&nbsp;</h1>
<p dir="ltr">A jQuery plugin is nothing more than a new method that we 
use to extend jQuery's prototype object. It's a function added into the 
jQuery function object ($.fn) .</p>
<p dir="ltr"><strong>Reminder:&nbsp;</strong></p>
<p dir="ltr">$('p') or $('#myID') or $('whatever')</p>
<p dir="ltr">This returns a jQuery object. Through this object, all 
jQuery methods are available. In fact,&nbsp;the jQuery object gets these
 methods from the <strong>$.fn</strong>&nbsp;object.</p>
<p dir="ltr">This object contains all of the jQuery object methods. You 
can type into a console $.fn. and you will see the autocomplete box with
 all the methods.&nbsp;</p>
<p dir="ltr">So a basic plugin might add a method within the $.fn 
object, and once you have done this, all jQuery objects will inherit the
 methods that you have added. And we could do this:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'myElem'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">myPlugin</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p>Let's start to develop our first plugin - you'll see it's not so complicated:</p>
<p>&nbsp;</p>
<h1 dir="ltr">Our first plugin&nbsp;</h1>
<p dir="ltr">We want to create a plugin that adds a border to a div, an image or multiple images or a &lt;p&gt;.<br><img src="Week%204%20%20The%20jQuery%20library_files/ourFirstPlugin.png" alt="screenshot our first plugin" style="border: 1px solid black;" height="268" width="516"><br><br><br>We can start by developing a function which add a border to an HTML element:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> borderify<span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>elem<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; elem.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'border'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'1px solid gray'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr">Now, we need to add it to <strong>$.fn</strong>, to make this function&nbsp;available&nbsp;on any jQuery object.:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">fn</span>.<span style="color: #660066;">borderify</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>elem<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; elem.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'border'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'1px solid gray'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p dir="ltr"><br>Now, we can do this: $('myDiv').borderify($('myDiv'));</p>
<p dir="ltr">It's a good start but it's not&nbsp;enough because we want to do this: <br>$('HTMLElements').borderify();&nbsp;</p>
<p dir="ltr">So, we have to remove the argument&nbsp;elem and use $(this) instead:</p>
<p dir="ltr"></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">fn</span>.<span style="color: #660066;">borderify</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; $<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'border'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'1px solid gray'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
<span style="color: #009900;">}</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p><br><strong>$(this) </strong>will refer to the jQuery object selected:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//$(this) will refer to the jQuery object $('div')</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'#header'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//$(this)will refer to the jQuery object $('#header')</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'img'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//$(this) will refer to the jQuery object $('img')</span>
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p><br><a href="http://jsbin.com/UQISExO/1/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_002.jpg" alt="try it " height="30" width="160"></a></p>
<p dir="ltr">Here we are, our first plugin! But there are some important improvements to take care of!</p>
<p dir="ltr">&nbsp;</p>
<div class="translation-layout-wrap">
<div id="trVisibleScroll">
<div id="trEntireScroll">
<h2 class="translation-layout">Maintain&nbsp;chainability</h2>
</div>
</div>
</div>
<p>One of jQuery's best features is chaining, &nbsp;when you link five or six actions onto one selector, for example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'p'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'color'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'red'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'redText'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">append</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'!!!!'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p><br>Currently our plugin can't do that because it does not return the jQuery object (the $(this)).<strong> Let's add the chaining feature:&nbsp;</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$.<span style="color: #660066;">fn</span>.<span style="color: #660066;">borderify</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; $<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'border'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'1px solid gray'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> $<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>Now, we can do this:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #3366cc;">'p'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'color'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'green'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr">We have injected our functionality while still maintaining the chain.</p>
<p dir="ltr">&nbsp;</p>
<h2><strong>Protecting the $ alias</strong></h2>
<p>To allow us to use the $ alias without troubles, &nbsp;we need to put
 the code inside of an IIFE (Immediately Invoked Function 
Expression).&nbsp;<a href="http://stage.learn.jquery.com/javascript-101/functions/#immediately-invoked-function-expression"></a></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>$<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;$.<span style="color: #660066;">fn</span>.<span style="color: #660066;">borderify</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp;$<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'border'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'1px solid gray'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">return</span> $<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp;<span style="color: #009900;">}</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span>jQuery<span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p><br>This function runs immediately and is passed jQuery as a parameter named $. It is a technique to avoid <strong>conflicts</strong> between jQuery and other JavaScript libraries which also using the dollar sign.</p>
<p>&nbsp;</p>
<h2><strong>Make a&nbsp;customizable&nbsp;plugin by accepting parameters</strong></h2>
<p>It could be nice to have the possibility of specifying the color or the width of the border!</p>
<p>So, we will add three arguments to the function: width, style and color.&nbsp;<br>To add more readability, we are <strong>not</strong> doing this:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">$<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'border'</span><span style="color: #339933;">,</span>width <span style="color: #339933;">+</span><span style="color: #3366cc;">'px'</span> <span style="color: #339933;">+</span> <span style="color: #3366cc;">' '</span> <span style="color: #339933;">+</span>style <span style="color: #339933;">+</span> <span style="color: #3366cc;">' '</span> <span style="color: #339933;">+</span> color<span style="color: #009900;">)</span><span style="color: #339933;">;</span> </pre>
</div>
</div>
</div>
<p><br>but we will pass the css method an object with border-width, border-style and border-color!&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>$<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; 
&nbsp; &nbsp;$.<span style="color: #660066;">fn</span>.<span style="color: #660066;">borderify</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>width<span style="color: #339933;">,</span>style<span style="color: #339933;">,</span>color<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp;$<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #3366cc;">'border-width'</span><span style="color: #339933;">:</span> width<span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #3366cc;">'border-style'</span><span style="color: #339933;">:</span> style<span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #3366cc;">'border-color'</span><span style="color: #339933;">:</span> color
&nbsp; &nbsp; &nbsp;<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">return</span> $<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp;<span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp; 
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span>jQuery<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//usage:</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #cc0000;">10</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'solid'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'blue'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'p'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #cc0000;">5</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'dotted'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'red'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;</pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr">This solution works, but it's not very practical. Here, we 
have three parameters but imagine a plugin with a lot of parameters, it 
would be really&nbsp;painful to have <strong>to specify all of them each time.&nbsp;</strong></p>
<p dir="ltr">Another important problem is maintainability: If our plugin
 needs an update later, and we add one parameter to that update, all the
 old scripts using this library <strong>will not work anymore.&nbsp;</strong></p>
<p dir="ltr"><strong>The solution is:</strong> use a default value and an object literal as parameter!&nbsp;<br><br></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>$<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;$.<span style="color: #660066;">fn</span>.<span style="color: #660066;">borderify</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>options<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">var</span> defaults<span style="color: #339933;">=</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;width<span style="color: #339933;">:</span> <span style="color: #3366cc;">'2px'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;style<span style="color: #339933;">:</span> <span style="color: #3366cc;">'solid'</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;color<span style="color: #339933;">:</span> <span style="color: #3366cc;">'#dedede'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #009900;">}</span><span style="color: #339933;">;</span> &nbsp;
&nbsp; &nbsp; &nbsp;<span style="color: #006600; font-style: italic;">//Merge the contents of two objects </span>
&nbsp; &nbsp; &nbsp;<span style="color: #006600; font-style: italic;">//together into the first object.</span>
&nbsp; &nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">var</span> setting<span style="color: #339933;">=</span>$.<span style="color: #660066;">extend</span><span style="color: #009900;">(</span>defaults<span style="color: #339933;">,</span> options<span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp;
&nbsp; &nbsp; &nbsp;$<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #3366cc;">'border-width'</span><span style="color: #339933;">:</span> setting.<span style="color: #660066;">width</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #3366cc;">'border-style'</span><span style="color: #339933;">:</span> setting.<span style="color: #660066;">style</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #3366cc;">'border-color'</span><span style="color: #339933;">:</span> setting.<span style="color: #660066;">color</span>
&nbsp; &nbsp; &nbsp;<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">return</span> $<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp;<span style="color: #009900;">}</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span>jQuery<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//usage:</span>
<span style="color: #006600; font-style: italic;">//use defaults values</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'p:first-child'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//specify one or more properties:</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'div'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>color<span style="color: #339933;">:</span><span style="color: #3366cc;">'red'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
$<span style="color: #009900;">(</span><span style="color: #3366cc;">'p:nth-child(2)'</span><span style="color: #009900;">)</span>.<span style="color: #660066;">borderify</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>width<span style="color: #339933;">:</span><span style="color: #3366cc;">'2'</span><span style="color: #339933;">,</span>style<span style="color: #339933;">:</span><span style="color: #3366cc;">'dotted'</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p><br>$.extend method API:&nbsp;<a href="http://api.jquery.com/jQuery.extend/" target="_blank">http://api.jquery.com/jQuery.extend/</a></p>
<p>&nbsp;</p>
<p><strong>A last good&nbsp;practice/improvement:</strong> from&nbsp;<a href="http://addyosmani.com/" target="_blank">Addy Osmani</a>, is to add a semicolon before the function:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #339933;">;</span><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>$<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;$.<span style="color: #660066;">fn</span>.<span style="color: #660066;">borderify</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>options<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">/*...*/</span>
&nbsp; &nbsp;<span style="color: #009900;">}</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span>jQuery<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;</pre>
</div>
</div>
</div>
<p><em style="white-space: pre-wrap;">"the semi-colon before the 
function invocation is a safety net against concatenated scripts and/or 
other plugins that are not closed properly."</em></p>
<p><strong>That's it!, we have developed our first library!</strong></p>
<p><strong><a href="http://jsbin.com/UQISExO/7/edit?html,js,output" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_002.jpg" alt="try it " height="30" width="160"></a></strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>&nbsp;</strong></p>
<h2 dir="ltr"><strong>Final step: build the&nbsp;library&nbsp;</strong></h2>
<p dir="ltr">We have the code, so the last step is to save the code into two files. We can use this naming convention:<br>jquery.pluginName-version.js<strong><br></strong>jquery.pluginName-version.min.js</p>
<p dir="ltr">As you see there are two versions:</p>
<ul>
<li dir="ltr"><strong>A uncompressed version:</strong>&nbsp;use to&nbsp;develop, it's full of comments and useful variable names.</li>
<li dir="ltr"><strong>A minified version:</strong>&nbsp; use in production, use to&nbsp;send to clients, to save you some bandwidth and them some loading time.</li>
</ul>
<p>So for the uncompressed version it's simple: we save the code to a js file:&nbsp;<br>jquery.borderify.1.0.0.js<br>Then to transform this&nbsp;development version to a production version, we have to&nbsp;compress and minify the code.&nbsp;</p>
<p>To do that we can use online tools like: <a href="http://jscompress.com/" target="_blank">jscompress </a>or&nbsp;<a href="http://refresh-sf.com/yui/" target="_blank">YUI Compressor</a></p>
<p>Here's the result:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #339933;">;</span><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>a<span style="color: #009900;">)</span><span style="color: #009900;">{</span>a.<span style="color: #660066;">fn</span>.<span style="color: #660066;">borderify</span><span style="color: #339933;">=</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>b<span style="color: #009900;">)</span><span style="color: #009900;">{</span><span style="color: #000066; font-weight: bold;">var</span> d<span style="color: #339933;">=</span><span style="color: #009900;">{</span>width<span style="color: #339933;">:</span><span style="color: #3366cc;">"2px"</span><span style="color: #339933;">,</span>style<span style="color: #339933;">:</span><span style="color: #3366cc;">"solid"</span><span style="color: #339933;">,</span>color<span style="color: #339933;">:</span><span style="color: #3366cc;">"#dedede"</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span><span style="color: #000066; font-weight: bold;">var</span> c<span style="color: #339933;">=</span>a.<span style="color: #660066;">extend</span><span style="color: #009900;">(</span>d<span style="color: #339933;">,</span>b<span style="color: #009900;">)</span><span style="color: #339933;">;</span>a<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span>.<span style="color: #660066;">css</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span><span style="color: #3366cc;">"border-width"</span><span style="color: #339933;">:</span>c.<span style="color: #660066;">width</span><span style="color: #339933;">,</span><span style="color: #3366cc;">"border-style"</span><span style="color: #339933;">:</span>c.<span style="color: #660066;">style</span><span style="color: #339933;">,</span><span style="color: #3366cc;">"border-color"</span><span style="color: #339933;">:</span>c.<span style="color: #660066;">color</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><span style="color: #000066; font-weight: bold;">return</span> a<span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">)</span><span style="color: #009900;">}</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span>jQuery<span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">Now, we can use the library on any web project: we just 
have to import it in the HTML file, of course, you first need to import 
jQuery.&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_html4strict" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="html4strict" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">&lt;!DOCTYPE html&gt;
&lt;<a href="http://december.com/html/4/element/html.html">html</a>&gt;
&nbsp; &nbsp;&lt;<a href="http://december.com/html/4/element/head.html">head</a>&gt;
&nbsp; &nbsp;&lt;/<a href="http://december.com/html/4/element/head.html">head</a>&gt;
&nbsp; &nbsp;&lt;<a href="http://december.com/html/4/element/body.html">body</a>&gt;
&nbsp; &nbsp;
&nbsp; &nbsp;&lt;!-- ... &nbsp;--&gt;
&nbsp;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/script.html">script</a> src="components/jquery/jquery.min.js"&gt;&lt;/<a href="http://december.com/html/4/element/script.html">script</a>&gt;
&nbsp; &nbsp; &lt;<a href="http://december.com/html/4/element/script.html">script</a> src="components/jquery/jquery.borderify.1.0.0.js"&gt;&lt;/<a href="http://december.com/html/4/element/script.html">script</a>&gt;
&nbsp; &nbsp;&lt;/<a href="http://december.com/html/4/element/body.html">body</a>&gt;
&lt;/<a href="http://december.com/html/4/element/html.html">html</a>&gt;</pre>
</div>
</div>
</div>
<p dir="ltr"><br><br></p>
<p dir="ltr">To finish, let's add some animation to our plugin: for example add border on&nbsp;mouseover with an animation:</p>
<p dir="ltr">try to add some cool features, then you can check here, an example:&nbsp;</p>
<p dir="ltr"><a href="http://jsbin.com/UQISExO/9/edit"><br><strong></strong></a><strong><a href="http://jsbin.com/UQISExO/9/edit" target="_blank"><img src="Week%204%20%20The%20jQuery%20library_files/btn-tryit_002.jpg" alt="try it " height="30" width="160"></a></strong></p>
<p dir="ltr">&nbsp;</p>
<div class="translation-layout-wrap">
<div id="trVisibleScroll">
<div id="trEntireScroll">
<h2 class="translation-layout">To go further</h2>
</div>
</div>
</div>
<p dir="ltr">An complete and advanced article By Addy Osmani : Essential jQuery Plugin Patterns</p>
<p dir="ltr"><a href="http://coding.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/">http://coding.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/</a></p>
<p dir="ltr"></p>
<p dir="ltr"></p>
<p dir="ltr"></p>
<p>&nbsp;</p>
<p></p>
<p></p>
<p></p></div> </body></html>