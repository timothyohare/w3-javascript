<!DOCTYPE html>
<html><head>
      <title>Week 2 : JavaScript Basics - Part 2</title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <meta name="description" content="Week 2 : JavaScript Basics - Part 2">
      <link rel="stylesheet" type="text/css" href="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/print.css">
    </head>
    <body>
    <a onclick="window.print();return false;" class="book_no_print" href="#"><img class="book_print_icon" alt="Print book" title="Print book" src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/book.svg">Print book</a>    <a name="top"></a>
    <h1 class="book_title">Week 2 : JavaScript Basics - Part 2</h1>
    <p class="book_summary"></p><p>Functions, scope, arrays, objects, good practices ...</p><p></p>
    <div class="book_info"><table>
    <tbody><tr>
    <td>Site:</td>
    <td><a href="http://classroom.w3devcampus.com/">Classrooms - Online training for Web developers</a></td>
    </tr><tr>
    <td>Course:</td>
    <td>JavaScript - March 2014</td>
    </tr><tr>
    <td>Book:</td>
    <td>Week 2 : JavaScript Basics - Part 2</td>
    </tr><tr>
    <td>Printed by:</td>
    <td>Timothy O'Hare</td>
    </tr><tr>
    <td>Date:</td>
    <td>Monday, 14 April 2014, 12:40 PM</td>
    </tr>
    </tbody></table></div>

    <div class="book_toc_numbered"><a name="toc"></a><h2 class="book_chapter_title">Table of contents</h2><ul><li><a title="1 Functions and scope" href="#ch1936">1 Functions and scope</a></li><li><a title="2 Arrays and objects" href="#ch1938">2 Arrays and objects</a></li><li><a title="3 Dangers and good practices" href="#ch1937">3 Dangers and good practices</a></li></ul></div><div class="book_chapter"><a name="ch1936"></a><h2 class="book_chapter_title">1 Functions and scope</h2><div class="no-overflow"><p>Functions and scope</p>
<ul>
<li>Definition &nbsp;
<ul>
<li>Return statement</li>
<li>Function expressions (function literals)</li>
<li>Arguments
<ul>
<li>Arguments object</li>
</ul>
</li>
<li>Nested functions</li>
</ul>
</li>
<li>Scope of variables</li>
<li>Callbacks</li>
<li>Closures (advanced)</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>Definition</h1>
<p>Functions are one of the core aspects in JavaScript. Functions allow 
you to enclose a set of statements, give them a name, and execute them 
by calling the function by name.</p>
<p>They are used to avoid repeating code, for code reuse, to factorize 
code, composition, information hiding, and so on. Essentially, any time 
you find yourself repeating code, you could probably use a function.<a href="http://programmer.97things.oreilly.com/wiki/index.php/Don%27t_Repeat_Yourself" target="_blank">The DRY (Don’t Repeat Yourself) principle</a> is one of the most fundamental principles of programming.</p>
<p>&nbsp;</p>
<p>So, let's start with the basic syntax, the function declaration:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">function declaration</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">function identifier( ParameterList ) { 
&nbsp; &nbsp; ... FunctionBody ...
}</pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr">A function definition / declaration consists of the <em>function</em> keyword, followed by</p>
<ul>
<li>The identifier: the name of the function (required)</li>
<li dir="ltr">A list of parameters, enclosed in parentheses and separated by commas</li>
<li dir="ltr">The function body, enclosed in curly braces { }: the&nbsp;code to be executed when the function is called.</li>
</ul>
<p>And to execute, or call, the function the syntax is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">Function Calling</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">identifier( argumentList );</pre>
</div>
</div>
</div>
<p><br>Example : this is a function declaration :&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function sum(a, b) {
&nbsp; &nbsp; var res = a + b;
&nbsp; &nbsp; return res;
} &nbsp; &nbsp; &nbsp; &nbsp;</pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr">This function is called sum; it has two parameters.</p>
<p dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/syntax_function.png" alt="illustration of a function delaclaration" style="vertical-align: baseline;" height="226" width="500"></p>
<p dir="ltr">It is called like this:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">sum(1,3);
// returns 4 </pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr">The parameters of a function call are the function's 
arguments.&nbsp;Arguments and parameters are often used interchangeably 
in text,&nbsp;but in most standards the distinction is 
that&nbsp;parameters are what are given in the function 
declaration/definition, while arguments are what are passed when calling
 the function.</p>
<p dir="ltr">So in our previous example, function sum(a,b),&nbsp;<strong>a</strong>&nbsp;and <strong>b</strong>&nbsp;would be parameters,&nbsp;whereas in the function call sum(1,3), &nbsp;<strong style="line-height: 1.4;">1</strong> and <strong style="line-height: 1.4;">3</strong>&nbsp;are the arguments.&nbsp;</p>
<p dir="ltr">You can also define a function without any parameters and/or without return :</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function hi() {
&nbsp; &nbsp; alert('Hello');
} </pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2 dir="ltr">Return statement</h2>
<h2></h2>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/return_statement.jpg" alt="return statement illustration" style="float: left;" height="150" width="150"></h3>
<p></p>
<p>The return keyword is used to specify the value to be returned by a function.&nbsp;</p>
<p>When the interpreter arrives at an return statement, it jumps 
immediately outside the current function and transmits the value 
returned to the code which called the function. Thus, a function 
immediately stops at the point where return is called.</p>
<p></p>
<p><br><strong>Syntax:&nbsp;</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">return expression ; </pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr"><em>expression</em>:</p>
<ul>
<li dir="ltr">can be an object, a string, a variable, null, a function ...&nbsp;</li>
<li><em>expression</em> is not required: a&nbsp;return instruction not followed by an expression returns the undefined value.</li>
</ul>
<p>Return statement is not required in a function; if <strong>no</strong> return is found, <strong>undefined</strong> will be returned.<br>A function can contain <strong>several</strong> return instructions:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">classic return usage</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function sum(a,b) {
&nbsp; return a +b;
}
&nbsp;
function bar1() {
&nbsp; &nbsp;temp++;
&nbsp; &nbsp;return;
}
&nbsp;
function bar2() {
&nbsp; &nbsp;temp++;
}
&nbsp;
function bar3() {
&nbsp; &nbsp;temp++;
&nbsp; &nbsp;return undefined;
}
&nbsp;
//bar1,bar2 and bar3 return undefined</pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/opicug/3/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" height="30" width="160"></a></p>
<p></p>
<p>&nbsp;</p>
<p dir="ltr">Return can be used to <strong>interrupt</strong> the function - return breaks the loop, the try, the if, <strong>everything</strong>!</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function breakingTheLoop() { 
&nbsp; &nbsp;for(var i = 0; i&lt;1000; i++) {
&nbsp; &nbsp; &nbsp; if(i==10) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return i;
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp;}
}
&nbsp;
breakingTheLoop(); //returns 10;
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">As we said above, you can use multiple returns, but<strong> this practice&nbsp;should be used with care</strong>, and only in simple cases.</p>
<p dir="ltr">For example, this classic case:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function doStuff(foo) { 
&nbsp; &nbsp;if (foo != null) { 
&nbsp; &nbsp; &nbsp; //...
&nbsp; &nbsp; &nbsp; //long code &nbsp;
&nbsp; &nbsp;}
}</pre>
</div>
</div>
</div>
<p>... can be made more readable like this:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function doStuff(foo) { 
&nbsp; &nbsp;if (foo == null) return; 
&nbsp; &nbsp;//...
&nbsp; &nbsp;//long codes
}</pre>
</div>
</div>
</div>
<p></p>
<ul>
<li dir="ltr">Avoid return in loops (break is preferred, because it is more readable).</li>
<li dir="ltr">Avoid using too many return statements in a function (especially in long functions).</li>
<li dir="ltr">When you are using multiple return statements in a function, you have to be careful that you really have covered all situations.</li>
</ul>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">Finally, keep in mind that a&nbsp;return statement "terminates" the function:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function boo() {
&nbsp; &nbsp;var a =101;
&nbsp; &nbsp;return a;
&nbsp; &nbsp;a++; //never executed
&nbsp; &nbsp;alert(a); //never executed
&nbsp; &nbsp;return a; // never executed
} </pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2 dir="ltr">Function expression</h2>
<p>&nbsp;</p>
<p dir="ltr">Functions in JavaScript are objects. When you declare a 
function the JavaScript engine creates a corresponding Function object. A
 function object looks like that of any other type of value. 
Functions&nbsp;can be used like any other value, and<strong> they can even be stored in variables</strong>,
 arrays, objects, and so on. Functions can be passed as arguments to 
functions (callback), and a function can be returned from functions.</p>
<p dir="ltr">This is why you can use a function expression (also named function literal) for definitions like this:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">anonymous function expression</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var sum = function(a,b){
&nbsp; &nbsp; var c = a + b;
&nbsp; &nbsp; return c;
}; </pre>
</div>
</div>
</div>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">Here, we have a function defined via an anonymous function Expressions, <br>but you can also name it (and it is better to do this for easier debugging):</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">named function expression</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var sum = function doSum(a,b) { 
&nbsp; &nbsp; var c = a + b;
&nbsp; &nbsp; return c;
};
/*
note:
variable name and function name can be the same:
var sum = function sum(a,b) {...};
*/</pre>
</div>
</div>
</div>
<p></p>
<p>When you define a function using a function expression, it is exactly
 like a variable assignment - so you need to put a semicolon at the end 
(after the function body).</p>
<p>To call the function, you use<strong> the variable name</strong> followed by a set of parentheses with any arguments:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">//syntax: variableName(argumentList);
sum(1,1);
//returns 2
&nbsp; 
doSum(1,1);
//Uncaught ReferenceError: doSum is not defined</pre>
</div>
</div>
</div>
<p></p>
<p>&nbsp;A function expression can appear anywhere that an expression 
can appear. The advantages of anonymous functions will be see later on 
in the callback sections.</p>
<p></p>
<p dir="ltr">So, we have three "sum" functions:<a href="http://jsbin.com/emajop/1/edit" target="_blank">&nbsp;</a></p>
<p dir="ltr"><a href="http://jsbin.com/emajop/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p dir="ltr">These functions do the same job and are equivalent, and 
when you call them the result is exactly the same, but the difference 
lies in how the JavaScript engine loads them into the execution context.
 This is not obvious, so there are some points you need to remember:</p>
<ol>
<li><strong style="line-height: 1.4;">Function declarations</strong> are defined “at run-time” (they load before any code is executed)</li>
<li><strong>Function expressions</strong>&nbsp;are defined at “parse-time” (they load only when the&nbsp;JavaScript engine reaches their line of code)</li>
<li><strong style="line-height: 1.4;">Function declarations</strong> cannot be nested within non-function blocks (if, else, try, for ... )</li>
<li><strong style="line-height: 1.4;"><strong>Function expressions</strong>&nbsp;</strong>can be nested within non-function blocks</li>
<li><strong style="line-height: 1.4;">Function expressions</strong> can be named or anonymous.</li>
</ol>
<ul></ul>
<p></p>
<p>1.<strong>&nbsp;Function declarations</strong> are defined "at run-time":</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">sum1(1,1); //returns 2
&nbsp;
//function declaration
function sum1(a, b) {
&nbsp; var res = a + b;
&nbsp; return res;
} &nbsp;</pre>
</div>
</div>
</div>
<p><br>The function sum1 is available everywhere in the scope it was 
defined. So you can call the function before its definition (it works), 
but try to always define the function before calling it. (It is more 
readable.)</p>
<p>&nbsp;</p>
<p>2.&nbsp;<strong>Function expressions</strong>&nbsp;are defined at “parse-time”:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">sum3; // undefined
sum3(1,1); //throws an error ! 
&nbsp;
//named function expression
var sum3 = function doSum(a,b) {
&nbsp; var res= a + b;
&nbsp; return res;
};</pre>
</div>
</div>
</div>
<p><br>Assignments happen at runtime, this is why the value of sum3 is undefined&nbsp;<strong>before</strong> the var sum3 = function...&nbsp;</p>
<p>&nbsp;</p>
<p>3. &amp; 4.&nbsp;<strong>Function declarations</strong>&nbsp;cannot 
be nested within non-function blocks&nbsp;such as that of if, else, 
while, for, try statements, etc. They&nbsp;can only be declared at top 
level or immediately within another function.&nbsp;<br>Blocks can only contain statements, and function declarations are not statements!&nbsp;<br>&nbsp;<br>However, function expressions can be nested within non-function blocks because they are considered to be statements.<br>you should never do this =&gt;&nbsp;</p>
<p></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">//you should never do this !! 
//Function declarations should not be placed in blocks.
// depending on the JavaScript engine the result can be true or false ... &nbsp;
&nbsp;
if(true) {
&nbsp; function foo() {
&nbsp; &nbsp; alert('true');
&nbsp; }
}else {
&nbsp; function foo() {
&nbsp; &nbsp; alert('false');
&nbsp; }
}
foo();
&nbsp;
&nbsp;
//instead use a function expression
var foo;
if(true) {
&nbsp; foo = function() {
&nbsp; &nbsp; alert('true');
&nbsp; };
}else {
&nbsp; foo = function() {
&nbsp; &nbsp; alert('false');
&nbsp; };
}
foo();</pre>
</div>
</div>
</div>
<p></p>
<p>5. As we mentioned above,<strong> function expressions can be named or anonymous</strong>: var foo = function(){..} &nbsp;or var foo = function doSomething(){...}</p>
<p>&nbsp;</p>
<h3 dir="ltr"><strong>Naming the function:</strong></h3>
<p dir="ltr">The function naming convention is like the variable naming convention :</p>
<ul>
<li>“Names should be formed from the 26 upper and lower case letters (A .. Z, a .. z), the 10 digits (0 .. 9), and _ (underbar).”</li>
<li dir="ltr">The camelCase notation is preferred.</li>
<li dir="ltr">Names should start with a lower case letter &nbsp;(recommended)</li>
<li dir="ltr">
<p dir="ltr">Don’t use JavaScript reserved words.</p>
</li>
</ul>
<p>You can read <a href="http://javascript.crockford.com/code.html" target="_blank">Douglas Crockford's code conventions</a> for JavaScript, and test and validate your code with the&nbsp;<a href="http://www.jslint.com/" target="_blank">http://www.jslint.com</a> tool.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Arguments</h2>
<p>&nbsp;When you define a function, you do not have to specify the 
types of its arguments.&nbsp;So it's when you call a function that you 
must use “good” argument types. The previous function sum seems to 
require two numbers, but you can pass other types:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">sum('one' , 'two');
//returns 'onetwo'
&nbsp;
sum(1 , 'one');
//returns '1one'</pre>
</div>
</div>
</div>
<p></p>
<p>In this case, this works because operator + can be apply to strings. 
But this is not always the case, in fact in JavaScript, you have to read
 the library API or the EmacScript specification to know the proper 
argument type.&nbsp;</p>
<p dir="ltr">Another important point is the number of arguments. <img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/warning.png" alt="warning" height="20" width="20">&nbsp;<strong>If you omit arguments, JavaScript will assign undefined to them.</strong></p>
<p dir="ltr">Our sum function has been defined with two parameters: 
&nbsp;a and b.&nbsp;Let's see what happens if we pass only one 
argument:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function sum(a,b){
&nbsp; &nbsp; var c = a+b;
&nbsp; &nbsp; return c;
}
&nbsp;
var res = sum(1); 
res; 
//returns NaN</pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>Explanation: when you call sum(1):<br><strong style="line-height: 1.4;">a</strong> is assigned to <strong style="line-height: 1.4;">1</strong> and <strong style="line-height: 1.4;">b</strong>&nbsp;to <strong style="line-height: 1.4;">undefined</strong>, so c = 1 + undefined, so consequently c is NaN.&nbsp;</p>
<p>&nbsp;</p>
<h3 dir="ltr">Arguments object</h3>
<p>&nbsp;&nbsp;</p>
<p dir="ltr"><strong>The arguments object is a local variable available within all functions.</strong></p>
<p dir="ltr">This object is automatically created within all functions 
and contains an entry for each argument passed to the function. 
Arguments has a property "length".</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 70%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function f() { 
&nbsp; &nbsp; var res ='';
&nbsp; &nbsp; for(var i = 0; i&lt;arguments.length; i++){
&nbsp; &nbsp; &nbsp; &nbsp; res += arguments[i] + ' ';
&nbsp; &nbsp; }
&nbsp; &nbsp; return res; &nbsp; &nbsp; 
}
&nbsp;
f(); //returns empty string
f(1); //1
f(1,2,3,true,'ninja',-55); //returns 1 2 3 true ninja -55
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p>And now we are going to improve our sum function,&nbsp;</p>
<p><strong>Exercise:</strong></p>
<p>Make our sum function able to work with an unlimited arguments:</p>
<ul>
<li>if I call sum(1,2,3), 6 is returned&nbsp;</li>
<li>if I call sum(1,1,1,1,1,1,1,1,1,1) 10 is returned&nbsp;</li>
<li>and what if I call sum(1,2,3,'ninja') ???&nbsp;<br><br></li>
</ul>
<p><a href="http://jsbin.com/aninen/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-solution.jpg" alt="solution" style="margin-left: 20px;" height="30" width="160"></a>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Nested functions</h2>
<h3><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/nested_function.png" alt="illustration nested function" style="float: right; margin-right: 10px;" height="300" width="103"></h3>
<h3>&nbsp;</h3>
<p>A nested function is a function defined&nbsp;within another function.
 The nested function is not available outside the function. Let's see a 
simple example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">nested function</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function outer(a,b) {
&nbsp; &nbsp; function inner() {
&nbsp; &nbsp; &nbsp; &nbsp; return a+b; 
&nbsp; &nbsp; }
&nbsp; &nbsp; var res = inner();
&nbsp; &nbsp; return res; //or directly inner()
}
&nbsp;
&nbsp;
outer(1,1); //2
&nbsp;
inner(); // Uncaught ReferenceError: inner is not defined</pre>
</div>
</div>
</div>
<h3>&nbsp;</h3>
<p>The outer function is "visible" and can be called from everywhere, while inner function is defined within outer. The <strong>inner</strong> function is<strong> not available</strong> outside <strong>outer</strong>.</p>
<p>A concrete example with a function which returns true if a triangle is a <i>right-angled triangle</i>:<br>If&nbsp;<i>a</i><sup>2</sup>&nbsp;+&nbsp;<i>b</i><sup>2</sup>&nbsp;= c<i></i><sup>2</sup>,&nbsp;then the triangle is right&nbsp;(Pythagorean theorem)</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">//c the hypotenuse 
//a,b the two other sides
&nbsp;
function isRightTriangle(a,b,c) {
&nbsp; var bool;
&nbsp; function square(x){
&nbsp; &nbsp; return x*x;
&nbsp; }
&nbsp; bool = (square(a)+square(b)) === square(c);
&nbsp; return bool;
}
&nbsp;</pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>Naturally, you can use function expressions instead - check &nbsp;<br><a href="http://jsbin.com/ewovoh/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" style="margin-left: 10px; vertical-align: bottom;" height="30" width="160"></a></p>
<p dir="ltr">Nested function advantages and disadvantages:</p>
<ul>
<li>Allows to show only some functions while the others (inner functions) are hiding/private</li>
<li>Gain readability</li>
<li>Avoid naming conflicts</li>
<li>Will be very useful when you do object-oriented programming later</li>
<li>Performance may be affected</li>
</ul>
<p></p>
<p dir="ltr">An interesting article about performance concerns in nested functions:<br><a href="http://thorstenlorenz.wordpress.com/2012/06/02/performance-concerns-for-nested-javascript-functions/" style="line-height: 1.4;" target="_blank">http://thorstenlorenz.wordpress.com/2012/06/02/performance-concerns-for-nested-javascript-functions/</a></p>
<p dir="ltr">&nbsp;&nbsp;</p>
<p dir="ltr">&nbsp;&nbsp;</p>
<h1 dir="ltr">Functions and variable scope</h1>
<p>&nbsp;&nbsp;</p>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/scope_function.png" alt="function scope illustration" style="vertical-align: text-bottom;" height="236" width="500"></p>
<div>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/warning%25201.png" height="20" width="20">&nbsp;Be
 careful,&nbsp;&nbsp;the scope of variables in&nbsp;JavaScript is really
 different from other languages. This is an important point - understand
 scope and you will be able to avoid some classic mistakes&nbsp;and save
 a lot of debugging time.</p>
<p><strong>Scope</strong>&nbsp;refers to where variables and functions 
are accessible, in what context functions execute, and&nbsp;how your 
variables interact with the rest of your code.</p>
<div>
<p><strong>Important points:</strong></p>
<ul>
<ul>
<li><strong>JavaScript has function scope:</strong><br>A variable declared inside a function will not be visible from outside this function</li>
<li><strong>JavaScript has no block scope:</strong><br>A variable declared inside a block (if, else, for, try, etc.) will be visible outside the block</li>
</ul>
</ul>
<p>You have two levels of variable scope:&nbsp;<br><strong>global</strong> variable =&nbsp;declared outside a function; variable is accessible from anywhere in your code.<br><strong>local</strong> variable =&nbsp;declared inside a function; variable is accessible in a certain part of your code. <br><br></p>
<p>Simple example of function scope:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">function scope</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">//JavaScript has function scope
var global = 1;
&nbsp;
function f() {
&nbsp; var local = 1;
&nbsp; global += local;
&nbsp; return global;
}
&nbsp;
f(); //2
f(); //3
local; //Uncaught ReferenceError: local is not defined</pre>
</div>
</div>
</div>
<p></p>
</div>
</div>
<p dir="ltr">The variable "local" is only available within the f function. Outside f, "local" it is not defined at all.<br>The variable global is available and accessible from anywhere.&nbsp;</p>
<p dir="ltr">Javascript has no block scope:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">no block scope</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">if(true) {
&nbsp; var foo= 'hello';
}
&nbsp;
foo; // 'hello' foo is global</pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr">We can represented the scope like this :</p>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/scope_illustration2.png" alt="scope illustration" style="float: right;" height="298" width="400"></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">//the picture on the right illustrates the following example:
&nbsp;
var foo = 10;
var bar =20;
&nbsp;
function f() {
&nbsp; var alpha = 0.1;
&nbsp; var res = (foo + bar) * alpha;
&nbsp; return res;
}
&nbsp;</pre>
</div>
</div>
</div>
<p dir="ltr"><br>Global scope is the universe - in this example, it contains function f&nbsp;and the global variables foo and bar. <br>But "the&nbsp;universe" cannot see inside f!<br>Function
 f has its own scope (its own universe), which contains alpha and res. f
 is inside the universe so it can see foo and bar.&nbsp;</p>
<p dir="ltr">Variables scope work by levels, and levels are defined by 
functions.&nbsp;There is one global scope, and each function defined has
 its own nested scope.</p>
<p dir="ltr"></p>
<p dir="ltr"><strong>"var" keyword!&nbsp;</strong></p>
<p dir="ltr">A variable defined without the keyword “var”:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">foo = 15;</pre>
</div>
</div>
</div>
<p><br>will be “considered” global.&nbsp;<img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/warning%25201.png" height="20" width="20"></p>
<p>In fact, if you don't use var, the variable traverses up through the 
layers of scope until it encounters a variable by the given name or the 
global object (object window, if you are doing it in the browser), where
 it then attaches. Its behavior is then similar to that of a global 
variable.</p>
<p><strong><strong><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/warning%25201.png" height="20" width="20">&nbsp;</strong>You should always </strong><strong>use var keyword&nbsp;</strong>, even for global variables. If you omit it, this can produce unexpected results and a lot of bugs that are hard to debug.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function f() {
&nbsp; foo= 2 ; 
}
&nbsp;
foo; //Uncaught ReferenceError: foo is not defined
f(); 
foo; //2</pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p>At the time of the function definition, foo doesn't exist, then on the first call to f(), foo is defined as global variable!</p>
<p><strong>&nbsp;Another trap:&nbsp;</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var bar = 123;
&nbsp;
function f() { 
&nbsp; alert(bar); //undefined
&nbsp; var bar = 1;
&nbsp; alert(bar); //1
} 
&nbsp;
f(); </pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p>The first alert displays undefined, and not 123!<br>Indeed, the fact is that a variable&nbsp;<em>bar</em> is defined within the function, even after the alert hides the fact that there is a global var. <br>Functions<strong> look first for variables defined within</strong>
 their own body.&nbsp;That's why the first alert displays undefined: 
because f() sees bar as local variable, and bar is not 
yet&nbsp;initialized.</p>
<p>If we rename the local variable, it's okay:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var bar = 123;
&nbsp;
function f() { 
&nbsp; alert(bar); //123
&nbsp; var innerBar = 1;
&nbsp; alert(innerBar); //1
} 
&nbsp;
f(); </pre>
</div>
</div>
</div>
<p><strong><br><strong><strong><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/warning%25201.png" height="20" width="20"></strong></strong>Two recommendations:</strong>&nbsp;use
 different names for global and local variables, and try to always 
declare variables at the top of the function or the code:</p>
<p>&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;</p>
<h3><strong>Nested function scope:&nbsp;</strong></h3>
<p>This is quite simple - when you have a function "child" defined inside another function "parent", the rule is:<br>The
 parent function cannot access variables and functions defined inside 
the child function, but the child does have access to parent.</p>
<p>In other words, functions only have access to <strong>variables</strong>, <strong>parameters</strong>, and <strong>functions</strong> in their <strong>own</strong> context and <strong>above</strong>.</p>
<p>To better illustrate this principle,&nbsp;let&nbsp;us&nbsp;consider the following example:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 60%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var g = 1; 
//{g 1}{a x}{b x}{c x} x&lt;=&gt;undefined
&nbsp;
function alpha() {
&nbsp; &nbsp;var a = 2; 
&nbsp; &nbsp;//{g 1}{a 2}{b x}{c x} 
&nbsp;
&nbsp; &nbsp;function beta() {
&nbsp; &nbsp; &nbsp; var b = 3;
&nbsp; &nbsp; &nbsp; //{g 1}{a 2}{b 3}{c x} 
&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; function charlie() {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var c = 4;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// {g 1}{a 2}{b 3}{c 4} &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;alert(a,b,g);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//JavaScript climbs up the scope chain to get a,b and g &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; charlie();
&nbsp; &nbsp;}
&nbsp; &nbsp;beta();
}</pre>
</div>
</div>
</div>
<p><br>alpha, beta and charlie have their own context but they all see global variable g.<br>Inside
 charlie is the only place where g,a,b and c are all available. Each 
function can see the variables above.This is known as the <strong>scope chain.</strong></p>
<p dir="ltr">&nbsp;</p>
<p>Here's an important set of examples that you must understand - try to guess the results before uncommenting the last lines:</p>
<p><a href="http://jsbin.com/ogevut/1/edit" style="line-height: 1.231;"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" height="30" width="160"></a></p>
<p>&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;</p>
<h1>Callbacks</h1>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">As we saw before, functions are objects and look like any other type of value. <br>So a function can be:</p>
<ul>
<li dir="ltr">returned from another function</li>
<li dir="ltr">passed to another function as a parameter</li>
</ul>
<p>A callback is a<strong>&nbsp;function that is passed as an argument to another function</strong>,
 which is expected to call back (execute) the argument at some 
convenient time.&nbsp;A callback function is a function like any other 
function. It has one unique&nbsp;feature: it is called by another 
function which&nbsp;has received it as a parameter.&nbsp;<br><br></p>
<p>Passing a function as an argument is easy. Here is a simple example.</p>
<p></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function invoke_and_add(a, b) {
&nbsp; return a() + b(); //parameters are functions ! 
}
&nbsp;
function one() {
&nbsp; return 1;
}
&nbsp;
function two() {
&nbsp; return 2;
}
&nbsp;
//invoke_and_add(one, two)
// returns 3</pre>
</div>
</div>
</div>
<p></p>
<p>Note that when we pass a function as a parameter, we put only the 
name of the function and not the parentheses (the parentheses would 
cause a function call).</p>
<p>In fact, when we put the function name (without parentheses) we are putting the code of the function.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">console.log(one); 
/*
function one() {
return 1;
}
*/
&nbsp;
console.log(one());
//1
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p>We can also use anonymous callback&nbsp;functions as parameters.&nbsp;<br><br></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">invoke_and_add(function(){return 1;} , function(){return 2;});</pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/ayoxuz/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" style="margin-top: 15px;" height="30" width="160"></a></p>
<p></p>
<p></p>
<p>OK, so callback are functions&nbsp;passed as parameters - what's the point of that?&nbsp;</p>
<p>Callbacks make sense when you deal with discontinuous events. They 
are often used in situations where an action is asynchronous! When you 
want some code to be executed as soon as the result is ready, you put 
that code into a function and pass that function as the&nbsp;callback 
argument. Callbacks are really useful when the function needs to perform
 actions before the callback is executed.</p>
<p dir="ltr"><br>Imagine two functions:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function downloadMovie() { 
&nbsp; &nbsp;console.log('downloading...');
}
&nbsp;
function watchMovie() {
&nbsp; &nbsp;console.log('launch &amp; watch');
}
&nbsp;
downloadMovie();
watchMovie();
&nbsp;</pre>
</div>
</div>
</div>
<p>the result of this instructions is:&nbsp;</p>
<p>downloading...<br>launch &amp; watch</p>
<p dir="ltr"><br>OK, we have the <em>downloadMovie</em> function result first, then <em>watchMovie</em> function result because console.log execution is almost&nbsp;instantaneous.</p>
<p dir="ltr">But if <em>downloadMovie</em> takes time and performs some 
asynchronous task (because of an ajax request for example) 
&nbsp;then&nbsp;you have no guarantee that the download movie result 
will come before <em>watchMovie</em>.&nbsp;</p>
<p>And it's even worse: if <em>watchMovie</em> depends on&nbsp;<em>downloadMovie</em>'s result, an error will certainly occur.</p>
<p>//example&nbsp;<br><br></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function downloadMovie(){
&nbsp; &nbsp;setTimeout(function(){ //simulate asynchronous behavior
&nbsp; &nbsp; &nbsp; console.log('downloading...');
&nbsp; &nbsp;},1000);
}
&nbsp;
function watchMovie(){
&nbsp; &nbsp;console.log('launch &amp; watch');
}
&nbsp;
downloadMovie();
watchMovie();</pre>
</div>
</div>
</div>
<p>result:&nbsp;<br>&gt;&gt;launch &amp; watch<br>&gt;&gt;downloading...</p>
<p><a href="http://jsbin.com/azegec/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" height="30" width="160"></a></p>
<p><strong>Explanation of setTimeout:</strong></p>
<p>setTimeout calls a function after a specified number of milliseconds 
has elapsed. It is a function provided by the windows object (the 
browser). Its syntax is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">setTimeout(function, delay);</pre>
</div>
</div>
</div>
<p><strong>delay</strong>:&nbsp;The delay in microseconds (1000 milliseconds&nbsp;= 1 second).</p>
<p>setTimeout is the simplest way to produce / simulate asynchronous (non-blocking) code.<br><br></p>
<p><strong>The solution to ensure the execution of&nbsp;<em>downloadMovie </em>before <em>watchMovie</em></strong>: a callback</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">Solution</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function downloadMovie(theCallback){
&nbsp; setTimeout(function(){
&nbsp; &nbsp; console.log('downloading...');
&nbsp; &nbsp; if(theCallback){
&nbsp; &nbsp; &nbsp; theCallback();
&nbsp; &nbsp; }
&nbsp; },1000);
}
&nbsp;
function watchMovie(){
&nbsp; console.log('launch &amp; watch');
}
&nbsp;
//we call downloadMovie with watchMovie as callback
downloadMovie(watchMovie);
&nbsp;
&nbsp;</pre>
</div>
</div>
</div>
<p><a href="http://jsbin.com/azegec/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" height="30" width="160"></a></p>
<p></p>
<p dir="ltr">We will&nbsp;go&nbsp;into&nbsp;further details in the next 
chapter (the event and jquery section), and you'll quickly understand 
the importance and benefits of callback. We will see useful examples 
in&nbsp;JavaScript libraries&nbsp;such as&nbsp;<a href="http://en.wikipedia.org/wiki/JQuery" title="JQuery">j</a>Query</p>
<p dir="ltr"></p>
<p><strong>&nbsp;</strong></p>
<h2>Exercises<br>&nbsp;</h2>
<h4>Functions</h4>
<p>A "visual" exercise, (do not worry JavaScript in the browser is coming next week)&nbsp;</p>
<p>We start with this jsbin :<a href="http://jsbin.com/gohefago/1/edit?html,js,output" target="_blank">http://jsbin.com/gohefago/1/edit?html,js,output</a></p>
<p>1) <br>Create a function named generateSquare:<br>This function takes one argument a number.<br>This
 function will be call when we click on the button ok, (and the value of
 the input number will be passed as arguments to our function)</p>
<p>So create this function and call the function createSquare 
with&nbsp;an arbitrary number, then click on the button ok just to see 
what happens !</p>
<p>2) <br>if we type the number 10 on the input, then we click on ok we want to see 10 squares!&nbsp;<br>But if we enter nothing, we want to see an alert message ("please enter a number") (tip: use the function alert("string");</p>
<p>3) Now we do not want see incomplete lines ! <br>As you can see it can have only 4 squares by lines but if we enter the number 5 6 or 7 the last lines is not complete ! &nbsp;<br>So, if the value of input is not a multiple of 4: &nbsp;you have to decrease it.<br>(example : 4,5,6,7 =&gt; 2 lines 8,9,10,11 =&gt; 3 lines)&nbsp;</p>
<p><a href="http://jsbin.com/mokaceku/5/edit?js,output" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-solution.jpg" alt="solution" height="30" width="160"></a></p>
<p></p>
<p>&nbsp;</p>
<h4>Callbacks 1</h4>
<p>On this example: &nbsp;<br><a href="http://jsbin.com/jehegiri/1/edit?html,js,output" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" height="30" width="160"></a><br>we have a green square (panel output)&nbsp;<br>we have two functions <em>growUp</em> and <em>colorChange</em>.<br>And we have a click handler for the button "ok"&nbsp;<br><br><strong>Exercice</strong><br>When we click on the button ok :<br>We want to see grow the square. And then, when it is finished we want to see its color change.&nbsp;<br><br></p>
<h4>Callbacks 2</h4>
<p>Make a function (named multByTwo) that multiplies a number by two and then <strong>can&nbsp;</strong>apply a function to the result.&nbsp;<br>Examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">multByTwo<span style="color: #009900;">(</span><span style="color: #cc0000;">10</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// 20 </span>
multByTwo<span style="color: #009900;">(</span><span style="color: #cc0000;">10</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>x<span style="color: #009900;">)</span><span style="color: #009900;">{</span><span style="color: #000066; font-weight: bold;">return</span> x<span style="color: #339933;">+</span><span style="color: #cc0000;">1</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//21</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">function</span> addOne<span style="color: #009900;">(</span>x<span style="color: #009900;">)</span><span style="color: #009900;">{</span>
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">return</span> x<span style="color: #339933;">+</span><span style="color: #cc0000;">1</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span>
&nbsp;
multByTwo<span style="color: #009900;">(</span><span style="color: #cc0000;">10</span><span style="color: #339933;">,</span>addOne<span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">// 21</span>
&nbsp;
multByTwo<span style="color: #009900;">(</span><span style="color: #cc0000;">10</span><span style="color: #339933;">,</span>multiplyByTwo<span style="color: #009900;">)</span> <span style="color: #006600; font-style: italic;">//40</span>
&nbsp;
multByTwo<span style="color: #009900;">(</span><span style="color: #cc0000;">10</span><span style="color: #339933;">,</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>x<span style="color: #009900;">)</span><span style="color: #009900;">{</span>
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">return</span> multiplyByTwo<span style="color: #009900;">(</span>x<span style="color: #339933;">,</span>multiplyByTwo<span style="color: #009900;">)</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//we will let you guess </span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/ofivat/2/edit" target="_blank" style="line-height: 1.4;"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-solution.jpg" alt="solution" height="30" width="160"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>Closures (advanced feature)</h1>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Closures:</p>
<ul>
<li>Are hard to understand when you approach them for the first time.</li>
<li>Are not magic!&nbsp;</li>
<li>Require you to try and test a lot of examples by yourself (I can 
only show you the door!),this part is a bit theoretical, but we will see
 more practical examples later in the course</li>
</ul>
<p>You will need to understand them to be able to master JavaScript, but don't get discouraged if you don't get it right now.</p>
<p>Before we go any further, some details about scope, because to 
understand closures you must really understand scope in JavaScript.</p>
<p></p>
<p>As we saw above, <strong>variables</strong> have<strong> function scope</strong> and <strong>no block scope</strong>, and when we have some nested functions, chain scope is used for variable lookup:&nbsp;</p>
<p>Reminder about the scope chain:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var a = 1; 
function outer() { 
&nbsp; &nbsp;var b = 2; 
&nbsp; &nbsp;function inner() { 
&nbsp; &nbsp; &nbsp; var c = 3; &nbsp;
&nbsp; &nbsp; &nbsp; alert(a + ' ' + &nbsp;b + ' ' +c );
&nbsp; &nbsp;} 
}
&nbsp;
outer(); //displays '1 2 3'</pre>
</div>
</div>
</div>
<p></p>
<p>Physically, the <strong>function inner</strong>&nbsp;is wrapped by <strong>outer</strong> and <strong>outer</strong> is wrapped by the global context. This structure is statically defined and changeless in the code. <br>So we know that:</p>
<ul>
<li>&nbsp;each function sees its own variables, and its parent's variables.</li>
<li>The scope chain is this list of all (parent) variable objects for 
the inner contexts.&nbsp;(JavaScript climbs up the levels to look up 
variables - this is why we call this a scope <em>chain</em>).</li>
</ul>
<p>So here, <strong>inner</strong> sees its own variables (c) and its parent's variables (b) and of course the global variables (a).</p>
<p></p>
<p><strong>Lexical scoping, sometimes known as&nbsp;static scoping</strong></p>
<p>Lexical scoping can be illustrated like this:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function f1(){
&nbsp; &nbsp;var a = 1; 
&nbsp; &nbsp;f2();
} 
function f2() { 
&nbsp; &nbsp;return a;
} 
&nbsp;
f1(); //a is not defined</pre>
</div>
</div>
</div>
<p></p>
<p>In this example, <strong>f2()</strong> sees only its own scope and global scope, and <strong>a</strong> is not defined inside it.&nbsp;<br>When <strong>f1()</strong> calls <strong>f2()</strong>, a is well defined, but it doesn't matter that a is not defined in f2 context.&nbsp;</p>
<p>A scope is a list of ways in which data and variables are available. 
It is defined during creation, uneditable, but we can add or remove data
 in this way at run-time.&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function f1(){
&nbsp; &nbsp;var a = 1; 
&nbsp; &nbsp;return f2();
} 
&nbsp;
function f2(){ 
&nbsp; &nbsp;return a;
} 
&nbsp;
f1(); //a is not defined 
//but if we add a variable a in global contextt: 
var a = 5; 
f1(); //returns 5 
a = 55; 
f1(); //returns 55
delete a; 
f1(); a is not defined</pre>
</div>
</div>
</div>
<p></p>
<p class="prettyprint"></p>
<p class="prettyprint">OK, but what does this have to do with closures? Well, closures are used to break the chain scope!</p>
<p class="prettyprint">A closure is a function that retrieves the 
variable's scope where it was defined. Technically, all functions are 
closures because they are objects, and they have a scope chain 
associated with them.</p>
<p class="prettyprint">Breaking the chain scope:&nbsp;</p>
<p class="prettyprint">Imagine the following case:</p>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/closure_schema1.png" alt="closure schema " style="vertical-align: baseline;" height="224" width="300"></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var a = 15;
function f() {
&nbsp; &nbsp;var b = 'hello';
}
b;//error</pre>
</div>
</div>
</div>
<p class="prettyprint">Variable a and function f are defined inside the global scope, <br>and b is defined inside f (and b is visible only on f).</p>
<p class="prettyprint">Now we put a function N inside F:&nbsp;</p>
<p class="prettyprint"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/closure_schema2.png" alt="closure schema 2" height="224" width="300"></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var a = 15;
function f() {
&nbsp; &nbsp;var b = 'hello';
&nbsp; &nbsp;function n() {
&nbsp; &nbsp; &nbsp; var c = true;
&nbsp; &nbsp;}
}
&nbsp;
a;//return 15;
b;//error
c;//error
&nbsp;</pre>
</div>
</div>
</div>
<p class="prettyprint">In this schema:&nbsp;<br>In global scope (at level of a) we cannot see b (and even less c)&nbsp;<br>Within the Function F we&nbsp;<em>can</em>&nbsp;see <strong>a</strong> and <strong>b</strong> but not <strong>c<br></strong>Within the Function N we&nbsp;<em>can</em> see <strong>a,b,c</strong></p>
<p class="prettyprint">(the rule is :&nbsp;you can see the level above and the current level but you can't see the level below. )</p>
<p class="prettyprint"><strong>Closure : Put N in the global scope</strong></p>
<p class="prettyprint">We can make a closure by putting N in global scope without leaving N&nbsp;</p>
<p class="prettyprint"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/closure_schema3.png" alt="closure schema 3" height="224" width="300"></p>
<p></p>
<p>Now:<br> function N is at the same level as A<br> function N is in global scope <strong>but</strong>&nbsp;function N <strong>still</strong> sees the scope of F (and so it can see the variable b)</p>
<p><strong>But how do we get N out of F without actually leaving it ?</strong></p>
<p>By ensuring&nbsp;that function F returns function N - now if F is 
called from the global scope, the returned value (N) becomes visible at 
this level.</p>
<p>Example:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var a = 15;
function f(){
&nbsp; &nbsp;var b = 'hello';
&nbsp; &nbsp;function n(){
&nbsp; &nbsp; &nbsp; return b;
&nbsp; &nbsp;}
&nbsp; &nbsp;return n;
}
&nbsp;
b; //error
var closureFunc = f(); 
// Here a new closure is created; 
//now you have a new function instance along 
//with the environment in which it was created.
&nbsp;
typeof closureFunc; //function 
closureFunc(); //returns 'hello'
&nbsp;
closureFunc //returns function n(){return b;}; 
&nbsp;
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p>Here closureFunc is a closure</p>
<p><a href="http://jsbin.com/ufecuv/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" height="30" width="160"></a></p>
<p>Here we are : in the global scope we can get the value of b ! &nbsp;<br>The "magic" thing to note here is that the variable b ('hello') was still alive even after the function&nbsp;<i>F&nbsp;</i>had
 returned! &nbsp;Why? Because there is a closure. The figure below 
illustrates the scope chain before the return and after it.<br><br></p>
<p></p>
<p class="prettyprint"></p>
<p class="prettyprint"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/closure_schema4.png" alt="closure schema before after" height="239" width="600"></p>
<p class="prettyprint"></p>
<p class="prettyprint"></p>
<p></p>
<p>A&nbsp;closure&nbsp;is the pair of&nbsp;<strong>a&nbsp;</strong><strong style="line-height: 1.4;">function&nbsp;and&nbsp;the environment&nbsp;in which it was defined:&nbsp;</strong>to understand that, let’s change the code just slightly:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">var b = 'I am global';
&nbsp;
function f() {
&nbsp; &nbsp;var b = 'hello';
&nbsp; &nbsp;function n(){
&nbsp; &nbsp; &nbsp; return b;
&nbsp; &nbsp;}
&nbsp; &nbsp;return n;
}
&nbsp;
var closureFunc = f();
closeFunc(); //'hello';</pre>
</div>
</div>
</div>
<p></p>
<p>Why 'hello' ? Because of<strong> lexical scoping</strong>: <br>JavaScript
 functions are executed using the scope chain that was in effect when 
they were defined. The nested function n()&nbsp;was defined under a 
scope chain in which the variable b was bound to the value “hello”. That
 binding is still in effect when n&nbsp;is executed, wherever it is 
executed from. This is the <strong>power of closures</strong>: they capture the local variable and parameter bindings of the outer function within which they are defined.</p>
<p></p>
<p>Another basic example :&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<table class="javascript" style="border-collapse: collapse; width: 100%;">
<tbody>
<tr class="li1">
<td style="width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">1
2
3
4
5
6
7
8
9
</pre>
</td>
<td style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">function func() {
&nbsp; &nbsp;var i =0;
&nbsp; &nbsp;return function(){
&nbsp; &nbsp; &nbsp; return i++;
&nbsp; &nbsp;};
&nbsp;
}
&nbsp;
var res = func();</pre>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p></p>
<p>In this example res is typically what we call a closure. Why? Because it contains information of the function <strong>func</strong> (the variable i)</p>
<p>Let's see what happens step by step, how JavaScript executes this:&nbsp;</p>
<p><em>1) LINE 9 &gt;&gt; var res = func()</em><br>func calls, I go into function func</p>
<p><em>&nbsp; &nbsp;1-2) LINE 2 &gt;&gt; &nbsp;var i =0; //first&nbsp;instruction</em><i style="line-height: 1.4;"><br></i><em></em></p>
<p><em>&nbsp; &nbsp;1-3)LINE 4 &gt;&gt; return function()....<br></em>&nbsp; &nbsp;it returns a new anonymous function, this function is assigned to variable res</p>
<p>In this returned anonymous function, thanks to the lexical scope, the
 variable i is "caught" and available, and the first i value is 0.<br>So now res is a function,&nbsp;more specifically&nbsp;a closure, and looks like this:</p>
<pre>//available variable in the closure : i = 0<br>function() {<br>&nbsp; &nbsp; return i++;<br>}</pre>
<p><strong>Now we call the closure (like a function) : res()&nbsp;</strong></p>
<p><strong>First call of res, let's see what happens :</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">res(); // returns 0
&nbsp;
//available variables in the closure : i = 0
// the code executed:
function: function() {
&nbsp; &nbsp;return 0++; // return 0 and add one i=1
}
&nbsp;
&nbsp;
//second call of res :
res(); //returns 1
&nbsp;
//available variables in the closure : i = 1
// the code executed:
function: function() {
&nbsp; &nbsp; return 1++; // return 1 add one i=2
}
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p>and so on.</p>
<p>The variable<strong style="line-height: 1.231;"> i is locked in res</strong>,
 which can be used at will! The advantage of this is that if you call 
func again, a new instance will be created.That is to say, in memory, 
everything in res will be completely different from what is returned by 
another call to f. <br>Example:</p>
<p>&nbsp;</p>
<p>var res = func();</p>
<p><strong>res</strong>();//0<br><strong>res</strong>();//1<br><strong>res</strong>();//2</p>
<p>var foo = func();</p>
<p><strong>foo</strong>();//0 and not 3<br><strong>foo</strong>();//1</p>
<p><strong>res</strong>();//3</p>
<p>In other words, f returns a new function reference every time!&nbsp;And this <strong>new function reference contains its own variable reference to i</strong>.</p>
<p><br>Representation of res and foo :&nbsp;</p>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/closure_schema5.png" alt="Closure exemple2" height="301" width="400"></p>
<p></p>
<p></p>
<p><a href="http://jsbin.com/uqixos/4/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_002.jpg" alt="solution" height="30" width="160"></a></p>
<p></p>
<p></p>
<p></p>
<p>Reading:&nbsp;</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures?redirectlocale=en-US&amp;redirectslug=JavaScript%2FGuide%2FClosures" target="_blank">Concise explanation of closures</a>&nbsp;by Mozilla&nbsp;</li>
<li><a href="http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/">http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/</a></li>
<li>Here is another good read:&nbsp;<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html" target="_blank">The Environment Model of Evaluation</a>, it's based on the Scheme language, but the environments and lexical scoping work the same.</li>
</ul>
<p></p></div></div><div class="book_chapter"><a name="ch1938"></a><h2 class="book_chapter_title">2 Arrays and objects</h2><p>JavaScript
 is an object language, meaning that it can manipulate objects. As we 
explained before, an object is the representation of a physical object. 
It gives a structure to data. JavaScript programs are getting 
increasingly large (particularly with HTML5 web applications and 
node.js). To structure data and the program itself (modularity) with 
objects is essential. Moreover, JavaScript considers almost everything 
to be an object (also remember that primitives have their object 
equivalents).</p>
<p>In JavaScript, objects are the encapsulation of multiple key-value 
pairs named properties. The key can be any string, even the empty string
 (and numbers). And a property value can be any JavaScript value. 
Property values can be a function - we can call this kind of property a 
method.</p>
<p></p>
<h1>Arrays</h1>
<p>The reason this section includes both arrays and objects is that 
arrays are actually just a kind of object. The Array object has some 
methods and properties in order to use this kind of object as a true 
array. Also, arrays have their own literal format.<br>Arrays can contain
 any type of value. But it is recommended that you only use one type of 
value per array because JavaScript engines cannot optimize arrays 
containing multiple types.<br>The first value of an array is referenced 
by the key 0. The last value can be be retrieved using the length 
property &nbsp;of the Array object.</p>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/array.jpg" alt="array" height="346" width="308">Source:<a href="http://classroom.w3devcampus.com/%20http:/blog.xkoder.com/2008/07/10/javascript-associative-arrays-demystified/" target="_blank">&nbsp;http://blog.xkoder.com/2008/07/10/javascript-associative-arrays-demystified/</a></p>
<h2>Array literals</h2>
<p>Array literals are the shorter way to create an array. They are represented with brackets ([]).<br>Examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 95%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">Array literal</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> tasks <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">[</span> <span style="color: #3366cc;" data-mce-mark="1">'work'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'metro'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'sleep'</span> <span style="color: #009900;" data-mce-mark="1">]</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> emptyArray <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">[</span><span style="color: #009900;" data-mce-mark="1">]</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> multiArray <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">[</span> <span style="color: #cc0000;" data-mce-mark="1">12.34</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'Aretha Franklin'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #009900;" data-mce-mark="1">[</span> <span style="color: #cc0000;" data-mce-mark="1">1</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #cc0000;" data-mce-mark="1">2</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #cc0000;" data-mce-mark="1">3</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #cc0000;" data-mce-mark="1">4</span> <span style="color: #009900;" data-mce-mark="1">]</span><span style="color: #339933;" data-mce-mark="1">,</span> 
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> sum<span style="color: #009900;" data-mce-mark="1">(</span>a<span style="color: #339933;" data-mce-mark="1">,</span> b<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">return</span> a <span style="color: #339933;" data-mce-mark="1">+</span> b<span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #009900;" data-mce-mark="1">}</span> <span style="color: #009900;" data-mce-mark="1">]</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// Avoid this</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> firstTask <span style="color: #339933;" data-mce-mark="1">=</span> tasks<span style="color: #009900;" data-mce-mark="1">[</span><span style="color: #cc0000;" data-mce-mark="1">0</span><span style="color: #009900;" data-mce-mark="1">]</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> lastTask <span style="color: #339933;" data-mce-mark="1">=</span> tasks<span style="color: #009900;" data-mce-mark="1">[</span>tasks.<span style="color: #660066;" data-mce-mark="1">length</span> <span style="color: #339933;" data-mce-mark="1">-</span> <span style="color: #cc0000;" data-mce-mark="1">1</span><span style="color: #009900;" data-mce-mark="1">]</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> result <span style="color: #339933;" data-mce-mark="1">=</span> multiArray<span style="color: #009900;" data-mce-mark="1">[</span><span style="color: #cc0000;" data-mce-mark="1">3</span><span style="color: #009900;" data-mce-mark="1">]</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #cc0000;" data-mce-mark="1">1</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #cc0000;" data-mce-mark="1">2</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<h2>Array object</h2>
<p>The Array object provides some methods for working with arrays. Some 
of these can be used in a static context, which means that we can use 
them without the need to create an instance of the object, simply 
directly on the constructor. Other methods may be used with instances of
 the Array object. To create an Array object, you can use the literal 
above or the Array constructor function:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #006600; font-style: italic;" data-mce-mark="1">// Parameters initialize the values of the array</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> tasks <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> <span data-mce-mark="1">Array</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'work'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'metro'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'sleep'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #006600; font-style: italic;" data-mce-mark="1">// Parameter initialize the length of the array</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> days <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> <span data-mce-mark="1">Array</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #cc0000;" data-mce-mark="1">365</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;" data-mce-mark="1">// Static method</span>
<span data-mce-mark="1">Array</span>.<span style="color: #660066;" data-mce-mark="1">isArray</span><span style="color: #009900;" data-mce-mark="1">(</span>tasks<span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// returns true</span>
<span style="color: #006600; font-style: italic;" data-mce-mark="1">// Instance method</span>
task.<span style="color: #660066;" data-mce-mark="1">concat</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'eat'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<h3>Some Array instance methods</h3>
<ul>
<li>myArray.concat(item1, item2, ...) returns an array which is the concatenation of myArray and arguments.</li>
<li>myArray.join(separator) returns a string containing the elements of 
myArray separated with the separator parameter (example ",").</li>
<li>myArray.slice(start, end) returns an array containing the elements 
of myArray from element start up to, but not including, element end.</li>
<li>myArray.pop() returns and remove the last element of myArray</li>
<li>myArray.push(item1, item2, ...) adds elements at the end of myArray</li>
</ul>
<p>The following methods are available in the latest versions of JavaScript:</p>
<ul>
<li>myArray.forEach(callback, context) executes the callback function 
for each element of myArray (optionally within a specified context)</li>
<li>myArray.filter(callback, context) executes the callback in order to filter myArray, then returns a subset of myArray.</li>
</ul>
<p>And also: map, reduce, every, ...</p>
<p>A JavaScript array accepts only numbers as keys. The only way to create an associative array is to create an object.</p>
<p><strong>Tricks:&nbsp;<br></strong>On chrome, if you work with multi-dimensional arrays (or object with multi-levels) there are a great feature: <a href="https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks#console-table" target="_blank">console.table</a> ! it works like console.log but the display is really improve and useful to debug:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">//On chrome, copy paste the next two lines on console </span>
<span style="color: #000066; font-weight: bold;">var</span> multiArray <span style="color: #339933;">=</span> <span style="color: #009900;">[</span><span style="color: #009900;">[</span><span style="color: #cc0000;">1</span><span style="color: #339933;">,</span><span style="color: #cc0000;">2</span><span style="color: #339933;">,</span><span style="color: #cc0000;">3</span><span style="color: #009900;">]</span><span style="color: #339933;">,</span> <span style="color: #009900;">[</span><span style="color: #3366cc;">'one'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'two'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'three'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'four'</span><span style="color: #009900;">]</span><span style="color: #339933;">,</span> <span style="color: #009900;">[</span><span style="color: #003366; font-weight: bold;">true</span><span style="color: #339933;">,</span><span style="color: #003366; font-weight: bold;">false</span><span style="color: #339933;">,</span><span style="color: #003366; font-weight: bold;">null</span><span style="color: #009900;">]</span><span style="color: #009900;">]</span><span style="color: #339933;">;</span>
console.<span style="color: #660066;">table</span><span style="color: #009900;">(</span>multiArray<span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<h3 class="r"><a href="http://www.tutorialspoint.com/cprogramming/c_multi_dimensional_arrays.htm">Multi-<span data-mce-mark="1">dimensional Arrays</span></a></h3>
<p></p>
<h1>Objects</h1>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/guitar-exploded.jpg" alt="guitar exploded" height="240" width="295"></p>
<p>Source:&nbsp;<a href="http://www.explainist.com/2009/01/16/roll-your-own-technical-illustrations/" target="_blank">http://www.explainist.com/2009/01/16/roll-your-own-technical-illustrations/</a></p>
<h2>Object literals</h2>
<p>An object literal is the simplest way to create an object in 
JavaScript. It is a list of key-value pairs enclosed in curly braces 
({}). The empty object is {}. A key and its value are separated by a 
colon (:). Key-value pairs are separated by a comma (,).<br>Example:</p>
<p></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">typeof</span> <span style="color: #009900;" data-mce-mark="1">{</span><span style="color: #009900;" data-mce-mark="1">}</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">//object</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> book <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; title<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #3366cc;" data-mce-mark="1">'Le Petit Prince'</span><span style="color: #339933;" data-mce-mark="1">,</span>
&nbsp; &nbsp; author<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #3366cc;" data-mce-mark="1">'Saint-Exupery'</span>
<span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>To get or update the value of one property of the object, the dot notation or the brackets notation (like arrays) are possible.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> title <span style="color: #339933;" data-mce-mark="1">=</span> book.<span style="color: #660066;" data-mce-mark="1">title</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> author <span style="color: #339933;" data-mce-mark="1">=</span> book<span style="color: #009900;" data-mce-mark="1">[</span><span style="color: #3366cc;" data-mce-mark="1">'author'</span><span style="color: #009900;" data-mce-mark="1">]</span><span style="color: #339933;" data-mce-mark="1">;</span>
book.<span style="color: #660066;" data-mce-mark="1">author</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'Antoine de '</span> <span style="color: #339933;" data-mce-mark="1">+</span> author<span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>If the name of a key starts with a number, the dot notation is forbidden.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">book.1stPublication <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'6 avril 1943'</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// Throws a SyntaxError</span>
book<span style="color: #009900;" data-mce-mark="1">[</span><span style="color: #3366cc;" data-mce-mark="1">'1stPublication'</span><span style="color: #009900;" data-mce-mark="1">]</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'6 avril 1943'</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// OK</span></pre>
</div>
</div>
</div>
<p></p>
<p>We can assign any value to a property, including functions and objects. Example:</p>
<p></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> bibliography <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; books<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #009900;" data-mce-mark="1">[</span><span style="color: #009900;" data-mce-mark="1">]</span><span style="color: #339933;" data-mce-mark="1">,</span>
&nbsp; &nbsp; author<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #009900;" data-mce-mark="1">{</span> 
&nbsp; &nbsp; &nbsp; &nbsp; firstName<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #3366cc;" data-mce-mark="1">'Antoine'</span><span style="color: #339933;" data-mce-mark="1">,</span> 
&nbsp; &nbsp; &nbsp; &nbsp; lastName<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #3366cc;" data-mce-mark="1">'De Saint-Exupery'</span> 
&nbsp; &nbsp; <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">,</span>
&nbsp; &nbsp; addBook<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span>book<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span> bibliography.<span style="color: #660066;" data-mce-mark="1">books</span>.<span style="color: #660066;" data-mce-mark="1">push</span><span style="color: #009900;" data-mce-mark="1">(</span>book<span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #009900;" data-mce-mark="1">}</span>
<span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> total <span style="color: #339933;" data-mce-mark="1">=</span> bibliography.<span style="color: #660066;" data-mce-mark="1">books</span>.<span style="color: #660066;" data-mce-mark="1">length</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> author <span style="color: #339933;" data-mce-mark="1">=</span> bibliography.<span style="color: #660066;" data-mce-mark="1">author</span>.<span style="color: #660066;" data-mce-mark="1">firstName</span> <span style="color: #339933;" data-mce-mark="1">+</span> <span style="color: #3366cc;" data-mce-mark="1">' '</span> <span style="color: #339933;" data-mce-mark="1">+</span> bibliography.<span style="color: #660066;" data-mce-mark="1">author</span>.<span style="color: #660066;" data-mce-mark="1">lastName</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/ekopun/3/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<h2>References</h2>
<p>First of all, we have to define what "reference" means. Unlike a 
pointer variable, which contains the actual address of an object within 
the memory, a reference variable is an alias to a variable. This means 
that when you modify a reference variable, the original variable is 
modified too. This is because the two variables reference (i.e. point 
to) the same object.<br>When you define a variable, this is what happens:<br>If its value is a primitive value (number, string, or boolean), the variable contains this value directly.<br>If
 its value is an object, the variable contains the memory address of the
 object. We say that this variable "points to" an object (or references 
this object). Accessing to the variable will automatically resolve the 
reference, meaning that the value of the variable is the referenced 
object.</p>
<p>Examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #006600; font-style: italic;" data-mce-mark="1">// Defining two variables</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> x <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #cc0000;" data-mce-mark="1">2</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// the variable x contains the primitive datum 2</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> y <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span> a<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">2</span> <span style="color: #009900;" data-mce-mark="1">}</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// The variable y references the object {a: 2}</span>
&nbsp;
<span style="color: #006600; font-style: italic;" data-mce-mark="1">// "Copying" two variables</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> x2 <span style="color: #339933;" data-mce-mark="1">=</span> x<span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> y2 <span style="color: #339933;" data-mce-mark="1">=</span> y<span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> y3 <span style="color: #339933;" data-mce-mark="1">=</span> y<span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;" data-mce-mark="1">// Modifying copied variables</span>
x2 <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #cc0000;" data-mce-mark="1">3</span><span style="color: #339933;" data-mce-mark="1">;</span>
y2 <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span> a<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">3</span> <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;" data-mce-mark="1">// Check</span>
x<span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 2 &lt;- x is not modified because it contains a primitive value</span>
y<span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// { a: 2 } &lt;- y is not modified because y2 does not point to same object</span>
y3.<span style="color: #660066;" data-mce-mark="1">a</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #cc0000;" data-mce-mark="1">4</span><span style="color: #339933;" data-mce-mark="1">;</span>
y<span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// { a: 4 } &lt;- The object referenced by "y" and "y3" is modified</span></pre>
</div>
</div>
</div>
<p></p>
<p>Of course, these rules also apply to the properties of objects.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> driver <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; name<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #3366cc;" data-mce-mark="1">'Jean'</span>
<span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> car <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; color<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #3366cc;" data-mce-mark="1">'red'</span><span style="color: #339933;" data-mce-mark="1">,</span>
&nbsp; &nbsp; driver<span style="color: #339933;" data-mce-mark="1">:</span> driver
<span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
driver.<span style="color: #660066;" data-mce-mark="1">name</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'Albert'</span><span style="color: #339933;" data-mce-mark="1">;</span>
car.<span style="color: #660066;" data-mce-mark="1">driver</span>.<span style="color: #660066;" data-mce-mark="1">name</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 'Albert'</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/akital/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p>JavaScript is a "pass by value" language, unlike some other 
languages, which are "pass by reference" languages. This means that when
 you pass a variable to a function as argument, the value of the 
variable is copied into the argument.</p>
<p>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> x <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #cc0000;" data-mce-mark="1">2</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> sum<span style="color: #009900;" data-mce-mark="1">(</span>a<span style="color: #339933;" data-mce-mark="1">,</span> b<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; a <span style="color: #339933;" data-mce-mark="1">=</span> a <span style="color: #339933;" data-mce-mark="1">+</span> b<span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">return</span> a<span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
sum<span style="color: #009900;" data-mce-mark="1">(</span>x<span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #cc0000;" data-mce-mark="1">3</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// returns 5</span>
x<span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 2 &lt;- but x equals 2</span></pre>
</div>
</div>
</div>
<p></p>
<p>When working with objects, the reference of the object is copied into
 the argument. That means you can modify the referenced object. But if 
you change the reference (for example by assigning a new object), the 
original variable (which now points to another object) will not be 
modified.</p>
<p>Example 1:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">Modifying an object</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> obj <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span> x<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">2</span> <span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> add<span style="color: #009900;" data-mce-mark="1">(</span>a<span style="color: #339933;" data-mce-mark="1">,</span> b<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; a.<span style="color: #660066;" data-mce-mark="1">x</span> <span style="color: #339933;" data-mce-mark="1">+=</span> b<span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
add<span style="color: #009900;" data-mce-mark="1">(</span>obj<span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #cc0000;" data-mce-mark="1">3</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
obj.<span style="color: #660066;" data-mce-mark="1">x</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 5 &lt;- The referenced object is modified</span></pre>
</div>
</div>
</div>
<p></p>
<p>Example 2:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">Modifying a reference</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> obj <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span> x<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">2</span> <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> addAndSet<span style="color: #009900;" data-mce-mark="1">(</span>a<span style="color: #339933;" data-mce-mark="1">,</span> b<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> addition <span style="color: #339933;" data-mce-mark="1">=</span> a.<span style="color: #660066;" data-mce-mark="1">x</span> <span style="color: #339933;" data-mce-mark="1">+</span> b<span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp; &nbsp; a <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span> x<span style="color: #339933;" data-mce-mark="1">:</span> addition <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
addAndSet<span style="color: #009900;" data-mce-mark="1">(</span>obj<span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #cc0000;" data-mce-mark="1">3</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
obj.<span style="color: #660066;" data-mce-mark="1">x</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">/* 2 &lt;- The referenced object is not modified
because at the end of the function the variable "obj"
&nbsp;and the variable "a" are not referencing the same object.*/</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/oritav/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<h2>Object</h2>
<h3>New Object</h3>
<p>Another way to create objects is to use the Object constructor 
function and the keyword new. In JavaScript, it is possible to add 
properties to an object after its creation.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> tree <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> <span data-mce-mark="1">Object</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
tree.<span style="color: #660066;" data-mce-mark="1">family</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'conifer'</span><span style="color: #339933;" data-mce-mark="1">;</span>
tree.<span style="color: #660066;" data-mce-mark="1">name</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'pine'</span><span style="color: #339933;" data-mce-mark="1">;</span>
tree.<span style="color: #660066;" data-mce-mark="1">age</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #cc0000;" data-mce-mark="1">43</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>The Object function accepts one argument. If the argument is a 
primitive value, then new Object returns the equivalent object of this 
primitive. If the argument is already an object, then the function 
returns the parameter directly.</p>
<p><br><a href="http://jsbin.com/ejudam/3/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p></p>
<h3>Object.create</h3>
<p>Objects can also be created with create method of the constructor 
function Object. The advantage of this method compared with the above is
 that we can specify a prototype and configure properties.<br>The syntax is:<br>Object.create(prototype, properties)<br>The
 parameter prototype can be any object or null. The properties parameter
 is optional and may be an object containing properties (and their 
configuration).<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> david <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span> age<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">35</span> <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> angela <span style="color: #339933;" data-mce-mark="1">=</span> <span data-mce-mark="1">Object</span>.<span style="color: #660066;" data-mce-mark="1">create</span><span style="color: #009900;" data-mce-mark="1">(</span>david<span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #009900;" data-mce-mark="1">{</span>score<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #009900;" data-mce-mark="1">{</span>value<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">214445</span><span style="color: #339933;" data-mce-mark="1">,</span>writable<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #003366; font-weight: bold;" data-mce-mark="1">false</span> <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #006600; font-style: italic;" data-mce-mark="1">// writable false prevents to update the value</span>
&nbsp;
angela.<span style="color: #660066;" data-mce-mark="1">score</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 214445</span>
angela.<span style="color: #660066;" data-mce-mark="1">age</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 35</span>
angela.<span style="color: #660066;" data-mce-mark="1">score</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #cc0000;" data-mce-mark="1">3</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// writable false</span>
angela.<span style="color: #660066;" data-mce-mark="1">score</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 214445</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/uxopix/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<h3>Object "static" methods</h3>
<p>Like the method create, the constructor function Object provides 
other "static" methods which can be useful when working with objects.</p>
<ul>
<li>Object.defineProperty(obj, prop, attributes) allows you to add a 
property with the name "prop" configured by "attributes" to the object 
"obj".</li>
<li>Object.keys(obj) lists names of the enumerable properties of obj</li>
<li>Object.getOwnPropertyNames(obj) lists the names of the properties of obj</li>
<li>Object.getPrototypeOf(obj) returns the prototype of obj</li>
</ul>
<p><a href="http://jsbin.com/opitob/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<h3>Object "instance" methods</h3>
<p>Created objects inherits from Object.prototype. That means we can use
 properties (i.e. methods) of the object Object.prototype. Like "static"
 methods, some methods of this object can be useful.</p>
<ul>
<li>obj.hasOwnProperty(prop) returns true if the value of prop is the 
name of one of the direct properties of obj (i.e. properties of the 
chained prototypes are not evaluated)</li>
<li>obj.toString() returns a string representation of obj. The "+" 
operator will use the toString method only if obj.valueOf() is not 
defined.</li>
</ul>
<p><a href="http://jsbin.com/amapux/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p></p>
<h2>Prototypes</h2>
<p>This section is important for understanding how objects work in 
JavaScript. The first thing to know is that object prototypes and the 
property "prototype" of a function (functions are objects) are 
different. So you must not confuse the two. This section describes the 
object's prototype.</p>
<p>Each object has a prototype. A prototype can be either null or an 
object. This means that the prototype of an object also has its own 
prototype, and so on, until you reach null. This is called the <em>prototype chain</em> of an object. And finally, an object inherits the properties of its prototype chain.</p>
<p>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;">var</span> apartment <span style="color: #339933;">=</span> <span style="color: #009900;">{</span> surface<span style="color: #339933;">:</span> <span style="color: #cc0000;">100</span> <span style="color: #009900;">}</span><span style="color: #339933;">;</span>
<span style="color: #000066; font-weight: bold;">var</span> house <span style="color: #339933;">=</span> <span>Object</span>.<span style="color: #660066;">create</span><span style="color: #009900;">(</span>apartment<span style="color: #339933;">,</span> <span style="color: #009900;">{</span> gardenSurface<span style="color: #339933;">:</span> <span style="color: #009900;">{</span> value<span style="color: #339933;">:</span> <span style="color: #cc0000;">400</span> <span style="color: #009900;">}</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
house.<span style="color: #660066;">surface</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// 100</span>
<span style="color: #006600; font-style: italic;">// house inherits the property surface of its prototype apartment</span></pre>
</div>
</div>
</div>
<p></p>
<p>The prototype of an object cannot be modified, but it is possible to override its properties. Try the following example:<br><a href="http://jsbin.com/uwumiq/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p>Every property of the chained prototypes is inherited.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_4cs" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="_4cs" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">var castle <span style="color: #000080;" data-mce-mark="1">=</span> Object.<span style="color: #66cc66;" data-mce-mark="1">create</span><span style="color: #000080;" data-mce-mark="1">(</span>house, <span style="color: #000080;" data-mce-mark="1">{</span> dungeonHeight: <span style="color: #000080;" data-mce-mark="1">{</span> value: <span style="color: #cc66cc;" data-mce-mark="1">30</span> <span style="color: #000080;" data-mce-mark="1">}</span><span style="color: #000080;" data-mce-mark="1">}</span><span style="color: #000080;" data-mce-mark="1">)</span>;
&nbsp;
castle.<span style="color: #66cc66;" data-mce-mark="1">surface</span>; <span style="color: #008000;" data-mce-mark="1">// 100</span></pre>
</div>
</div>
</div>
<p></p>
<p>Let's look at this diagram:</p>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/prototype-chain.png" alt="prototype chain" height="239" width="373"></p>
<p>Source:&nbsp;http://fgribreau.com/articles/voyage-au-coeur-de-javascript.html</p>
<p dir="ltr">Often, the prototype of an object is displayed as __proto__
 within an object. In the above scheme, the objects b and c inherit from
 the object a which inherits from the Object.prototype which inherits 
from null. So we can call the methods b.calculate() and b.toString().</p>
<p dir="ltr">There are two important reasons to use prototypes. The 
first is to avoid repeating long code fragments. The second is that 
prototypes are simple references to the original object, meaning less 
memory and less time.</p>
<h2 dir="ltr">Constructor functions</h2>
<p>The last way to create objects is constructor functions. In 
JavaScript, you can call a function by adding parentheses behind it or 
with the keyword "new". A function called with "new" is named a 
constructor function.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> MyModel<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
<span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> model <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> MyModel<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// MyModel is used as constructor function</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> result <span style="color: #339933;" data-mce-mark="1">=</span> MyModel<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// MyModel called as a function</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/analeh/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p>Within the body of a constructor function, the keyword "this" 
references the created object. Thus we can define properties of the 
object within the function body.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> Car<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span>.<span style="color: #660066;" data-mce-mark="1">color</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'red'</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span>.<span style="color: #660066;" data-mce-mark="1">brand</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'HotWheels'</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> myFirstCar <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> Car<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
myFirstCar.<span style="color: #660066;" data-mce-mark="1">brand</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 'HotWheels'</span>
&nbsp;</pre>
</div>
</div>
</div>
<p><br>Like any function, a constructor function accepts arguments.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> Car<span style="color: #009900;" data-mce-mark="1">(</span>brand<span style="color: #339933;" data-mce-mark="1">,</span> model<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span>.<span style="color: #660066;" data-mce-mark="1">brand</span> <span style="color: #339933;" data-mce-mark="1">=</span> brand <span style="color: #339933;" data-mce-mark="1">||</span> <span style="color: #3366cc;" data-mce-mark="1">'HotWheels'</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span>.<span style="color: #660066;" data-mce-mark="1">model</span> <span style="color: #339933;" data-mce-mark="1">=</span> color <span style="color: #339933;" data-mce-mark="1">||</span> <span style="color: #3366cc;" data-mce-mark="1">'Porsche 911'</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> mySecondCar <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> Car<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'Citröen'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'2CV'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
mySecondCar.<span style="color: #660066;" data-mce-mark="1">model</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'2CV'</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>The built-in property "prototype" of the function object may be 
overridden in the case of a constructor function.&nbsp;DO NOT CONFUSE 
the prototype property of a function with the object's prototype 
(__PROTO__). The prototype property can be an object which will become 
the prototype for the object created.<br>Example:<br><br></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> Plane<span style="color: #009900;" data-mce-mark="1">(</span>seats<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span> 
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span>.<span style="color: #660066;" data-mce-mark="1">seats</span> <span style="color: #339933;" data-mce-mark="1">=</span> seats <span style="color: #339933;" data-mce-mark="1">||</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span>.<span style="color: #660066;" data-mce-mark="1">seats</span><span style="color: #339933;" data-mce-mark="1">;</span> 
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
Plane.<span style="color: #000066; font-weight: bold;" data-mce-mark="1">prototype</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; seats<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">2</span><span style="color: #339933;" data-mce-mark="1">,</span>
&nbsp; &nbsp; wingspan<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">20</span>
<span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> myLittlePlane <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> Plane<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
myLittlePlane.<span style="color: #660066;" data-mce-mark="1">wingspan</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 20</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> myCrashingPlane <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> Plane<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #cc0000;" data-mce-mark="1">300</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
myCrashingPlane.<span style="color: #660066;" data-mce-mark="1">seats</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 300</span>
myCrashingPlane.<span style="color: #660066;" data-mce-mark="1">wingspan</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// 20</span>
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/udafop/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p>Using prototypes is a good practice because the prototype object is created once shared between instances.</p>
<p>In order to enhance readability, we recommend capitalizing the first letter of a constructor function.</p>
<h2>This</h2>
<p>"this" is a special keyword determined when entering a new execution 
context. In the global execution context, "this" is set to the global 
object (for example in a browser, "window" or in node "global"). Because
 "this" is not a variable, it cannot be modified.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> g<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; console.<span style="color: #660066;" data-mce-mark="1">log</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
g<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// global object</span></pre>
</div>
</div>
</div>
<p></p>
<p><br>Within the execution context of a function, "this" may have two 
values. If the function is the value of an object's property, the value 
of "this" is the object. If the function is not a member of an object, 
"this" references the global object (or undefined in strict mode).<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> foo <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; m<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span> console.<span style="color: #660066;" data-mce-mark="1">log</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// member of foo</span>
&nbsp; &nbsp; n<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> x <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span> console.<span style="color: #660066;" data-mce-mark="1">log</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// not member</span>
&nbsp; &nbsp; <span style="color: #009900;" data-mce-mark="1">}</span>
<span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
foo.<span style="color: #660066;" data-mce-mark="1">m</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// foo</span>
foo.<span style="color: #660066;" data-mce-mark="1">n</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// global object</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/okaqup/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p></p>
<p></p>
<p>Reading:&nbsp;<br><a href="http://unschooled.org/2012/03/understanding-javascript-this/" target="_blank">http://unschooled.org/2012/03/understanding-javascript-this/</a></p>
<p></p>
<p></p>
<p></p>
<table style="float: right; margin-right: 10px;" border="0">
<tbody>
<tr>
<td>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/stack.jpg" alt="stack" style="float: left;" height="130" width="130">Execution contexts are stored&nbsp;<br>in a simple LIFO (last in last out).</p>
<p>(Picture source: http://www.baby-lux.com/rattle-stack-bright-starts.html)&nbsp;&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h2>Context switch (advanced)</h2>
<p>Each function is executed in its proper execution context, but 
JavaScript offers the possibility to modify this execution context. the 
value of "this", often called the context object, can be specified. 
Depending on how the function is called (as a function or a 
constructor), its context changes.</p>
<p>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> f<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; console.<span style="color: #660066;" data-mce-mark="1">log</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
f<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// global object</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> f<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// created object</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> obj <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span> f<span style="color: #339933;" data-mce-mark="1">:</span> f <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
obj.<span style="color: #660066;" data-mce-mark="1">f</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// obj</span></pre>
</div>
</div>
</div>
<p></p>
<p>The Function object also offers methods to switch the execution context of the function. Those methods are:<br>func.apply(context, arguments) calls the function func within the context "context" with the array of arguments "arguments"<br>func.call(context, arg1, arg2, ...) calls the function func within the context "context" with the arguments arg1, arg2, ...<br>func.bind(context,
 arg1, arg2, ...) returns a new function which will be called within the
 context "context" and the arguments. This method has been available 
since ECMAScript 5.</p>
<p><a href="http://jsbin.com/alobat/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p><strong>Exercise (advanced)</strong><br>In the following exercise, we want to add to a number only the positive odd values in the parameters given.<br>We saw earlier that the <em>arguments</em>
 variable of a function may be an object. But now we want to use this 
variable as an array. Complete the following piece of code.<br>[Tip: use the method call and the slice method for an Array instance.]</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span> addOdd<span style="color: #009900;" data-mce-mark="1">(</span>result<span style="color: #339933;" data-mce-mark="1">,</span> number<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; result <span style="color: #339933;" data-mce-mark="1">=</span> result <span style="color: #339933;" data-mce-mark="1">||</span> <span style="color: #cc0000;" data-mce-mark="1">0</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> numbers <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #339933;" data-mce-mark="1">???;</span>
&nbsp; &nbsp; numbers.<span style="color: #660066;" data-mce-mark="1">forEach</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span>n<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">if</span> <span style="color: #009900;" data-mce-mark="1">(</span>n <span style="color: #339933;" data-mce-mark="1">%</span> <span style="color: #cc0000;" data-mce-mark="1">2</span> <span style="color: #339933;" data-mce-mark="1">===</span> <span style="color: #cc0000;" data-mce-mark="1">1</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// Test parity</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result <span style="color: #339933;" data-mce-mark="1">+=</span> n<span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp; &nbsp; <span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">return</span> result<span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/ahiyof/4/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a>&nbsp;<a href="http://jsbin.com/ahiyof/6/edit"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-solution_002.jpg" alt="solution" style="margin-left: 20px;" height="30" width="160"></a></p>
<h2>Inheritance (advanced)</h2>
<p>Thanks to object prototypes, an object can inherit the properties of another object&nbsp;and its prototype chain.</p>
<p>Simple example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> plane <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; wingspan<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">30</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> Jet <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span><span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
Jet.<span style="color: #000066; font-weight: bold;" data-mce-mark="1">prototype</span> <span style="color: #339933;" data-mce-mark="1">=</span> plane<span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>In this example, an object created with Jet inherits from the object <em>plane</em>,&nbsp;which inherits from Object.prototype.</p>
<p>If plane is a constructor function, we have this:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> Plane <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span><span style="color: #009900;" data-mce-mark="1">}</span>
Plane.<span style="color: #000066; font-weight: bold;" data-mce-mark="1">prototype</span>.<span style="color: #660066;" data-mce-mark="1">wingspan</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #cc0000;" data-mce-mark="1">30</span><span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> Jet <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span><span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">;</span>
Jet.<span style="color: #000066; font-weight: bold;" data-mce-mark="1">prototype</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> Plane<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
Jet.<span style="color: #000066; font-weight: bold;" data-mce-mark="1">prototype</span>.<span style="color: #660066;" data-mce-mark="1">engine</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #3366cc;" data-mce-mark="1">'rocket'</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>In the examples above, the constructor functions do nothing. If they 
do, we may call the constructor of the inherited object, but in the 
current context!<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> Plane <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span>seats<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">if</span> <span style="color: #009900;" data-mce-mark="1">(</span>seats<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span>.<span style="color: #660066;" data-mce-mark="1">seats</span> <span style="color: #339933;" data-mce-mark="1">=</span> seats<span style="color: #339933;" data-mce-mark="1">;</span>
&nbsp; &nbsp; <span style="color: #009900;" data-mce-mark="1">}</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
Plane.<span style="color: #000066; font-weight: bold;" data-mce-mark="1">prototype</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; seats<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">2</span><span style="color: #339933;" data-mce-mark="1">,</span>
&nbsp; &nbsp; wingspan<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #cc0000;" data-mce-mark="1">30</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> Jet <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">function</span><span style="color: #009900;" data-mce-mark="1">(</span>seats<span style="color: #009900;" data-mce-mark="1">)</span> <span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; Plane.<span style="color: #660066;" data-mce-mark="1">call</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #000066; font-weight: bold;" data-mce-mark="1">this</span><span style="color: #339933;" data-mce-mark="1">,</span> seats<span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp;
Jet.<span style="color: #000066; font-weight: bold;" data-mce-mark="1">prototype</span> <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> Plane<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p></p>
<h2>Built-in objects</h2>
<p>We have seen before a few built-in objects which wrap primitive 
values such as Number and String, and also the Array and Object objects.
 In reality, those built-ins should not be used directly. Generally, we 
use their literal notation, which provides shorthands and readability.</p>
<p>There are a few other built-in objects that you will probably use frequently.</p>
<h3>Date</h3>
<p>This object lets you work with date and time values such as 
timestamps and formatted dates. You can create a date in a few different
 ways:</p>
<ul>
<li>new Date(value), where value is an integer value representing the time in milliseconds since 1 January 1970 00:00:00 UTC</li>
<li>new Date(dateString), where dateString is a string value. This 
string will be parsed with the date's parse method (i.e. compliant with 
ISO 8601: 'YYYY-MM-DDTHH:mm:ss.sssZ'). "T" represents the beginning of 
the time element. "Z" rep<img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/lapin_alice.jpg" alt="date object" style="float: right;" height="187" width="257">resents UTC and could be replaced per "+" or "-" followed by a time expression HH:mm</li>
<li>new Date(year, month, [date, hours, minutes, seconds, milliseconds]), where every argument is an integer</li>
<li>new Date() creates a date object with the current time (UTC)</li>
</ul>
<p>Examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> now <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> <span data-mce-mark="1">Date</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> noel <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> <span data-mce-mark="1">Date</span><span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'2013-12-25T00:00+01:00'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>Date methods:</p>
<ul>
<li>Date.now() returns the numeric value corresponding to the current time (i.e. milliseconds since 1 January 1970 00:00:00 UTC)</li>
<li>Date.parse(dateString) parses dateString then returns the number of milliseconds since 1 January 1970 00:00:00 UTC</li>
<li>Date.UTC(year, month, [date, hours, minutes, seconds, milliseconds])
 the number of milliseconds since 1 January 1970 00:00:00 UTC</li>
</ul>
<p>Some Date instance methods:</p>
<ul>
<li>dateInstance.getFullYear() returns the year value of dateInstance converted from UTC to local time.</li>
<li>dateInstance.getUTCFullYear() returns the year value of dateInstance.</li>
<li>dateInstance.getMonth()</li>
<li>dateInstance.getTime() returns the number of milliseconds since 1 January 1970 00:00:00 UTC</li>
<li>dateInstance.setTime(value)</li>
<li>dateInstance.setMinutes(value)</li>
</ul>
<h3>Math</h3>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/geometry.png" alt="object math" style="float: right;" height="188" width="259"></p>
<p>The properties and methods of the Math object allow you to work with 
mathematical constants and functions. Math is not a constructor, so it 
has only "static" properties and methods.<br>Some properties:</p>
<ul>
<li>Math.PI is the number value for pi (approximately 3.14159)</li>
<li>Math.E is the number value for e (approximately 2.71)</li>
<li>Math.ln10 for the natural logarithm of 10, approximately 2.30</li>
<li>Math.sqrt2 equals approximately 1.414</li>
</ul>
<p>Some methods:</p>
<ul>
<li>Math.abs(x) returns the absolute value of x</li>
<li>Math.cos(x) returns the cosine of x (x is a radian)</li>
<li>Math.exp(x) returns the exponential function of x</li>
<li>Math.floor(x) returns the closest integer lower than x</li>
<li>Math.max(x, y, z ...) returns the largest value from from provided arguments</li>
<li>Math.pow(x, y) returns an approximation to the result of raising x to the power y</li>
</ul>
<h3>RegExp</h3>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/regex.png" alt="automate regex" height="163" width="329"></p>
<p>A RegExp (short for regular expression) is a pattern which describes a
 set of possible characters. It lets you manipulate a string by matching
 parts of the string.<br>This RegExp object creates a regular expression from a pattern and some flags.<br>Syntax:<br>new RegExp(pattern, flags)<br>pattern is the text which will define the regular expression<br>flags can be the combination of those characters:</p>
<ul>
<li>"i" for ignore case</li>
<li>"g" for global search. This means that all parts verifying the pattern will be matched (not only the first)</li>
<li>"m" for multline search. This means that each line has a beginning and an end.</li>
</ul>
<p>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> reg <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> RegExp<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'a'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// will match the first character 'a' or 'A' in a string</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> reg <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> RegExp<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'a'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'i'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// will match the first character 'a' or 'A' in a string</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> reg <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> RegExp<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'a'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'gi'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// will match all the characters 'a' or 'A' in a string</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> reg <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> RegExp<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'^a'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'gim'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// will match all the characters 'a' or 'A' at the beginning of each line in a string.</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/aqigic/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
<p>Regular expressions also have a literal notation. Its syntax is:<br>/pattern/flags<br>pattern and flags are text but not strings (without ' or ").<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> reg <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009966; font-style: italic;" data-mce-mark="1">/abc/</span><span style="color: #339933;" data-mce-mark="1">;</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> reg <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009966; font-style: italic;" data-mce-mark="1">/a/gi</span><span style="color: #339933;" data-mce-mark="1">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>Some characters in the pattern have a special meaning for the 
interpreter. If you want to search for them in a string, they must be 
escaped with the backslash character (\).<br>Examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> reg <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #009966; font-style: italic;" data-mce-mark="1">/a\/b/i</span><span style="color: #339933;" data-mce-mark="1">;</span> <span style="color: #006600; font-style: italic;" data-mce-mark="1">// Will match the pattern "a/b" in a string</span>
<span style="color: #000066; font-weight: bold;" data-mce-mark="1">var</span> reg <span style="color: #339933;" data-mce-mark="1">=</span> <span style="color: #000066; font-weight: bold;" data-mce-mark="1">new</span> RegExp<span style="color: #009900;" data-mce-mark="1">(</span><span style="color: #3366cc;" data-mce-mark="1">'a<span style="color: #000099; font-weight: bold;" data-mce-mark="1">\\</span>b'</span><span style="color: #339933;" data-mce-mark="1">,</span> <span style="color: #3366cc;" data-mce-mark="1">'i'</span><span style="color: #009900;" data-mce-mark="1">)</span><span style="color: #339933;" data-mce-mark="1">;</span><span style="color: #006600; font-style: italic;" data-mce-mark="1">// Will match the pattern "a\b" in a string</span></pre>
</div>
</div>
</div>
<p></p>
<p>Some special characters:</p>
<div dir="ltr">
<table frame="border" style="border: 1px solid #000000; margin-left: 20px;" cellpadding="5" cellspacing="0"><colgroup><col width="61"><col width="563"></colgroup>
<tbody>
<tr>
<td>
<p dir="ltr">\</p>
</td>
<td>
<p dir="ltr">Escapes the next character, meaning that the next character will not be considered as a special character.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">^</p>
</td>
<td>
<p dir="ltr">Matches the beginning of the string (or the line with the “m” flag).</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">$</p>
</td>
<td>
<p dir="ltr">Matches the end of the string (or the line with the “m” flag).</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">*</p>
</td>
<td>
<p dir="ltr">Matches the preceding character 0 or more times.</p>
<p dir="ltr">Example: /eg*/ will match “egg” in “lay an egg” and “e” in “A chicken”.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">+</p>
</td>
<td>
<p dir="ltr">Matches the preceding character 1 or more times.</p>
<p dir="ltr">Example: /eg+/ will match “egg” in “lay an egg” and nothing in “A chicken”.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">?</p>
</td>
<td>
<p dir="ltr">Matches the preceding character 0 or 1 time.</p>
<p dir="ltr">Example: /eg+/ will match “eg” in “lay an egg” and “e” in “A chicken”.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">.</p>
</td>
<td>
<p dir="ltr">Matches any single character.</p>
<p dir="ltr">Example: /e.g/ will match “egg” in “lay an egg” and nothing in “A chicken”.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">{n}</p>
</td>
<td>
<p dir="ltr">Matches the preceding character n times.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">x|y</p>
</td>
<td>
<p dir="ltr">Matches either the character x or the character y.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">(x)</p>
</td>
<td>
<p dir="ltr">Matches x and remembers the match.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">[abcd]</p>
<p dir="ltr">[a-d]</p>
</td>
<td>
<p dir="ltr">Matches a character set. With an hyphen, you can match a range of character.</p>
<p dir="ltr">The patterns “[abcd]” and “[a-d]” are equivalent.</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">\t</p>
</td>
<td>
<p dir="ltr">Matches a tab.</p>
</td>
</tr>
</tbody>
</table>
<p></p>
<h3>JSON</h3>
<h3></h3>
<p>JSON (short for JavaScript object notation) is a human-readable data 
interchange format. JSON was specified by Douglas Crockford and 
standardized as RFC 4627 (<a href="http://tools.ietf.org/html/rfc4627" target="_blank">http://tools.ietf.org/html/rfc4627</a>).<br>Like
 XML, it allows you to exchange data between a client and server. And as
 its name suggests, its syntax is inspired by JavaScript, especially 
from the object and array literals. That makes it very handy to use 
within a JavaScript application.<br>JSON data example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #009900;" data-mce-mark="1">{</span>
&nbsp; &nbsp; articles<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #009900;" data-mce-mark="1">[</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #009900;" data-mce-mark="1">{</span>title<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #3366cc;" data-mce-mark="1">'First Article'</span><span style="color: #339933;" data-mce-mark="1">,</span> published<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #003366; font-weight: bold;" data-mce-mark="1">true</span><span style="color: #009900;" data-mce-mark="1">}</span><span style="color: #339933;" data-mce-mark="1">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #009900;" data-mce-mark="1">{</span>title<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #3366cc;" data-mce-mark="1">'Second Article'</span><span style="color: #339933;" data-mce-mark="1">,</span> published<span style="color: #339933;" data-mce-mark="1">:</span> <span style="color: #003366; font-weight: bold;" data-mce-mark="1">true</span><span style="color: #009900;" data-mce-mark="1">}</span>
&nbsp; &nbsp; <span style="color: #009900;" data-mce-mark="1">]</span>
<span style="color: #009900;" data-mce-mark="1">}</span></pre>
</div>
</div>
</div>
<p></p>
<p>JavaScript's JSON object lets you work properly with this format. 
Because JSON is very close to JavaScript syntax, we could use the eval 
method (more about eval in the "Dangers and Good practices" section) to 
transform a JSON formatted data into a JavaScript object. But we 
recommend using the JSON object instead.</p>
<p>JSON object methods:</p>
<ul>
<li>JSON.parse(text [, reviver]) parses a JSON formatted data string and returns a JavaScript value.</li>
<li>JSON.stringify(value [, replacer, [ space]]) returns a JSON formatted string from the provided value.</li>
</ul>
<h2>Exercises</h2>
<h3>Exercise 1: MP3 Player</h3>
<p>We want to create a little JavaScript MP3 Player. Before playing 
music, we must create the object that will manage tracks and user 
actions. First, we'll create a simple constructor function named 
MP3Player. Then we will add some properties and methods to its 
prototype. Our MP3 player needs:</p>
<ul>
<li>A track list</li>
<li>To know the track currently playing</li>
<li>To play or pause the current track (for the exercise, those methods are just logging the current track or 'paused')</li>
<li>To change the current track to the next or the previous track</li>
</ul>
<p>Once we've done this, we will modify the constructor function in 
order to pass a track list when creating a player. Then we'll add a 
method to set a new track list.</p>
<p>We also need to create an object Track. Our object track needs:</p>
<ul>
<li>a title</li>
<li>a singer (only its name)</li>
<li>a link to the mp3</li>
</ul>
<p>This object needs a constructor to create a new track with its three properties filled.</p>
<p><a href="http://jsbin.com/ixixek/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/ixixek/27/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-solution_002.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"><br>(</a>thanks to Timothy O'Hare for the fix)</p>
<h3>Exercise 2: Parental control (Advanced)</h3>
<p>In order to avoid children listening to our magic playlist, we have 
to add a security code. Before playing a song, the user must provide the
 security code. But we don't want the security code to be accessible 
(example: player.pinCode; // undefined). The password is created when 
the mp3 player is created. Once the password is provided by the user, it
 will not be required again. So in our new secured MP3 player we need:</p>
<ul>
<li>A private password</li>
<li>A private state</li>
<li>To set the password when is created</li>
<li>To check password</li>
<li>To check if the user is allowed before playing</li>
</ul>
<p><a href="http://jsbin.com/egomim/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit_003.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a><a href="http://jsbin.com/egomim/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-solution_002.jpg" alt="jsbin" style="margin-left: 20px;" height="30" width="160"></a></p>
</div></div><div class="book_chapter"><a name="ch1937"></a><h2 class="book_chapter_title">3 Dangers and good practices</h2><p dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/good-bad-practices.gif" alt="good and bad practices" height="266" width="440"></p>
<p dir="ltr">Now, we will sum up this chapter with some good practices 
and tips that it is good to have, and some dangers that it is good to 
know.&nbsp;</p>
<p dir="ltr"><em>"The main trick with JavaScript is to avoid taking the 
easy path. JavaScript is a wonderfully versatile language and as the 
environment it is executed in is very forgiving it is easy to write 
sloppy code that seemingly does the job. This same code however will 
come back to bite you a few months down the line."</em></p>
<p dir="ltr"><em><a href="http://www.w3.org/wiki/JavaScript_best_practices" needshandler="needsHandler">http://www.w3.o<wbr>rg/wiki/JavaScr<wbr>ipt_best_practi<wbr>ces</a></em></p>
<p>Maybe to some of you, what you are about to read will appear very 
obvious, but it is always good to reread this. On the other hand, if you
 don't understand some parts you can reread the corresponding 
chapters.&nbsp;We will also answer some&nbsp;classical questions which 
come up often.</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" height="30" width="31">&nbsp;Indent your code</h3>
<p>It is the rule number 1 !&nbsp;<br>The best is to indent your code by
 yourself (without automatic tools ), by this way you will be able to 
detect missing keywords, missing&nbsp;curly brackets, 
missing&nbsp;semicolons, colons &nbsp;....&nbsp;<br><br>JavaScript can be hard to debug so you have to be strict with yourself!</p>
<p>Interesting link to check if your code is well formed:<br><em>Beautify, unpack or deobfuscate JavaScript and HTML, make JSON/JSONP readable, etc.<br></em><em><a href="http://jsbeautifier.org/" target="_blank">http://jsbeautifier.org/</a></em></p>
<p class="r">Indenting your code is the best way to improve the 
readability of your code,to avoid typos, and so to gain debugging time 
!&nbsp;<br><br></p>
<p class="r">So, keep&nbsp;your code&nbsp;readable with indenting !</p>
<p class="r"><a href="http://www.dreamincode.net/forums/topic/156689-improving-the-readability-of-your-code/"></a></p>
<p><em><a href="http://jsbeautifier.org/" target="_blank">&nbsp;</a></em></p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Equality and falsity</h3>
<p dir="ltr">Use strict equal (===) instead of equal (==)</p>
<p>&nbsp;“==” permit to check equality between two operands. But some 
conversions can be applied by JavaScript before the test. For example, 
‘’ == 0 returns true... the empty string is equal to zero.</p>
<p>Strict equality lets you avoid errors due to the types of the operands.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">function</span> fail<span style="color: #009900;">(</span>a<span style="color: #339933;">,</span> b<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span>b <span style="color: #339933;">==</span> <span style="color: #cc0000;">2</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; a <span style="color: #339933;">=</span> a <span style="color: #339933;">+</span> b<span style="color: #339933;">;</span>
&nbsp; &nbsp;<span style="color: #009900;">}</span>
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">return</span> a <span style="color: #339933;">*</span> <span style="color: #cc0000;">4</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span>
&nbsp;
fail<span style="color: #009900;">(</span><span style="color: #cc0000;">3</span><span style="color: #339933;">,</span> <span style="color: #cc0000;">2</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// 20</span>
fail<span style="color: #009900;">(</span><span style="color: #cc0000;">3</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'2'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// 128 &lt;- Cost: a few hours of debugging :/</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">True/false values</h3>
<p dir="ltr">Testing strict equality is a good practice but it is often 
handier to check whether a variable exists and if it is not null using 
true/false values, and it's more complete, too.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">// Bad version, hard to read and long to write...</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span>myVar <span style="color: #339933;">!==</span> <span style="color: #003366; font-weight: bold;">undefined</span> <span style="color: #339933;">||</span> myVar <span style="color: #339933;">!==</span> <span style="color: #003366; font-weight: bold;">null</span> <span style="color: #339933;">||</span> myVar <span style="color: #339933;">!==</span> <span style="color: #3366cc;">''</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;doSomething<span style="color: #009900;">(</span>myVar<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span>
&nbsp;
<span style="color: #006600; font-style: italic;">// Better (shorter) version</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span>myVar<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;doSomething<span style="color: #009900;">(</span>myVar<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p></p>
<p>&nbsp;You should know the following table&nbsp;by heart:&nbsp;</p>
<p><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/toBoolean.png" alt="Argument type converted to boolean results " height="257" width="350"></p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-danger.jpg" alt="icon danger" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Avoid eval and with</h3>
<h3 dir="ltr"></h3>
<p dir="ltr">We didn't talk about two features of JavaScript, the “eval”
 method and the “with” statement. The first lets you compile a string as
 JavaScript code at runtime.<br>Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">eval<span style="color: #009900;">(</span><span style="color: #3366cc;">'myVar++;'</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">The second lets you extends the scope chain with any object:</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> r <span style="color: #339933;">=</span> <span style="color: #cc0000;">10</span><span style="color: #339933;">,</span>
&nbsp; &nbsp; area<span style="color: #339933;">;</span>
with <span style="color: #009900;">(</span><span>Math</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;area <span style="color: #339933;">=</span> PI <span style="color: #339933;">*</span> pow<span style="color: #009900;">(</span>r<span style="color: #339933;">,</span> <span style="color: #cc0000;">2</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// Math.PI * Math.pow(r, 2)</span>
<span style="color: #009900;">}</span>
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">Those features are great for making bugs, poor performance, and security issues. And they can be<strong> easily avoided</strong>. <strong>So do not use them.</strong></p>
<p dir="ltr">How do we rewrite or replace them?&nbsp;</p>
<p dir="ltr">The eval method is often used to access property of object, but can be easily replaced with the bracket notation.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">for</span> <span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">var</span> i <span style="color: #339933;">=</span> <span style="color: #cc0000;">0</span><span style="color: #339933;">;</span> i <span style="color: #339933;">&lt;</span> <span style="color: #cc0000;">10</span><span style="color: #339933;">;</span> i<span style="color: #339933;">++</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;a <span style="color: #339933;">=</span> eval<span style="color: #009900;">(</span><span style="color: #3366cc;">'obj.prop'</span> <span style="color: #339933;">+</span> i<span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// BAD</span>
&nbsp; &nbsp;b <span style="color: #339933;">=</span> obj<span style="color: #009900;">[</span><span style="color: #3366cc;">'prop'</span> <span style="color: #339933;">+</span> i<span style="color: #009900;">]</span> <span style="color: #006600; font-style: italic;">// good</span>
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">The with statement lets you reduce the length of code when working with deep objects. You can replace it with a simple object.</p>
<p>&nbsp;Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #006600; font-style: italic;">// Bad</span>
&nbsp;
with <span style="color: #009900;">(</span>ext.<span style="color: #660066;">domain</span>.<span style="color: #660066;">library</span>.<span style="color: #660066;">module</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;action<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span>
&nbsp;
<span style="color: #006600; font-style: italic;">// Better</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> m <span style="color: #339933;">=</span> ext.<span style="color: #660066;">domain</span>.<span style="color: #660066;">library</span>.<span style="color: #660066;">module</span><span style="color: #339933;">;</span>
m.<span style="color: #660066;">action</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p>&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Notation</h3>
<p dir="ltr"><strong>CamelCase</strong></p>
<p dir="ltr">The camelCase notation is often used in JavaScript 
libraries. We recommend using the same notation in order to have 
consistent notation within your application.</p>
<p dir="ltr">Example:<br>var myVar = myLibrary.config.defaultValue;</p>
<p dir="ltr"><strong>Naming conventions</strong></p>
<ul>
<li dir="ltr"><strong></strong>Capitalize the first letter of a constructor function’s name</li>
<li dir="ltr">
<p dir="ltr">Capitalize the name of a constant</p>
</li>
</ul>
<p dir="ltr"><strong style="line-height: 1.4;">Dot notation versus brackets notation</strong></p>
<p dir="ltr">When working with objects, we prefer to use the dot 
notation instead of the bracket notation. Of course, this notation is 
not always possible, in those cases, use the bracket notation (not 
eval!).</p>
<p dir="ltr">Example:<br>var myObject.myValue = 1;<br>var myObject[ propertyName + ‘1’] = 2;</p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-danger.jpg" alt="icon danger" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Semicolon insertion</h3>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">JavaScript offers a mechanism to insert missing semicolons 
after statements automatically. Our advice is always to write semicolons
 yourself, because some errors can occur. And those errors may be <em>very&nbsp;</em>hard to detect...</p>
<p dir="ltr">A few examples:&nbsp;</p>
<p dir="ltr"><strong>The return statement</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">function</span> getObject<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">return</span> 
&nbsp; &nbsp;<span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; x<span style="color: #339933;">:</span> <span style="color: #cc0000;">2</span>
&nbsp; &nbsp;<span style="color: #009900;">}</span>
&nbsp;
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr">The result of getObject() is undefined because JavaScript 
inserts a semicolon on the same line as the return statement. The 
correct return statement is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">function</span> getObject<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">return</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; x<span style="color: #339933;">:</span> <span style="color: #cc0000;">2</span>
&nbsp; &nbsp;<span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr"><strong>Object literals</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">var o= {
&nbsp; &nbsp;x: 2
}
['one', 'two'].length &nbsp;
// TypeError: Cannot read property 'length' of undefined</pre>
</div>
</div>
</div>
<p dir="ltr">The semicolon is not inserted after the object literal, and JavaScript tries to access the property “two” of the object.</p>
<p dir="ltr">&nbsp;&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-danger.jpg" alt="icon danger" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Reserved words</h3>
<p dir="ltr"></p>
<p dir="ltr">Some words are reserved by JavaScript, so you cannot use them to declare a variable or a function</p>
<p dir="ltr">The reserved words in<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-7.6.1" target="_blank"> EMCAScript-262</a> are the&nbsp;<em>Keyword</em>s,&nbsp;<em>Future Reserved Word</em>s.</p>
<p dir="ltr">The keywords are:</p>
<div dir="ltr">
<table style="width: 588px; height: 205px;"><colgroup></colgroup>
<tbody>
<tr>
<td>
<p dir="ltr">break</p>
</td>
<td>
<p dir="ltr">do</p>
</td>
<td>
<p dir="ltr">instanceof</p>
</td>
<td>
<p dir="ltr">typeof</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">const</p>
</td>
<td>
<p dir="ltr">else</p>
</td>
<td>
<p dir="ltr">new</p>
</td>
<td>
<p dir="ltr">var</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">catch</p>
</td>
<td>
<p dir="ltr">finally</p>
</td>
<td>
<p dir="ltr">return</p>
</td>
<td>
<p dir="ltr">void</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">continue</p>
</td>
<td>
<p dir="ltr">for</p>
</td>
<td>
<p dir="ltr">switch</p>
</td>
<td>
<p dir="ltr">while</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">debugger</p>
</td>
<td>
<p dir="ltr">function</p>
</td>
<td>
<p dir="ltr">this</p>
</td>
<td>
<p dir="ltr">with</p>
</td>
</tr>
<tr>
<td>
<p dir="ltr">default</p>
</td>
<td>
<p dir="ltr">if</p>
</td>
<td>
<p dir="ltr">throw</p>
</td>
<td></td>
</tr>
<tr>
<td>
<p dir="ltr">delete</p>
</td>
<td>
<p dir="ltr">in</p>
</td>
<td>
<p dir="ltr">try</p>
</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p><a href="http://classroom.w3devcampus.com/%20http:/www.ecma-international.org/ecma-262/5.1/#sec-7.6.1" target="_blank" style="line-height: 1.4;">&nbsp;</a></p>
<p><em>"The following words are used as keywords in proposed extensions 
and are therefore reserved to allow for the possibility of future 
adoption of those extensions."</em></p>
<table style="width: 588px; height: 100px;"><colgroup></colgroup>
<tbody>
<tr>
<td>class</td>
<td>
<p dir="ltr">extends</p>
</td>
<td>let</td>
<td>public</td>
</tr>
<tr>
<td>
<p dir="ltr">const</p>
</td>
<td>
<p dir="ltr">import</p>
</td>
<td>package</td>
<td>static</td>
</tr>
<tr>
<td>enum</td>
<td>implements</td>
<td>private</td>
<td>super</td>
</tr>
</tbody>
</table>
<p></p>
<p>And obviously, &nbsp;<strong>NaN</strong>, <strong>Infinity</strong>,&nbsp;<strong>undefined</strong>, <strong>null,</strong>&nbsp;<strong>true</strong> and <strong>false</strong>&nbsp;are also reserved.&nbsp;</p>
<p>In addition of these words, if your JavaScript code is interpreted by a browser, you must avoid these following words:&nbsp;</p>
<table style="width: 580px;" border="0">
<tbody>
<tr>
<td>alert</td>
<td>history</td>
<td>open</td>
<td>screenY</td>
</tr>
<tr>
<td>blur</td>
<td>innerHeight</td>
<td>outerHeight</td>
<td>statusBar</td>
</tr>
<tr>
<td>closed</td>
<td>innerWidth</td>
<td>outerWidth</td>
<td>windows</td>
</tr>
<tr>
<td>document</td>
<td>length</td>
<td>parent</td>
<td></td>
</tr>
<tr>
<td>focus</td>
<td>location</td>
<td>screen</td>
<td></td>
</tr>
<tr>
<td>frames</td>
<td>navigator</td>
<td>screenX</td>
<td></td>
</tr>
</tbody>
</table>
<p></p>
<p dir="ltr"><a href="http://mattsnider.com/reserved-words-in-javascript/" target="_blank" style="line-height: 1.4;">A nice article</a> with a complete list of words which are reserved or which should be avoided.</p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Immediately-Invoked Function Expressions (IIFE)</h3>
<p dir="ltr">JavaScript has no block scope; it has function scope. And 
working with global variables is probably a bad idea, especially with 
many lines of code. So the best principle is to encapsulate your code 
within a function body.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> myCode <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span> myCode<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">var</span> myFirstVariable <span style="color: #339933;">=</span> <span style="color: #3366cc;">'Hello World'</span><span style="color: #339933;">;</span>
&nbsp; &nbsp;<span style="color: #006600; font-style: italic;">// … do what you want</span>
&nbsp;
<span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
myCode<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">In this example, the variable myFirstVariable and the other
 you will define will not be accessible in the global context. So if 
this code must be executed only once (for initialization for example), 
we can reduce this code with an IIFE like this:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span> myCode<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">var</span> myFirstVariable <span style="color: #339933;">=</span> <span style="color: #3366cc;">'Hello World'</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">// … do what you want</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">This syntax with parentheses lets you call the function 
right after its creation. We can use an anonymous function and also give
 some parameters to this function.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>$<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp;
&nbsp; &nbsp; $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">myJQueryPlugin</span> <span style="color: #339933;">=</span> …
&nbsp; &nbsp; <span style="color: #006600; font-style: italic;">//...</span>
&nbsp;
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span>jQuery<span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr"></p>
<p dir="ltr">Also, IIFEs can be useful in some cases for fixing a 
variable with its current value. We have seen that function parameters 
are passed by value (i.e. primitive variable values are copied into 
arguments). The trick we are going to see in the next example may be 
very useful in browser apps, which are reacting to asynchronous events 
in most cases.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">for</span> <span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">var</span> i <span style="color: #339933;">=</span> <span style="color: #cc0000;">0</span><span style="color: #339933;">;</span> i <span style="color: #339933;">&lt;</span> <span style="color: #cc0000;">3</span><span style="color: #339933;">;</span> i<span style="color: #339933;">++</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp;
&nbsp; &nbsp; window.<span style="color: #660066;">setTimeout</span><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; window.<span style="color: #660066;">alert</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'Iterator value: '</span> <span style="color: #339933;">+</span> i<span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp; &nbsp; <span style="color: #009900;">}</span><span style="color: #339933;">,</span> <span style="color: #cc0000;">1000</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
&nbsp;
&nbsp;
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p><em>window.alert</em> displays a popup with the given content.<br><em>window.setTimeout &nbsp;</em>is
 a function of the browser’s global object window lets you execute a 
function asynchronously&nbsp;after the given time, &nbsp;here 1 second.</p>
<p dir="ltr"><a href="http://jsbin.com/apodod/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit.jpg" alt="link to jsbin" height="30" width="160"></a></p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">In the example above, we expect to display 3 popups which 
will display 0, 1, 2. But we will have 3 popups with the unique value 3 
because when the function is invoked (1 second later) the value of “i” 
is 3.</p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">Now, lets add an IIFE:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 75%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">for</span> <span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">var</span> i <span style="color: #339933;">=</span> <span style="color: #cc0000;">0</span><span style="color: #339933;">;</span> i <span style="color: #339933;">&lt;</span> <span style="color: #cc0000;">3</span><span style="color: #339933;">;</span> i<span style="color: #339933;">++</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp;
&nbsp; &nbsp; <span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>current<span style="color: #009900;">)</span> <span style="color: #009900;">{</span> <span style="color: #006600; font-style: italic;">//this function is a closure</span>
&nbsp; &nbsp; &nbsp; &nbsp; window.<span style="color: #660066;">setTimeout</span><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; window.<span style="color: #660066;">alert</span><span style="color: #009900;">(</span><span style="color: #3366cc;">'Iterator value: '</span> <span style="color: #339933;">+</span> current<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #009900;">}</span><span style="color: #339933;">,</span> <span style="color: #cc0000;">1000</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span>i<span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">// Immediately invoked</span>
&nbsp;
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr"><a href="http://jsbin.com/apodod/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit.jpg" alt="link to jsbin" height="30" width="160"></a></p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Namespacing</h3>
<p dir="ltr">Separating components of an application lets you avoid 
errors and enhance readability and maintainability. You should avoid 
working within the global namespace. Your modules and any part of your 
code should be contained in one or more namespaces and sub namespaces.</p>
<p dir="ltr">JavaScript has no proper namespacing feature, but this can be easily emulated using objects.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> MyNameSpace <span style="color: #339933;">=</span> MyNameSpace <span style="color: #339933;">||</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
MyNameSpace.<span style="color: #660066;">MyModule</span> <span style="color: #339933;">=</span> <span style="color: #009900;">{</span>
&nbsp;
&nbsp; &nbsp;myFunction<span style="color: #339933;">:</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span>
&nbsp;
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr"></p>
<p dir="ltr">If the application is designed with the MVC (Model-View-Controller) pattern, a simple namespace for this application could be:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> Application <span style="color: #339933;">=</span> Application <span style="color: #339933;">||</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
Application.<span style="color: #660066;">models</span> <span style="color: #339933;">=</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
Application.<span style="color: #660066;">views</span> <span style="color: #339933;">=</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
Application.<span style="color: #660066;">controllers</span> <span style="color: #339933;">=</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
&nbsp;
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> IndexController <span style="color: #339933;">=</span> Application.<span style="color: #660066;">controllers</span>.<span style="color: #660066;">IndexController</span> <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span> <span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
IndexController.<span style="color: #000066; font-weight: bold;">prototype</span> <span style="color: #339933;">=</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
&nbsp;</pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-danger.jpg" alt="icon danger" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">JavaScript is case sensitive</h3>
<p dir="ltr">In JavaScript, case sensitivity does not just apply to 
variable names but also to JavaScript keywords and object properties or 
methods.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> fooBar <span style="color: #339933;">=</span> <span style="color: #cc0000;">10</span><span style="color: #339933;">;</span>
&nbsp;
alert<span style="color: #009900;">(</span>foobar<span style="color: #009900;">)</span><span style="color: #339933;">;</span> &nbsp;<span style="color: #006600; font-style: italic;">//raise an error !</span>
&nbsp;
&nbsp;
&nbsp;
myObject.<span style="color: #660066;">myMethod</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
myObject.<span style="color: #660066;">mymethod</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">//this two lines are not equivalent !</span></pre>
</div>
</div>
</div>
<p></p>
<p>And you can waste a lot of time if you are not careful: &nbsp;</p>
<p dir="ltr">var foobar</p>
<p dir="ltr">The following case can cost you a lot of time:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> myVariable <span style="color: #339933;">=</span> <span style="color: #cc0000;">15</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// ...</span>
<span style="color: #006600; font-style: italic;">// a long code ...</span>
<span style="color: #006600; font-style: italic;">// ...</span>
&nbsp;
myvariable <span style="color: #339933;">+=</span> <span style="color: #3366cc;">'an important result'</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">// ...</span>
<span style="color: #006600; font-style: italic;">// a long code ...</span>
<span style="color: #006600; font-style: italic;">// ...</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">return</span> myVariable<span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p>So you have to be strict with custom identifiers to ensure that you 
don't accidentally declare two different variables when you actually 
meant to create just one.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Variable types</h3>
<p dir="ltr">Try to avoid to change variable types after their declaration:</p>
<p dir="ltr">var foo = ‘hello world’;</p>
<p dir="ltr">foo = 15;</p>
<p dir="ltr">Technically, this is completely correct and allowed by JavaScript.</p>
<p dir="ltr">Here, after the declaration foo is a String and after the 
second line the value of foo and its data type are changed. In most 
cases you should avoid this!</p>
<h3 dir="ltr">&nbsp;</h3>
<p>&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">Validate your code with JSLint (or JSHint)</h3>
<p dir="ltr">Most of recommendations listed above are included within 
JSLint. JSLint will quickly scan for any noticeable issues and errors in
 your code.</p>
<p dir="ltr">JSLint can save you a lot of time!</p>
<p dir="ltr">Considering the following sample of code:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<table class="javascript" style="border-collapse: collapse; width: 100%;">
<tbody>
<tr class="li1">
<td style="width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">1
2
3
4
5
6
7
8
9
10
11
</pre>
</td>
<td style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> aList <span style="color: #339933;">=</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> i<span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">for</span> <span style="color: #009900;">(</span>i <span style="color: #339933;">=</span> <span style="color: #cc0000;">0</span><span style="color: #339933;">;</span> i <span style="color: #339933;">&lt;</span> aList.<span style="color: #660066;">length</span><span style="color: #339933;">;</span> i <span style="color: #339933;">+=</span> <span style="color: #cc0000;">1</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp;
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span>aList<span style="color: #009900;">[</span>i<span style="color: #009900;">]</span> <span style="color: #339933;">=</span> <span style="color: #cc0000;">42</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; &nbsp; &nbsp;i <span style="color: #339933;">+=</span> <span style="color: #cc0000;">1</span><span style="color: #339933;">;</span>
&nbsp; &nbsp;<span style="color: #009900;">}</span>
&nbsp;
<span style="color: #009900;">}</span></pre>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p></p>
<p dir="ltr">Do you see the problem here? &nbsp;We used the operator = instead == or === inside the if at line 7 !&nbsp;</p>
<p dir="ltr">It’s a classic trap for every developer (whether beginner 
or experienced). You might say that it's just a typo! But it is so 
discreet that it can be hell to debug: no error is raised and the origin
 of problem is difficult to spot (imagine this sample buried in 
thousands of lines of code).</p>
<p>So if you use tools like <a href="http://www.jslint.com/" target="_blank">jslint </a>or <a href="http://www.jshint.com/">jshint</a>, they will raise the following alert:<em> Unexpected assignment expression</em> (jslint) or&nbsp;<em>Expected a conditional expression and instead saw an assignment</em>. (for jshint).</p>
<p></p>
<p dir="ltr">Putting an operator = instead of an operator == can be so 
difficult to detect that some developers &nbsp;reverse the variable to 
check (left value and right value) and the value like this :</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> aList <span style="color: #339933;">=</span> <span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> i<span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">for</span> <span style="color: #009900;">(</span>i <span style="color: #339933;">=</span> <span style="color: #cc0000;">0</span><span style="color: #339933;">;</span> i <span style="color: #339933;">&lt;</span> aList.<span style="color: #660066;">length</span><span style="color: #339933;">;</span> i <span style="color: #339933;">+=</span> <span style="color: #cc0000;">1</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp;
&nbsp; &nbsp;<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span><span style="color: #cc0000;">42</span> <span style="color: #339933;">===</span> aList<span style="color: #009900;">[</span>i<span style="color: #009900;">]</span> <span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp;i <span style="color: #339933;">+=</span> <span style="color: #cc0000;">1</span><span style="color: #339933;">;</span>
&nbsp;
&nbsp; &nbsp;<span style="color: #009900;">}</span>
&nbsp;
<span style="color: #009900;">}</span></pre>
</div>
</div>
</div>
<p></p>
<p>This way, if you make a typo and write = instead of == , (42 = 
aList[i]) &nbsp;a syntax error will be raised! This isn't a 
recommendation, it's just a trick that some developers have found.</p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="margin-right: 5px; vertical-align: middle;" height="30" width="31">Strict mode</h3>
<p dir="ltr">JavaScript offers a strict mode which modifies some rules 
of the language. This mode limits common developer mistakes. But what 
does it change?</p>
<p dir="ltr"></p>
<p dir="ltr">See some changes here:<br> <a href="http://jsbin.com/unayow/1/edit?js,console" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit.jpg" alt="link to jsbin" height="30" width="160"></a>&nbsp;</p>
<p dir="ltr"></p>
<p dir="ltr">It is possible to change the mode to strict globally for 
one script or just within a function. The syntax for using the strict 
mode is:</p>
<p dir="ltr">‘use strict’;</p>
<p dir="ltr"></p>
<p dir="ltr">If ‘use strict;’ is anywhere in the script outside a 
function, the entire script will use it. If it is placed inside a 
function, only that function will use strict mode. We recommend using it
 within functions because you could have errors if you minimize and 
concat multiple files (i.e. libraries) into one. You can use it with an 
IIFE.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #009900;">(</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">(</span>$<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; <span style="color: #3366cc;">'use strict'</span><span style="color: #339933;">;</span>
&nbsp;
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">var</span> myJQueryPlugin <span style="color: #339933;">=</span> $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">myJQueryPlugin</span> <span style="color: #339933;">=</span> ….
&nbsp;
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #009900;">(</span>jQuery<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
&nbsp; </pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">String</h3>
<ul>
<li dir="ltr">Use single quotes '' for strings</li>
<li dir="ltr">Strings longer than 80 characters should be written across multiple lines using string concatenation:</li>
</ul>
<p dir="ltr">//multiline method 1 (unrecommended method)</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> longString2 <span style="color: #339933;">=</span> <span style="color: #3366cc;">'Lorem ipsum dolor sit amet<span style="color: #000099; font-weight: bold;">\</span>
, consectetur adipiscing elit. Cras vitae<span style="color: #000099; font-weight: bold;">\</span>
consequat magna. Etiam luctus quam a tortor<span style="color: #000099; font-weight: bold;">\</span>
feugiat et commodo felis dictum.<span style="color: #000099; font-weight: bold;">\</span>
Quisque sodales ultricies tempor.'</span> <span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">//multiline method 2 (recommended method) &nbsp;&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> longString3 <span style="color: #339933;">=</span> <span style="color: #3366cc;">'Lorem ipsum dolor sit amet, '</span> <span style="color: #339933;">+</span>
<span style="color: #3366cc;">'consectetur adipiscing elit. Cras vitae '</span> <span style="color: #339933;">+</span>
<span style="color: #3366cc;">'consequat magna. Etiam luctus quam a tortor '</span> <span style="color: #339933;">+</span>
<span style="color: #3366cc;">'feugiat et commodo felis dictum.Quisque '</span> <span style="color: #339933;">+</span>
<span style="color: #3366cc;">'sodales ultricies tempor.'</span> <span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 dir="ltr"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-good.jpg" alt="icon good" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">&nbsp;Coding with discipline</h3>
<p dir="ltr">At the end of this first part, we hope that you are 
convinced that JavaScript is a very powerful language, especially due to
 its dynamic nature and functional features. And if you know that much, 
you can also judge the difficulty of this language - which is probably 
harder than you imagined. From now on, you will definitely work on 
larger or smaller JavaScript projects requiring more or fewer 
developers. Our last recommendation for the JavaScript basics, is simply
 to keep a discipline. At first glance, it seems to lose you time, but 
this might be true only for the first fifty lines of code. Using JSLint 
in your editor and working with conventions within your team will 
provide discipline without much effort, and will improve your 
development time and quality.</p>
<p dir="ltr">&nbsp;</p>
<p dir="ltr">&nbsp;</p>
<h2 dir="ltr">Classical questions&nbsp;</h2>
<p>Now, we will&nbsp;briefly&nbsp;answer a few questions which come up 
often when you&nbsp;begin&nbsp;to develop some JavaScript. You will be 
able to see and edit each answer, thanks to jsbin.&nbsp;</p>
<h3>&nbsp;&nbsp;</h3>
<h3 itemprop="name"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-question.jpg" alt="icon question" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">How do I convert a float to an int ?</h3>
<p><br>The Math object gives you all the&nbsp;<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.8" target="_blank" style="font-size: 13px; font-weight: normal; line-height: 1.231;">basic&nbsp;mathematical&nbsp;methods</a>&nbsp;including (ceil, floor, round)!</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">var intValue = Math.ceil( floatValue ); 
&nbsp;
var intValue = Math.floor( floatValue );
&nbsp;
var intValue = Math.round( floatValue );</pre>
</div>
</div>
</div>
<p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 itemprop="name"><strong style="font-size: 14px; line-height: 1.4;"><strong><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-question.jpg" alt="icon question" style="margin-right: 5px; vertical-align: middle;" height="30" width="31"></strong></strong>How do I convert to String?&nbsp;</h3>
<p><strong><br></strong>To convert to a string, you have several methods :&nbsp;</p>
<ul>
<li><strong>toString() method</strong></li>
</ul>
<p>toString is a method available on all object instances, and it is&nbsp;inherited by every object descended from Object.</p>
<p dir="ltr">Example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> n<span style="color: #339933;">=</span> <span style="color: #cc0000;">55.654</span><span style="color: #339933;">;</span> 
<span style="color: #000066; font-weight: bold;">typeof</span> n<span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//'number'</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> s &nbsp;<span style="color: #339933;">=</span> n.<span style="color: #660066;">toString</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> &nbsp; 
<span style="color: #000066; font-weight: bold;">typeof</span> s<span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//'string' </span>
&nbsp;
<span style="color: #cc0000;">111</span>.<span style="color: #660066;">toString</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//'111'</span>
<span style="color: #003366; font-weight: bold;">true</span>.<span style="color: #660066;">toString</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><span style="color: #006600; font-style: italic;">//'true'</span></pre>
</div>
</div>
</div>
<p></p>
<p id="Overriding_the_default_toString_method" name="Overriding_the_default_toString_method">You also can override the default toString method and that can be really useful when you work with objects.</p>
<p dir="ltr"></p>
<ul>
<li dir="ltr"><strong>String method</strong></li>
</ul>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> n<span style="color: #339933;">=</span> <span style="color: #cc0000;">55.654</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> s <span style="color: #339933;">=</span> <span>String</span><span style="color: #009900;">(</span>n<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #000066; font-weight: bold;">typeof</span> s<span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//'string'</span>
s<span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//'55.654'</span>
&nbsp;
<span>String</span><span style="color: #009900;">(</span><span style="color: #cc0000;">12</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #006600; font-style: italic;">//'12'</span></pre>
</div>
</div>
</div>
<p>Here, there is a call to the constructor String - it returns the content's valueOf result, which is always a string.</p>
<p></p>
<ul>
<li dir="ltr"><strong>Concatenation method</strong></li>
</ul>
<p dir="ltr">You can use operator + to do concatenation and get a string,</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">var n = 88;
var s &nbsp;= '' + n;
s; // '88';</pre>
</div>
</div>
</div>
<p></p>
<p>Be careful :</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">var movie = 10 + 1 + 'dalmatians';
movie; //'11 dalmatians'
&nbsp;</pre>
</div>
</div>
</div>
<p></p>
<p dir="ltr">The expression is evaluated from left to right, so there is
 the number 10, operator +, then the number 1, and so numeric addition 
is applied.</p>
<p dir="ltr">The rule is: &nbsp;AFTER the string, every addition becomes a string concatenation. <br>So the right way to obtain a string is to start with a empty string:&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">var correctMovie = '' + 10 + 1 + 'dalmatians'
correctMovie; // '101 dalmatians';</pre>
</div>
</div>
</div>
<p dir="ltr"></p>
<p dir="ltr"><strong>Which methods should&nbsp;I use? </strong></p>
<p dir="ltr">Depending on the context, <strong>concatenation</strong> is the fastest to write, and it saves some characters. But you must be careful when you use it on complex or long expressions .</p>
<p dir="ltr"><strong>toString() </strong>is semantically clearest, you clearly show that you are trying to get the string equivalent of an object.</p>
<p dir="ltr">It also the best way to convert objects to String, because you&nbsp;can override the default toString method.</p>
<p dir="ltr">At the very least, <strong>String()</strong>&nbsp;always 
returns a string, even if the value is undefined or null, so it can be 
very helpful when you aren't sure of the value.</p>
<p dir="ltr"></p>
<p dir="ltr"><strong>Converting special values </strong>(undefined and null):&nbsp;</p>
<p dir="ltr">undefined:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> foo<span style="color: #339933;">;</span>
&nbsp;
​<span style="color: #000066; font-weight: bold;">var</span> myString1 <span style="color: #339933;">=</span> <span>String</span><span style="color: #009900;">(</span>foo<span style="color: #009900;">)</span><span style="color: #339933;">;</span> 
myString1<span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">// 'undefined' as a string</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> myString2 <span style="color: #339933;">=</span> <span style="color: #3366cc;">''</span> <span style="color: #339933;">+</span> foo<span style="color: #339933;">;</span> 
myString2<span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//'undefined' as a string</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> myString3 <span style="color: #339933;">=</span> foo.<span style="color: #660066;">toString</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
myString3<span style="color: #339933;">;</span> 
<span style="color: #006600; font-style: italic;">// throws an exception - Cannot call method 'toString' of undefined</span></pre>
</div>
</div>
</div>
<p></p>
<p>null:</p>
<p dir="ltr">Very similar&nbsp;behavior&nbsp;happens if value is null 
&nbsp;(toString throws an exception, concatenation and String() return 
‘null’)</p>
<p>&nbsp;<a href="http://jsbin.com/odojol/9/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit.jpg" alt="link to jsbin" height="30" width="160"></a></p>
<p>&nbsp;&nbsp;</p>
<p>&nbsp;</p>
<h3><strong><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-question.jpg" alt="icon question" style="margin-right: 5px; vertical-align: middle;" height="30" width="31"></strong>How do I sort an array?</h3>
<p>Using the sort method works well If you have only one type in your array.&nbsp;</p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px; word-break: normal;"><span style="color: #000066; font-weight: bold;">var</span> myArray <span style="color: #339933;">=</span> <span style="color: #009900;">[</span><span style="color: #cc0000;">9</span><span style="color: #339933;">,</span><span style="color: #cc0000;">1</span><span style="color: #339933;">,</span><span style="color: #cc0000;">2</span><span style="color: #339933;">,</span><span style="color: #cc0000;">0</span><span style="color: #339933;">,</span><span style="color: #cc0000;">3</span><span style="color: #339933;">,</span><span style="color: #cc0000;">5</span><span style="color: #339933;">,</span><span style="color: #cc0000;">99</span><span style="color: #339933;">,</span><span style="color: #cc0000;">5</span><span style="color: #339933;">,</span><span style="color: #cc0000;">111</span><span style="color: #339933;">,-</span><span style="color: #cc0000;">56</span><span style="color: #009900;">]</span><span style="color: #339933;">;</span>
myArray.<span style="color: #660066;">sort</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//[-56, 0, 1, 111, 2, 3, 5, 5, 9, 99]</span>
&nbsp;
myArray <span style="color: #339933;">=</span> <span style="color: #009900;">[</span><span style="color: #3366cc;">'o'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'u'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'b'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'x'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'i'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'j'</span><span style="color: #009900;">]</span><span style="color: #339933;">;</span>
myArray.<span style="color: #660066;">sort</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #006600; font-style: italic;">//['b', 'i', 'j', 'o', 'u', 'x']</span></pre>
</div>
</div>
</div>
<p></p>
<p>But if you have an array with multiples types, or if you want to sort
 an array with your own custom rules, you have to pass a "comparator" 
&nbsp;function as and argument to the sort method.&nbsp;</p>
<p>Example:&nbsp;<strong>Sorting an array in reverse alphabetical order</strong></p>
<div class="rj_insertcode">
<div class="rj_insertcode_javascript" style="overflow: auto; width: 50%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="javascript" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="color: #000066; font-weight: bold;">var</span> myArray <span style="color: #339933;">=</span> <span style="color: #009900;">[</span><span style="color: #3366cc;">'sorting'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'abc'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'Abd'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'d'</span><span style="color: #339933;">,</span><span style="color: #3366cc;">'Hello'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'JavaScript'</span><span style="color: #339933;">,</span> <span style="color: #3366cc;">'ninja'</span> <span style="color: #009900;">]</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">function</span> myComparator<span style="color: #009900;">(</span>a<span style="color: #339933;">,</span>b<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
&nbsp; &nbsp; a<span style="color: #339933;">=</span>a.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; b<span style="color: #339933;">=</span>b.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span>a<span style="color: #339933;">&lt;</span> b<span style="color: #009900;">)</span> <span style="color: #009900;">{</span> <span style="color: #006600; font-style: italic;">//reverse the sign for sort ascending</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #339933;">-</span><span style="color: #cc0000;">1</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span>a <span style="color: #339933;">&gt;</span> b <span style="color: #009900;">)</span><span style="color: #009900;">{</span> <span style="color: #006600; font-style: italic;">//reverse the sign for sort ascending</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #cc0000;">1</span><span style="color: #339933;">;</span>
&nbsp; &nbsp; <span style="color: #009900;">}</span>
&nbsp; &nbsp; <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #cc0000;">0</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span>
&nbsp;
myArray.<span style="color: #660066;">sort</span><span style="color: #009900;">(</span>myComparator<span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre>
</div>
</div>
</div>
<p></p>
<p><a href="http://jsbin.com/abasid/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit.jpg" alt="link to jsbin" height="30" width="160"></a></p>
<p align="left"><strong>&nbsp;&nbsp;</strong></p>
<p align="left">&nbsp;</p>
<h3><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-question.jpg" alt="icon question" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">&nbsp;<strong>How do I sort an array of objects?&nbsp;</strong></h3>
<p>With the same method as before; you have to implement a 
comparison&nbsp;function which in this case takes two objects as 
arguments.&nbsp;</p>
<p><strong><a href="http://jsbin.com/abasid/2/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit.jpg" alt="link to jsbin" height="30" width="160"></a></strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/icon-question.jpg" alt="icon question" style="vertical-align: middle; margin-right: 5px;" height="30" width="31">&nbsp;How do I&nbsp;loop through JavaScript object?</h3>
<p>In other words, how do I "enumerate" all the properties of an object?&nbsp;</p>
<p>Using the&nbsp;for-in loop is the best way, but be careful! This will<strong>&nbsp;</strong>loop
 through all the properties along the prototype chain.&nbsp;So we have 
to check with&nbsp;hasOwnProperty method to be&nbsp;sure that the key 
you get is an actual property of an object, and does not come from the 
prototype.</p>
<p><a href="http://jsbin.com/ehiqij/1/edit"><strong></strong></a><strong><a href="http://jsbin.com/ehiqij/1/edit" target="_blank"><img src="Week%202%20%20%20JavaScript%20Basics%20-%20Part%202_files/btn-tryit.jpg" alt="link to jsbin" height="30" width="160"></a></strong></p>
<p dir="ltr"></p></div> </body></html>